(()=>{var e,t,n={610:(e,t,n)=>{"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>o})},991:(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}n.d(t,{Z:()=>i})},156:(e,t,n)=>{"use strict";function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>o})},544:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/Darnell_Noel_FSD_Resume_Feb_2021.pdf"},403:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/Darnell_Noel_FSD_Resume_Mar_2021.pdf"},716:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/My_Google_Desktop_Audit.pdf"},398:(e,t,n)=>{"use strict";n.r(t)},177:(e,t,n)=>{"use strict";n.r(t)},476:(e,t,n)=>{var o={"./Darnell_Noel_FSD_Resume_Feb_2021.pdf":544,"./Darnell_Noel_FSD_Resume_Mar_2021.pdf":403,"./My_Google_Desktop_Audit.pdf":716};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=476},466:(e,t,n)=>{var o={"./mq.css":398,"./style.css":177};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=466},533:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/ed6766ead3a14d006a27.mp4"},225:(e,t,n)=>{var o={"./laptop-keyboard-vid-hq.mp4":533};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=225}},o={};function i(e){var t=o[e];if(void 0!==t)return t.exports;var a=o[e]={id:e,loaded:!1,exports:{}};return n[e](a,a.exports,i),a.loaded=!0,a.exports}i.m=n,i.amdO={},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>e+"-bundle.js",i.miniCssF=e=>{},i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="My_Dev_Portfolio:",i.l=(n,o,a,r)=>{if(e[n])e[n].push(o);else{var s,c;if(void 0!==a)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+a){s=u;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.setAttribute("data-webpack",t+a),s.src=n),e[n]=[o];var m=(t,o)=>{s.onerror=s.onload=null,clearTimeout(p);var i=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(o))),t)return t(o)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=m.bind(null,s.onerror),s.onload=m.bind(null,s.onload),c&&document.head.appendChild(s)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.p="/",(()=>{var e={826:0};i.f.j=(t,n)=>{var o=i.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var a=new Promise(((n,i)=>o=e[t]=[n,i]));n.push(o[2]=a);var r=i.p+i.u(t),s=new Error;i.l(r,(n=>{if(i.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var a=n&&("load"===n.type?"missing":n.type),r=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+a+": "+r+")",s.name="ChunkLoadError",s.type=a,s.request=r,o[1](s)}}),"chunk-"+t,t)}};var t=(t,n)=>{var o,a,[r,s,c]=n,l=0;for(o in s)i.o(s,o)&&(i.m[o]=s[o]);for(c&&c(i),t&&t(n);l<r.length;l++)a=r[l],i.o(e,a)&&e[a]&&e[a][0](),e[r[l]]=0},n=self.webpackChunkMy_Dev_Portfolio=self.webpackChunkMy_Dev_Portfolio||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";function e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return function(){return e.apply(void 0,n)}}function t(e,t){var n;return function(){var o=this,i=arguments;clearTimeout(n),n=setTimeout((function(){return e.apply(o,i)}),t)}}function n(e,t){var n,o=0;return function(){var i=this,a=arguments;return void 0!==n?void 0:new Promise((function(r,s){var c;n=setTimeout((function(){return n=void 0,r(o),e(i,a)}),null!==(c=o)&&void 0!==c?c:t)})).then((function(){0===o&&(o=void 0),setTimeout((function(){return o=0}),t)})).catch((function(e){return console.error(e)}))}}function o(e,t,n,o){e.reset(),t.setAttribute("disabled","disabled"),n.innerHTML=null!=o?o:"Submission Successful!"}function a(e,t){e.innerHTML=null!=t?t:"Submission Failed!"}function r(e,t,n){return e.matches?t():n?n():null}function s(){for(var e="#",t=0;t<3;t++)e+=("0"+Math.floor(Math.random()*Math.pow(16,2)/2).toString(16)).slice(-2);return e}var c={body:document.body,google_preview_modal_btn:document.querySelector("[data-bs-toggle='modal']"),google_preview_modal:document.querySelector(".resume"),lazy_imgs:document.querySelectorAll("img.lazy"),lazy_sources:document.querySelectorAll("source"),lazy_bgs:document.querySelectorAll(".lazy-bg"),header:document.querySelector("header"),header_vid:document.querySelector("header video"),header_vid_multi:document.querySelectorAll("video [data-src]"),header_btns:document.querySelectorAll("button"),header_links:document.querySelectorAll("a"),nav_container:document.querySelector(".nav-container"),top_nav:document.querySelector(".top-header-nav"),bot_nav:document.querySelector(".bot-header-nav"),body_placeholder:document.querySelector("body .placeholder-div"),header_empty_div:document.querySelector("header .empty-div"),scroll_indicator:document.querySelector("#my-bar"),active_lists:document.querySelectorAll(".bot-header-nav .nav-item"),active_link:document.querySelector("a.active"),anchor_links:document.querySelectorAll("a.anchor-link"),toggler_btn:document.querySelector(".navbar-toggler"),toggler_btn_icon:document.querySelector(".navbar-toggler-icon"),toggler_btn_word:document.querySelector(".navbar-toggler-word"),navbar_scroll:document.querySelector(".navbar-nav-scroll"),bot_nav_collapse:document.querySelector("#bot-header-nav"),intro_msg:document.querySelector(".intro"),welcome:document.querySelector(".welcome"),text_wrapper_ml13:document.querySelector(".ml13"),header_divider:document.querySelector(".custom-shape-divider-bottom-1612032701"),about_summary_wrapper:document.querySelector(".about-section .summary-wrapper"),my_age:document.querySelector("[data-age='my-age']"),summary_containers:document.querySelectorAll(".summary-container"),summary_btn:document.querySelector("[data-id='summary-btn']"),my_carousel_prev_btn:document.querySelector(".services-section .my-carousel-btn-prev"),my_carousel_next_btn:document.querySelector(".services-section .my-carousel-btn-next"),my_carousel_wrapper:document.querySelector(".my-carousel-wrapper"),my_carousel_content:document.querySelector(".my-carousel-content"),my_carousel_items:document.querySelectorAll(".my-carousel-item"),skill_ratings:document.querySelectorAll(".skill-rating"),skill_ratings_beginner:document.querySelectorAll(".skill-rating-beginner"),skill_ratings_novice:document.querySelectorAll(".skill-rating-novice"),skill_ratings_intermediate:document.querySelectorAll(".skill-rating-intermediate"),skill_ratings_advanced:document.querySelectorAll(".skill-rating-advanced"),skill_ratings_expert:document.querySelectorAll(".skill-rating-expert"),return_to_dev_gallery_btns:document.querySelectorAll("[data-id='dev-project-gallery']"),dev_project_gallery:document.getElementById("dev-project-gallery"),dev_project_overview:document.getElementById("dev-project-overview"),dev_project_gallery_btns:document.querySelectorAll("button[data-dev-project]"),dev_project_carousel:document.getElementById("dev-project-carousel"),dev_project_carousel_indicator_section:document.getElementById("dev-project-carousel-indicators"),dev_project_carousel_inner_section:document.getElementById("dev-project-carousel-inner"),dev_project_carousel_note_section:document.getElementById("dev-project-carousel-notes"),dev_project_carousel_icon_section:document.getElementById("dev-project-carousel-icon-section"),dev_project_carousel_next:document.querySelectorAll("#dev-project-overview .carousel-control-next"),dev_project_carousel_prev:document.querySelectorAll("#dev-project-overview .carousel-control-prev"),client_project_gallery:document.getElementById("client-project-gallery"),client_project_overview:document.getElementById("client-project-overview"),client_project_gallery_btns:document.querySelectorAll("button[data-client-project]"),client_project_carousel:document.getElementById("client-project-carousel"),client_project_carousel_indicator_section:document.getElementById("client-project-carousel-indicators"),client_project_carousel_inner_section:document.getElementById("client-project-carousel-inner"),client_project_carousel_note_section:document.getElementById("client-project-carousel-notes"),client_project_carousel_icon_section:document.getElementById("client-project-carousel-icon-section"),client_project_carousel_next:document.querySelectorAll("#client-project-overview .carousel-control-next"),client_project_carousel_prev:document.querySelectorAll("#client-project-overview .carousel-control-prev"),form_data:document.querySelectorAll(".form-data"),country_select:document.getElementById("country"),phone:document.getElementById("phone"),valid_feedback_fname:document.querySelector(".valid-feedback.valid-feedback-fname"),valid_feedback_lname:document.querySelector(".valid-feedback.valid-feedback-lname"),valid_feedback_email:document.querySelector(".valid-feedback.valid-feedback-email"),valid_feedback_country:document.querySelector(".valid-feedback.valid-feedback-country"),valid_feedback_message:document.querySelector(".valid-feedback.valid-feedback-message"),invalid_feedback_fname:document.querySelector(".invalid-feedback.invalid-feedback-fname"),invalid_feedback_lname:document.querySelector(".invalid-feedback.invalid-feedback-lname"),invalid_feedback_email:document.querySelector(".invalid-feedback.invalid-feedback-email"),invalid_feedback_country:document.querySelector(".invalid-feedback.invalid-feedback-country"),invalid_feedback_message:document.querySelector(".invalid-feedback.invalid-feedback-message"),forms_need_validation:document.querySelectorAll(".needs-validation"),my_form:document.getElementById("my-form"),my_form_button:document.getElementById("my-form-button"),my_form_status:document.getElementById("my-form-status"),grecaptchas:document.getElementsByClassName("g-recaptcha"),create_scripts:function(){for(var e=this,t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];n.forEach((function(t){var n=document.createElement("script");n.src=t,n.setAttribute("async","async"),e.body.appendChild(n)}))},load_bg_vid:function(){this.header_vid_multi.forEach((function(e){var t=e.getAttribute("data-src"),n=e.getAttribute("data-media");r(window.matchMedia(n),(function(){e.setAttribute("src",t),e.setAttribute("media",n),e.parentElement.load()}),(function(){return e.removeAttribute("src")}))}))},add_poster_img_sm:function(){var e=this;r(window.matchMedia("(max-width: 767.98px)"),(function(){e.header_vid.setAttribute("poster","./img/base/webp/think-different-700.webp")}),null)},toggler_menu_icon_switch:function(){var e=this;setInterval((function(){e.toggler_btn_word.classList.contains("d-none")&&e.toggler_btn_word?(e.toggler_btn_icon.classList.add("d-none"),e.toggler_btn_word.classList.remove("d-none")):e.toggler_btn_icon.classList.contains("d-none")&&e.toggler_btn_word&&(e.toggler_btn_icon.classList.remove("d-none"),e.toggler_btn_word.classList.add("d-none"))}),5e3)},side_menu_reveal:function(){c.bot_nav_collapse.classList.add("side-menu-reveal"),c.bot_nav_collapse.classList.remove("side-menu-hide")},side_menu_hide:function(){c.bot_nav_collapse.classList.remove("side-menu-reveal"),c.bot_nav_collapse.classList.add("side-menu-hide")},mobile_menu_reveal:function(){c.header.classList.add("mobile-menu-reveal"),c.header.classList.remove("mobile-menu-hide")},mobile_menu_hide:function(){c.header.classList.remove("mobile-menu-reveal"),c.header.classList.add("mobile-menu-hide")},no_menu:function(){c.bot_nav_collapse.classList.remove("side-menu-hide"),c.bot_nav_collapse.classList.remove("side-menu-reveal"),c.header.classList.remove("mobile-menu-hide"),c.header.classList.remove("mobile-menu-reveal"),c.bot_nav_collapse.classList.remove("show")},shrink_header:function(){this.body.classList.remove("will-change-height"),this.nav_container.classList.add("nav-container-sticky"),this.header.style.height="100px",this.header.style.boxShadow="0 0.1rem 5rem rgba(0,0,0,0.5)",this.header_vid.classList.add("d-none"),this.header_vid.pause(),this.header.style.background="linear-gradient(rgba(31,111,139,1), rgba(31,111,139,1)), url('./img/transparent-png-w10.png') no-repeat fixed 100% 100%",this.intro_msg.classList.add("h-0")},expand_placeholder_div:function(){this.body_placeholder.style.height="100vh",this.body_placeholder.classList.replace("invisible","visible"),this.body_placeholder.classList.replace("placeholder-div-reveal-start","placeholder-div-reveal-end")},expand_header:function(){var e=this;this.body.classList.add("will-change-height"),this.nav_container.classList.remove("nav-container-sticky");var t=[window.matchMedia("(min-width: 992px)"),window.matchMedia("(max-width: 991.98px)")];r(t[0],(function(){e.header.style.height="70vh"}),null),r(t[1],(function(){e.header.style.height="70vh"}),null),this.header.style.boxShadow="unset",this.header_vid.classList.remove("d-none"),this.header_vid.play(),this.intro_msg.classList.remove("h-0")},shrink_placeholder_div:function(){this.body_placeholder.style.height="0",this.body_placeholder.classList.replace("visible","invisible"),this.body_placeholder.classList.replace("placeholder-div-reveal-end","placeholder-div-reveal-start")},replace_vid_bg:function(){this.header.style.background="linear-gradient(rgba(31,111,139,0.8), rgba(0,0,0,0.6)), url('./img/base/webp/laptop-keyboard.webp') no-repeat fixed 20% 20%",this.header.style.backgroundSize="cover"},fixed_bottom_header:function(){var e=this;r(window.matchMedia("(max-width: 767.98px)"),(function(){e.header.classList.replace("sticky-top","fixed-bottom")}),(function(){e.header.classList.replace("fixed-bottom","sticky-top")}))},no_fixed_bottom_header:function(){this.header.classList.contains("fixed-bottom")&&this.header.classList.replace("fixed-bottom","sticky-top")},animate_letters:function(){this.text_wrapper_ml13.innerHTML=this.text_wrapper_ml13.textContent.replace(/\S/g,"<span class='letter'>$&</span>"),anime.timeline({loop:!0}).add({targets:".ml13 .letter",translateY:[100,0],translateZ:0,opacity:[0,1],easing:"easeOutExpo",duration:600,delay:function(e,t){return 300+30*t}}).add({targets:".ml13 .letter",translateY:[0,-100],opacity:[1,0],easing:"easeInExpo",duration:600,delay:function(e,t){return 6e3+30*t}})},change_about_info:function(){var e=this;this.summary_containers[1].classList.contains("d-none")?(this.about_summary_wrapper.classList.add("opacity-0"),setTimeout((function(){e.summary_containers[0].classList.add("d-none","opacity-0"),e.summary_containers[1].classList.remove("d-none","opacity-0"),e.summary_btn.innerHTML='\n                    <span class="circle" aria-hidden="true">\n                        <i class="fas fa-info-circle"></i>\n                    </span>\n\n                    <span class="btn-text">\n                        Learn More\n                    </span>\n                '}),205),setTimeout((function(){e.about_summary_wrapper.classList.remove("opacity-0")}),350)):this.summary_containers[0].classList.contains("d-none")&&(this.about_summary_wrapper.classList.add("opacity-0"),setTimeout((function(){e.summary_containers[1].classList.add("d-none","opacity-0"),e.summary_containers[0].classList.remove("d-none","opacity-0"),e.summary_btn.innerHTML='\n                    <span class="circle" aria-hidden="true">\n                        <i class="fas fa-info-circle"></i>\n                    </span>\n\n                    <span class="btn-text">\n                        Learn More\n                    </span>\n                '}),205),setTimeout((function(){e.about_summary_wrapper.classList.remove("opacity-0")}),350))},grow_btn_onclick:function(e,t,n){e.style.transform="scale(".concat(t,")"),setTimeout((function(){e.style.transform="initial"}),n)},scroll_horizontally:function(e,t){e.scrollLeft+=t},scroll_start:function(e,t){e.scrollLeft>=e.scrollWidth-e.clientWidth-t&&(e.scrollLeft=0)},scroll_end:function(e,t){e.scrollLeft<=t&&(e.scrollLeft=e.scrollWidth-e.clientWidth)},populate_skill_rating:function(e){this.skill_ratings_beginner.forEach((function(t){t.innerHTML=e.getRating("beginner")})),this.skill_ratings_novice.forEach((function(t){t.innerHTML=e.getRating("novice")})),this.skill_ratings_intermediate.forEach((function(t){t.innerHTML=e.getRating("intermediate")})),this.skill_ratings_advanced.forEach((function(t){t.innerHTML=e.getRating("advanced")})),this.skill_ratings_expert.forEach((function(t){t.innerHTML=e.getRating("expert")}))},display_form_validation_msg:function(){this.invalid_feedback_fname&&"none"!=window.getComputedStyle(this.invalid_feedback_fname).display&&(this.valid_feedback_fname.innerHTML="Nice! You remembered your first name!"),this.invalid_feedback_lname&&"none"!=window.getComputedStyle(this.invalid_feedback_lname).display&&(this.valid_feedback_lname.innerHTML="So you do have a last name..."),this.invalid_feedback_email&&"none"!=window.getComputedStyle(this.invalid_feedback_email).display&&(this.valid_feedback_email.innerHTML="Much better...please ensure that the spelling of your email is correct"),this.invalid_feedback_country&&"none"!=window.getComputedStyle(this.invalid_feedback_country).display&&(this.valid_feedback_country.innerHTML="Welcome to Earth 👽"),this.invalid_feedback_message&&"none"!=window.getComputedStyle(this.invalid_feedback_message).display&&(this.valid_feedback_message.innerHTML="How did you forget the most important part? Oh well, at least it's fine now...")}};const l=c;var d=i(610),u=i(991),m=i(156);const p=function(){function e(){(0,d.Z)(this,e),(0,m.Z)(this,"classification",""),(0,m.Z)(this,"filled_icon",'   \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">\n                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>\n                    </svg>\n                  '),(0,m.Z)(this,"half_icon",'                                       \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star-half" viewBox="0 0 16 16">\n                        <path d="M5.354 5.119L7.538.792A.516.516 0 0 1 8 .5c.183 0 .366.097.465.292l2.184 4.327 4.898.696A.537.537 0 0 1 16 6.32a.55.55 0 0 1-.17.445l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256a.519.519 0 0 1-.146.05c-.341.06-.668-.254-.6-.642l.83-4.73L.173 6.765a.55.55 0 0 1-.171-.403.59.59 0 0 1 .084-.302.513.513 0 0 1 .37-.245l4.898-.696zM8 12.027c.08 0 .16.018.232.056l3.686 1.894-.694-3.957a.564.564 0 0 1 .163-.505l2.906-2.77-4.052-.576a.525.525 0 0 1-.393-.288L8.002 2.223 8 2.226v9.8z"/>\n                    </svg>\n                '),(0,m.Z)(this,"empty_icon",' \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star" viewBox="0 0 16 16">\n                        <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"/>\n                    </svg>\n                ')}return(0,u.Z)(e,[{key:"getRating",value:function(e){return"beginner"===e?e=1:"novice"===e?e=2:"intermediate"===e?e=3:"advanced"===e?e=4:"expert"===e&&(e=5),this.classification=this.filled_icon.repeat(e)+this.empty_icon.repeat(5-e),this.classification}}]),e}();function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function _(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const v=function(){function e(t,n,o,i,a,r){(0,d.Z)(this,e),(0,m.Z)(this,"name",void 0),(0,m.Z)(this,"description",void 0),(0,m.Z)(this,"status",{msg:null,class_code:null}),(0,m.Z)(this,"link",void 0),(0,m.Z)(this,"link_header",void 0),(0,m.Z)(this,"link_note",void 0),(0,m.Z)(this,"github_link",void 0),(0,m.Z)(this,"github_readme",void 0),(0,m.Z)(this,"notes",[]),(0,m.Z)(this,"thumbnail",{btn_id:null,src:null,alt:null}),(0,m.Z)(this,"carousel_img_list",{ids:[],srcs:[],alts:[]}),(0,m.Z)(this,"tool_icon_list",{ids:[],srcs:[],alts:[]}),1===n?(n="Completed",this.status.class_code="status-complete"):2===n?(n="Work in Progress",this.status.class_code="status-in-progress"):3===n&&(n="On Hold",this.status.class_code="status-hold"),r=!0===r?"(GitHub - readme available)":"(GitHub)",this.name=t,this.status.msg=n,this.link=o,this.link_header=i,this.github_link=a,this.github_readme=r}return(0,u.Z)(e,[{key:"add_imgs",value:function(e,t,n){var o,i,a;(o=this.carousel_img_list.ids).push.apply(o,_(e)),(i=this.carousel_img_list.srcs).push.apply(i,_(t)),(a=this.carousel_img_list.alts).push.apply(a,_(n))}},{key:"add_tool_icons",value:function(e,t,n){var o,i,a;(o=this.tool_icon_list.ids).push.apply(o,_(e)),(i=this.tool_icon_list.srcs).push.apply(i,_(t)),(a=this.tool_icon_list.alts).push.apply(a,_(n))}}]),e}();function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}console.log("App.js Loaded Successfully");var g={};function b(e){e.keys().forEach((function(t){return g[t]=e(t)}))}function y(e){return e()}b(i(466)),b(i(476)),b(i(225)),document.addEventListener("DOMContentLoaded",(function(){console.log("DOMContentLoaded Successfully"),function(){var e=[].slice.call(l.lazy_imgs),t=[].slice.call(l.lazy_sources),n=[].slice.call(l.lazy_bgs),o=[].slice.call(l.grecaptchas),i={root:null,rootMargin:"100px",threshold:0};if("IntersectionObserver"in window){var a=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){var t=e.target,n=t.getAttribute("data-src"),o=t.getAttribute("data-srcset");t.hasAttribute("data-src")&&(t.setAttribute("src",n),t.removeAttribute("data-src")),t.hasAttribute("data-srcset")&&(t.setAttribute("srcset",o),t.removeAttribute("data-srcset")),t.classList.remove("lazy"),a.unobserve(e.target)}}))}),i);e.forEach((function(e){a.observe(e)}));var r=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){var t=e.target,n=t.getAttribute("data-srcset");t.hasAttribute("data-srcset")&&(t.setAttribute("srcset",n),t.removeAttribute("data-srcset")),r.unobserve(e.target)}}))}),i);t.forEach((function(e){r.observe(e)}));var s=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&(e.target.classList.add("load-now"),s.unobserve(e.target))}))}),i);n.forEach((function(e){s.observe(e)}));var c=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&new Promise((function(e,t){l.create_scripts("https://www.google.com/recaptcha/api.js?render=explicit"),setTimeout(e,2e3)})).then((function(){y((function(){!function t(){l.grecaptchas.length>0?(l.my_form_button.removeAttribute("disabled"),c.unobserve(e.target),grecaptcha.render("recaptcha",{sitekey:"6LfWHkgaAAAAAIKEcuqTQiy82YSpeWTdjebsfWZ3",callback:function(){}})):setTimeout((function(){t()}),15e3)}()}))})).catch((function(e){return console.log("Error in script delay promise: ",e)}))}))}),i);o.forEach((function(e){c.observe(e)}))}}(),l.body.classList.add("will-change-height"),l.header.classList.add("will-change-height"),l.my_form_button.setAttribute("disabled","disabled"),l.add_poster_img_sm(),l.load_bg_vid(),window.addEventListener("resize",t((function(){l.add_poster_img_sm(),l.load_bg_vid()}),500)),setTimeout((function(){r(window.matchMedia("(min-width: 768px)"),(function(){return l.create_scripts("https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js")}),(function(){}))}),2e3),setTimeout((function(){return l.create_scripts("https://code.tidio.co/edv8badlavwvekyo42tfkxyp6frut7yq.js","https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")}),1e4);var c=!1;l.google_preview_modal_btn.addEventListener("click",(function(){c||(l.google_preview_modal.setAttribute("src","https://drive.google.com/file/d/1dJLAdbOlVNz-btYv6Zl1IhrlHQKYNQlT/preview"),c=!0)})),new IntersectionObserver((function(e){e.forEach((function(e){e.intersectionRect.height>0?console.log(e):console.log("else entry",e)}))}),{rootMargin:"10px",threshold:0});var d,u=!0,m=!1,h=!1;l.anchor_links.forEach((function(e){e.addEventListener("click",(function(){(document.documentElement.scrollTop<=0||window.pageYOffset<=0)&&setTimeout((function(){e.click()}),750)}))}));var _,g,b,w,k,L,S,j=function(){return d=setTimeout((function(){u||(l.header.style.opacity="0",l.header.style.visibility="hidden")}),800)};_=function(){l.toggler_btn.classList.contains("collapsed")?l.side_menu_hide():l.side_menu_reveal()},g=function(){l.toggler_btn.classList.contains("collapsed")?l.mobile_menu_hide():l.mobile_menu_reveal()},l.toggler_btn.addEventListener("click",(function(){var e=[window.matchMedia("(max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)")];r(e[0],g,null),r(e[1],_,null)})),window.addEventListener("resize",t((function(){l.no_menu()}),500)),l.header_vid.addEventListener("ended",(function(){l.replace_vid_bg(),l.header_vid.remove(),h=!0})),l.header_vid.addEventListener("animationend",(function(){setTimeout((function(){l.replace_vid_bg(),l.header_vid.remove(),h=!0}),3e3)})),function(){var e=function(){if((document.documentElement.scrollTop>0||window.pageYOffset>0)&&!1===m)l.shrink_header(),l.expand_placeholder_div(),m=!0;else if((document.documentElement.scrollTop<=0||window.pageYOffset<=0)&&!0===m)l.expand_header(),l.shrink_placeholder_div(),m&&h&&l.replace_vid_bg(),m=!1;else if((document.documentElement.scrollTop>0||window.pageYOffset>0)&&!0===m)return};document.documentElement.scrollTop>0||window.pageYOffset,e();var o=t((function(){m=!1}),800),i=n((function(){e()}),100);window.addEventListener("resize",t((function(){e()}),200)),l.header.addEventListener("mouseover",(function(){u=!0,clearTimeout(d)})),l.header.addEventListener("mousemove",(function(){u=!0,clearTimeout(d)})),l.header.addEventListener("touchstart",(function(){u=!0,clearTimeout(d)}),{passive:!0}),l.header.addEventListener("touchmove",(function(){u=!0,clearTimeout(d)}),{passive:!0}),l.header.addEventListener("mouseout",(function(){(document.documentElement.scrollTop>0||window.pageYOffset>0)&&!l.bot_nav_collapse.classList.contains("show")&&(u=!1,j())})),l.header_btns.forEach((function(e){e.addEventListener("focus",(function(){u=!0,clearTimeout(d)}))})),l.header_links.forEach((function(e){e.addEventListener("focus",(function(){u=!0,clearTimeout(d)}))})),document.addEventListener("scroll",n((function(){return(u=!(document.documentElement.scrollTop>0||window.pageYOffset>0))?(clearTimeout(d),l.header.style.opacity="unset",void(l.header.style.visibility="unset")):l.bot_nav_collapse.classList.contains("show")?(clearTimeout(d),void(u=!0)):(clearTimeout(d),l.header.style.opacity="unset",l.header.style.visibility="unset",void j())}),100),{passive:!0}),document.addEventListener("scroll",t((function(){var e,t;e=l.scroll_indicator,t=document.documentElement.scrollTop/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100,e.style.width=t+"%"}),200),{passive:!0}),document.addEventListener("scroll",o,{passive:!0}),document.addEventListener("touchmove",o,{passive:!0}),document.addEventListener("touchstart",o,{passive:!0}),document.addEventListener("scroll",i,{passive:!0}),document.addEventListener("touchmove",i,{passive:!0}),document.addEventListener("touchstart",i,{passive:!0})}(),l.animate_letters(),l.my_age.innerHTML=(b=Date.now()-new Date("26 March 1990"),w=new Date(b),Math.abs(w.getUTCFullYear()-1970)),l.summary_btn.addEventListener("click",(function(){l.change_about_info()})),k=360,L=[window.matchMedia("(max-width: 320.98px)"),window.matchMedia("(min-width: 321px) and (max-width: 575.98px)"),window.matchMedia("(min-width: 576px) and (max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)"),window.matchMedia("(min-width: 992px) and (max-width: 1199.98px)"),window.matchMedia("(min-width: 1200px) and (max-width: 1399.98px)"),window.matchMedia("(min-width: 1400px)")],(S=function(){r(L[0],(function(){return k=274}),null),r(L[1],(function(){return k=296}),null),r(L[2],(function(){return k=360}),null),r(L[3],(function(){return k=328}),null),r(L[4],(function(){return k=360}),null),r(L[5],(function(){return k=980/3}),null),r(L[6],(function(){return k=360}),null)})(),window.addEventListener("resize",t((function(){S(),l.my_carousel_content.scrollLeft=0}),500)),l.my_carousel_prev_btn.addEventListener("click",n((function(){l.grow_btn_onclick(l.my_carousel_prev_btn,1.25,250),l.scroll_horizontally(l.my_carousel_content,-k),l.scroll_end(l.my_carousel_content,20)}),700)),l.my_carousel_next_btn.addEventListener("click",n((function(){l.grow_btn_onclick(l.my_carousel_next_btn,1.25,250),l.scroll_horizontally(l.my_carousel_content,k),l.scroll_start(l.my_carousel_content,20)}),700)),function(){var e,n=[window.matchMedia("(max-width: 320.98px)"),window.matchMedia("(min-width: 321px) and (max-width: 575.98px)"),window.matchMedia("(min-width: 576px) and (max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)"),window.matchMedia("(min-width: 992px)")],o=function(){r(n[0],(function(){return e=140}),null),r(n[1],(function(){return e=150}),null),r(n[2],(function(){return e=250}),null),r(n[3],(function(){return e=300}),null),r(n[4],(function(){return e=void 0}),null)};o();var a=function(){var t;TagCloud(".tag-cloud-content",["OOP","SOC / MVC","REST-APIs","Data-Structures","Continuous-Integration","UI / UX","Testing","Version-Control","Debugging","Algorithms","App-Development","Responsive-Design","Security","Optimization","Customer-Service"],{radius:null!==(t=e)&&void 0!==t?t:340,maxSpeed:"fast",initSpeed:"slow",direction:135,keep:!1}),document.querySelector(".tagcloud"),document.querySelectorAll(".tagcloud--item").forEach((function(e){e.style.color=s();var t=!1,n=!1;e.addEventListener("click",(function(){t&&n?(e.style.fontSize="0",setTimeout((function(){e.style.color=s(),e.style.fontSize="initial",e.style.fontWeight="400",t=!1,n=!1}),5e3)):t&&!n?(e.style.color="var(--theme-colour-4)",e.style.fontSize="140%",n=!0):(e.style.color="var(--theme-colour-1)",e.style.fontSize="120%",t=!0)}))}))};new Promise((function(e,t){return setTimeout(e,3100)})).then((function(){return i.e(351).then(i.bind(i,351))})).then((function(e){return e.default})).then((function(){a(),window.addEventListener("resize",t((function(){o(),document.querySelector(".tagcloud")&&document.querySelector(".tagcloud").remove(),a()}),500))})).catch((function(e){return console.error(e)}))}(),l.populate_skill_rating(new p),function(){var e={},t="",n=(new bootstrap.Carousel(l.dev_project_carousel,{interval:5e3}),function(){t='\n                        <div class="flex-row row justify-content-between align-items-center">\n                            <div class="col-12 col-xl-6">\n                                <div id="dev-project-carousel" class="carousel slide" data-bs-ride="carousel">\n                                    <div class="carousel-indicators" id="dev-project-carousel-indicators">\n                                        \n                                    </div>\n\n                                    <div class="carousel-inner" id="dev-project-carousel-inner">\n\n                                    </div>\n\n                                    <button class="carousel-control-prev btn h-50 m-auto" type="button" data-bs-target="#dev-project-carousel" data-bs-slide="prev">\n                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>\n        \n                                        <span class="visually-hidden">Previous</span>\n                                    </button>\n    \n                                    <button class="carousel-control-next btn h-50 m-auto" type="button" data-bs-target="#dev-project-carousel" data-bs-slide="next">\n                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>\n        \n                                        <span class="visually-hidden">Next</span>\n                                    </button>\n                                </div>\n\n                                <button class="btn btn-custom-2 my-5 d-block mx-auto w-auto btn-anim" data-id="dev-project-gallery">\n                                    <span class="circle" aria-hidden="true">\n                                        <i class="fas fa-arrow-alt-circle-up"></i>\n                                    </span>\n\n                                    <span class="btn-text">\n                                        Return to Gallery\n                                    </span>\n                                </button>\n                            </div>\n\n                            <div class="col-12 col-xl-6">\n                                <div class="card-body py-5">\n                                    <h3 class="text-center">'.concat(e.name,"</h3>\n                                    \n                                    <p>\n                                        ").concat(e.description,"\n                                        <br><strong>Status: ").concat(e.status.msg,' <span class="').concat(e.status.class_code,' status-circle"></span></strong>\n                                    </p>\n                                    \n                                    <a href=').concat(e.link,' class="fs-5 text-reset text-decoration-none anim-link-2 w-auto" target="_blank" rel="noopener"><strong class="text-custom-2"><i class="fas fa-external-link-alt"></i> ').concat(e.link_header,"</strong> Now ").concat(e.link_note,"</a>\n                                    <br><a href=").concat(e.github_link,' class="fs-5 text-reset text-decoration-none anim-link-2 w-auto" target="_blank" rel="noopener"><strong class="text-custom-1"><i class="fas fa-external-link-alt"></i> Review</strong> Code ').concat(e.github_readme,'</a>\n\n                                    <h4 class="small text-left mt-3">Notes:</h4>\n                                    <ul class="text-wrap" id="dev-project-carousel-notes">\n                                        \n                                    </ul>  \n\n                                    <h3 class="small mt-3">- Built Using -</h3>\n\n                                    <div class="icon-row-sm mb-3" id="dev-project-carousel-icon-section">\n                                        \n                                    </div>\n                                </div>  \n\n                                <button class="btn btn-custom-2 my-5 d-block mx-auto w-auto btn-anim d-xl-none" data-id="dev-project-gallery">\n                                    <span class="circle" aria-hidden="true">\n                                        <i class="fas fa-arrow-alt-circle-up"></i>\n                                    </span>\n\n                                    <span class="btn-text">\n                                        Return to Gallery\n                                    </span>\n                                </button>\n                            </div>\n                        </div>\n                    ')}),o=function(){l.return_to_dev_gallery_btns=document.querySelectorAll("[data-id='dev-project-gallery']"),l.dev_project_carousel=document.getElementById("dev-project-carousel"),l.dev_project_carousel_indicator_section=document.getElementById("dev-project-carousel-indicators"),l.dev_project_carousel_inner_section=document.getElementById("dev-project-carousel-inner"),l.dev_project_carousel_note_section=document.getElementById("dev-project-carousel-notes"),l.dev_project_carousel_icon_section=document.getElementById("dev-project-carousel-icon-section"),e.carousel_img_list.srcs.forEach((function(t,n){var o=document.createElement("div");0===n?o.classList.add("carousel-item","active"):o.classList.add("carousel-item");var i=document.createElement("img");i.setAttribute("loading","lazy"),i.classList.add("d-block","w-100","p-3"),i.setAttribute("src",t),i.setAttribute("alt",e.carousel_img_list.alts[n]||"My project carousel image"),i.setAttribute("width","625"),i.setAttribute("height","500"),o.appendChild(i),"dev"==="dev".toLowerCase()?l.dev_project_carousel_inner_section.appendChild(o):"dev"==="client".toLowerCase()&&l.client_project_carousel_inner_section.appendChild(o)})),e.carousel_img_list.srcs.forEach((function(e,t){var n=document.createElement("button");n.setAttribute("type","button"),n.setAttribute("data-bs-target","#dev-project-carousel"),0===t?(n.classList.add("active","btn"),n.setAttribute("aria-current","true")):n.classList.add("btn"),n.setAttribute("aria-label","Slide ".concat(t+1)),("dev"==="dev".toLowerCase()||"dev"==="client".toLowerCase())&&l.dev_project_carousel_indicator_section.appendChild(n)})),e.notes.forEach((function(t,n){var o=document.createElement("li");o.innerHTML=t,n===e.notes.length-1&&o.classList.add("fw-bold"),"dev"==="dev".toLowerCase()?l.dev_project_carousel_note_section.appendChild(o):"dev"==="client".toLowerCase()&&l.client_project_carousel_note_section.appendChild(o)})),e.tool_icon_list.srcs.forEach((function(t,n){var o=document.createElement("img");o.setAttribute("loading","lazy"),o.classList.add("img-fluid","icon-disp-img-lg","m-3"),o.id=e.tool_icon_list.ids[n]||null,o.setAttribute("src",t),o.setAttribute("alt",e.tool_icon_list.alts[n]||"Tool and Technology Icon Badge"),o.setAttribute("width","85"),o.setAttribute("height","64"),"dev"==="dev".toLowerCase()?l.dev_project_carousel_icon_section.appendChild(o):"dev"==="client".toLowerCase()&&l.client_project_carousel_icon_section.appendChild(o)})),dispatchEvent(new Event("load"))},i=new v("Alien Mathvasion Game",2,"https://dnoelmathinvasiongame.netlify.app/html/gamescreen.html","Play","https://github.com/DNoel26/Alien_Mathvasion",!0);i.description="This project was designed for children ages 8+ with the goal of making math fun and engaging. It was built from scratch without any frameworks, libraries or dependencies using OOP and SOC principles, and with the \n                    intention of making code DRY and easier to maintain. Utilizes heavy JavaScript and DOM manipulation. Uses promises instead of while loops to track progress. Visual design is based on retro arcade Shoot-em Up games.\n                    Good luck surviving the hardest difficulty!\n                ",i.link_note="(expect audio - desktop version only!)",i.notes.push("Gameplay works completely but there are some minor bugs to fix, mainly in the areas of UI/UX. Very rarely, game does not load when difficulty is selected. Simply refresh the browser and try again."),i.notes.push("Some features are missing such as player entered details, data persistence, settings; to be implemented at a later date."),i.notes.push("Use Google Chrome for the best experience. Not yet fully responsive on smaller devices!"),i.add_imgs([],["./img/projects/webp/min/alien-mathvasion-1-min.webp","./img/projects/webp/min/alien-mathvasion-2-min.webp","./img/projects/webp/min/alien-mathvasion-3-min.webp"],[]),i.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp"],[]);var a=new v("Wix Site Clone",1,"https://dnoelmotorcyclewixclone.netlify.app/","View","https://github.com/DNoel26/Wix_Motorcycle_Trial",!0);a.description='This was my first official development project and was intended to be a pixel for pixel clone of\n                    <a target="_blank" class="text-reset text-decoration-none anim-link-3" rel="noopener" href="https://www.wix.com/website-template/view/html/773?siteId=32647d89-1460-4326-b084-a958bf90765d&metaSiteId=129904ad-3051-8c87-f69f-31ce75166f9c&originUrl=https%3A%2F%2Fwww.wix.com%2Fwebsite%2Ftemplates%3Fcriteria%3Dauto&tpClick=view_button">a selected, original Wix site</a>. \n                    It was built using HTML, CSS and without any JavaScript. \n                    Showcases the ability to take a design and convert it into a functional webpage or website.\n                ',a.link_note="(see link to cloned Wix site above)",a.notes.push("Only 3 pages were cloned for this project: Home, About and Contact."),a.notes.push("Website is fully responsive for all devices!"),a.add_imgs([],["./img/projects/webp/min/wix-clone-1-min.webp","./img/projects/webp/min/wix-clone-2-min.webp","./img/projects/webp/min/wix-clone-3-min.webp"],[]),a.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp"],[]);var r=new v("Cyberdise Online Store",2,"https://dnoelcyberdise.herokuapp.com/","Interact","https://github.com/DNoel26/Cyberdise-Dynamic-",!0);r.description="This project was my first official Full Stack development project and end-to-end C.R.U.D. application, and was designed to test everything I had learned (and more). This online store was built from scratch using MVC principles for the Back End code.\n                    The database was designed, normalized and created in MySQL. There are both customer and employee functionalities to experiment with. Features such as \n                    authorization, authentication, page protection, session storage, pagination, multiple queries per database call, database transactions, product tracking, product restocking, add to cart, payment processing using a modified PayPal SDK, to name a few, were all built from the ground up and implemented in this site.\n                    Check it out and let me know what you think! Please use only FAKE CREDENTIALS if creating a customer account to login. See my GitHub readme for instructions on how to log in as an employee to stock, re-stock and/or modify product data etc. \n                ",r.link_note="(fake credentials only - desktop version only!)",r.notes.push("Most other major features are working as expected. Search functionality not implemented just yet."),r.notes.push("Some UI elements are incomplete/missing."),r.notes.push("Not yet fully responsive on smaller devices!"),r.add_imgs([],["./img/projects/webp/min/cyberdise-online-store-1-min.webp","./img/projects/webp/min/cyberdise-online-store-2-min.webp","./img/projects/webp/min/cyberdise-online-store-3-min.webp","./img/projects/webp/min/cyberdise-online-store-4-min.webp","./img/projects/webp/min/cyberdise-online-store-5-min.webp"],[]),r.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp","./img/logos/handlebars-badge.webp","/img/logos/mysql-badge.webp","./img/logos/nodejs-badge.webp","./img/logos/express-logo.webp","./img/logos/postman-badge.webp"],[]);var s=new v("Movie Database",2,"https://dnoelmovieapidatabase.netlify.app/","View","https://github.com/DNoel26/Movie_Database",!0);s.description='\n                    This project was built from scratch to dynamically display "Now Showing" movie details and trailers via consuming multiple APIs; meaning all data shown on my website is requested\n                    and pulled from another server, and manipulated on my website using JavaScript. Design is based on retro theatres. Click the link and take a look at all the trending movies now!\n                ',s.link_note="(desktop version only!)",s.notes.push("All major features are working as expected. Pagination to be implemented."),s.notes.push("Not yet fully responsive on smaller devices!"),s.add_imgs([],["./img/projects/webp/min/movie-db-1-min.webp","./img/projects/webp/min/movie-db-2-min.webp","./img/projects/webp/min/movie-db-3-min.webp"],[]),s.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp"],[]);var c=new v("Amazon Clone",2,"https://clone-905a7.web.app/","Interact","https://github.com/DNoel26/Amazon_React_Clone",!0);c.description="\n                    This project was done as my hands on introduction to React.js and Firebase. In this particular case, I followed a tutorial and manipulated my code rather than building from scratch.\n                    The main purpose was to understand the concepts behind the very popular React.js framework, as well as to learn new methods for coding. Main project features are account creation, \n                    login, add to cart, and payment processing using Stripe API. Please use only FAKE CREDENTIALS if creating an account to login. See my GitHub readme for further instructions. \n                ",c.link_note="(fake credentials only - desktop version only!)",c.notes.push("All major features are working as expected."),c.notes.push("Not yet fully responsive on smaller devices!"),c.add_imgs([],["./img/projects/webp/min/amazon-clone-1-min.webp","./img/projects/webp/min/amazon-clone-2-min.webp","./img/projects/webp/min/amazon-clone-3-min.webp","./img/projects/webp/min/amazon-clone-4-min.webp"],[]),c.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp","./img/logos/react-badge.webp","./img/logos/firebase-badge.webp","./img/logos/nodejs-badge.webp","./img/logos/express-logo.webp"],[]);var d,u=new v("Real Estate Site",3,"https://presidentialrealtors-dev-static.netlify.app/","View","https://github.com/DNoel26/Presidential-Realtors-Static",!0);u.description="\n                    The focus of this project was for me to learn and implement modern design, user interface (UI) and user experience (UX) elements. It was built from scratch and will eventually be converted\n                    to a fully functional single page application (SPA) using React.js, MongoDB, Node.js and Express.js. Let me know what you think!\n                ",u.link_note="(desktop version only!)",u.notes.push("Most client side features work as expected. Focus of this project was on design elements rather than functionality."),u.notes.push("Project to be redone as an app (SPA) with the the functionalities expected of a real estate website."),u.notes.push("Not yet fully responsive on smaller devices!"),u.add_imgs([],["./img/projects/webp/min/real-estate-1-min.webp","./img/projects/webp/min/real-estate-2-min.webp","./img/projects/webp/min/real-estate-3-min.webp"],[]),u.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp"],[]),(e=JSON.parse(sessionStorage.getItem("current_project")))&&(n(),l.dev_project_overview.innerHTML=t,o()),l.dev_project_gallery_btns.forEach((function(d){d.addEventListener("click",(function(){if("Alien Mathvasion Game"===d.dataset.devProject)e=i;else if("Wix Site Clone"===d.dataset.devProject)e=a;else if("Cyberdise Online Store"===d.dataset.devProject)e=r;else if("Movie Database"===d.dataset.devProject)e=s;else if("Amazon Clone"===d.dataset.devProject)e=c;else{if("Real Estate Site"!==d.dataset.devProject)return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e,t){return console.trace("Logged Values[".concat(t,"]: "),e)}))}("PROJECT NOT LOADED CORRECTLY");e=u}n(),sessionStorage.setItem("current_project",JSON.stringify(e)),l.dev_project_overview.innerHTML=t,o(),l.dev_project_overview.scrollIntoView(),l.return_to_dev_gallery_btns.forEach((function(e){e.addEventListener("click",(function(){l.dev_project_gallery.scrollIntoView()}))}))}))})),d=l.dev_project_overview,new MutationObserver((function(e,t){var n,o=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,r=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return r=e.done,e},e:function(e){s=!0,a=e},f:function(){try{r||null==n.return||n.return()}finally{if(s)throw a}}}}(e);try{for(o.s();!(n=o.n()).done;){var i=n.value;"childList"===i.type||"attributes"===i.type||i.type}}catch(e){o.e(e)}finally{o.f()}})).observe(d,{attributes:!1,childList:!0,subtree:!0}),l.return_to_dev_gallery_btns.forEach((function(e){e.addEventListener("click",(function(){l.dev_project_gallery.scrollIntoView()}))}))}(),function(){var n;new IntersectionObserver((function(e,o){e.forEach((function(e){e.isIntersecting&&i.e(905).then(i.bind(i,905)).then((function(e){return e.default})).then((function(e){var o=new e("https://restcountries.eu/rest/v2/all"),i=!1;n=function(){document.querySelectorAll("option").forEach((function(e){if(e.value&&e.selected&&""!==e.value){var t=e.getAttribute("data-flag"),n=e.getAttribute("data-calling-codes"),o=document.createElement("img");o.setAttribute("src",t),o.setAttribute("alt","Country flag for ".concat(e.value)),o.setAttribute("width","40px"),o.setAttribute("height","auto"),i||(l.phone.value="+".concat(n,"-")),l.country_select.labels[0].children[1]&&"IMG"===l.country_select.labels[0].children[1].tagName&&l.country_select.labels[0].children[1].remove(),l.country_select.labels[0].appendChild(o)}else e.selected&&!e.value&&l.country_select.labels[0].children[1]&&"IMG"===l.country_select.labels[0].children[1].tagName&&l.country_select.labels[0].children[1].remove()}))},o.fetch_api().then((function(e){e.forEach((function(e){var t=document.createElement("option");t.setAttribute("value",e.name),t.setAttribute("data-flag",e.flag),t.setAttribute("data-calling-codes",e.callingCodes),t.innerHTML=t.value,l.country_select.appendChild(t)})),l.phone.addEventListener("keyup",t((function(){i=!0}),500)),l.country_select.addEventListener("change",t((function(){n()}),300))})).catch((function(e){return console.error("Error: ",e)})).then((function(){return r()}))}))}))}),{root:null,rootMargin:"200px",threshold:0}).observe(l.my_form);var r=function(){var r=[function(){return l.display_form_validation_msg()}];Array.prototype.slice.call(l.forms_need_validation).forEach((function(s,c){s.querySelectorAll(".form-data").forEach((function(e){"INPUT"===e.tagName&&(e.value=sessionStorage.getItem(e.name)),"TEXTAREA"===e.tagName&&(e.value=sessionStorage.getItem(e.name)),"SELECT"===e.tagName&&(e.value=sessionStorage.getItem(e.name)||""),n(),e.addEventListener("input",t((function(){sessionStorage.setItem(e.name,e.value)}),500))})),s.addEventListener("submit",(function(t){t.preventDefault(),t.stopImmediatePropagation(),i.e(417).then(i.bind(i,417)).then((function(e){return e.default})).then((function(t){if(!s.checkValidity())return new Promise((function(e,t){s.classList.add("was-validated"),e()})).then((function(){r[c]()})).catch((function(e){console.error('Failed to add "was-validated" class to Bootstrap form: '.concat(e))}));var n=new t(l.my_form);n.method=l.my_form.method,n.url=l.my_form.action,n.data=new FormData(n.form),n.success_msg="Hi ".concat(n.get_form_data("first_name").trim(),"! ")+n.success_msg,n.error_msg="Sorry ".concat(n.get_form_data("first_name").trim(),"! ")+n.error_msg;var i=e(o,n.form,l.my_form_button,l.my_form_status,n.success_msg),d=e(a,l.my_form_status,n.error_msg);!function(e,t,n,o,i,a){var r=new XMLHttpRequest;r.open(e,t),r.setRequestHeader("Accept","application/json"),r.onreadystatechange=function(){r.readyState===XMLHttpRequest.DONE&&(200===r.status?(o(),a(r.status)):(i(),a(r.status)))},r.send(n)}(n.method,n.url,n.data,i,d,(function(e){200===e&&y((function(){s.classList.remove("was-validated"),sessionStorage.clear(),l.country_select.labels[0].children[1]&&"IMG"===l.country_select.labels[0].children[1].tagName&&l.country_select.labels[0].children[1].remove()}))}))})).catch((function(e){return console.error("Failed to import module: ",e)}))}),!1)}))}}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,