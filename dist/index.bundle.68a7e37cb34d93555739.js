(()=>{var e,t,n,o={610:(e,t,n)=>{"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>o})},991:(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}n.d(t,{Z:()=>i})},156:(e,t,n)=>{"use strict";function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>o})},570:(e,t,n)=>{"use strict";function o(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return function(){return e.apply(void 0,n)}}function i(e,t){var n;return function(){var o=this,i=arguments;clearTimeout(n),n=setTimeout((function(){return e.apply(o,i)}),t)}}function a(e,t){var n,o=0;return function(){var i=this,a=arguments;return void 0!==n?void 0:new Promise((function(r,s){var c;n=setTimeout((function(){return n=void 0,r(o),e(i,a)}),null!==(c=o)&&void 0!==c?c:t)})).then((function(){0===o&&(o=void 0),setTimeout((function(){return o=0}),t)})).catch((function(e){return console.error(e)}))}}function r(e,t,n,o){e.reset(),t.setAttribute("disabled","disabled"),n.innerHTML=null!=o?o:"Submission Successful!"}function s(e,t){e.innerHTML=null!=t?t:"Submission Failed!"}function c(e,t,n){return e.matches?t():n?n():null}function l(){for(var e="#",t=0;t<3;t++)e+=("0"+Math.floor(Math.random()*Math.pow(16,2)/2).toString(16)).slice(-2);return e}var d={body:document.body,google_preview_modal_btn:document.querySelector("[data-bs-toggle='modal']"),google_preview_modal:document.querySelector(".resume"),lazy_imgs:document.querySelectorAll("img.lazy"),lazy_sources:document.querySelectorAll("source"),lazy_bgs:document.querySelectorAll(".lazy-bg"),header:document.querySelector("header"),header_vid:document.querySelector("header video"),header_vid_multi:document.querySelectorAll("video [data-src]"),header_btns:document.querySelectorAll("button"),header_links:document.querySelectorAll("a"),nav_container:document.querySelector(".nav-container"),top_nav:document.querySelector(".top-header-nav"),bot_nav:document.querySelector(".bot-header-nav"),body_placeholder:document.querySelector("body .placeholder-div"),header_empty_div:document.querySelector("header .empty-div"),scroll_indicator:document.querySelector("#my-bar"),active_lists:document.querySelectorAll(".bot-header-nav .nav-item"),active_link:document.querySelector("a.active"),anchor_links:document.querySelectorAll("a.anchor-link"),toggler_btn:document.querySelector(".navbar-toggler"),toggler_btn_icon:document.querySelector(".navbar-toggler-icon"),toggler_btn_word:document.querySelector(".navbar-toggler-word"),navbar_scroll:document.querySelector(".navbar-nav-scroll"),bot_nav_collapse:document.querySelector("#bot-header-nav"),intro_msg:document.querySelector(".intro"),welcome:document.querySelector(".welcome"),text_wrapper_ml13:document.querySelector(".ml13"),header_divider:document.querySelector(".custom-shape-divider-bottom-1612032701"),about_summary_wrapper:document.querySelector(".about-section .summary-wrapper"),my_age:document.querySelector("[data-age='my-age']"),summary_containers:document.querySelectorAll(".summary-container"),summary_btn:document.querySelector("[data-id='summary-btn']"),my_carousel_prev_btn:document.querySelector(".services-section .my-carousel-btn-prev"),my_carousel_next_btn:document.querySelector(".services-section .my-carousel-btn-next"),my_carousel_wrapper:document.querySelector(".my-carousel-wrapper"),my_carousel_content:document.querySelector(".my-carousel-content"),my_carousel_items:document.querySelectorAll(".my-carousel-item"),skill_ratings:document.querySelectorAll(".skill-rating"),skill_ratings_beginner:document.querySelectorAll(".skill-rating-beginner"),skill_ratings_novice:document.querySelectorAll(".skill-rating-novice"),skill_ratings_intermediate:document.querySelectorAll(".skill-rating-intermediate"),skill_ratings_advanced:document.querySelectorAll(".skill-rating-advanced"),skill_ratings_expert:document.querySelectorAll(".skill-rating-expert"),return_to_dev_gallery_btns:document.querySelectorAll("[data-id='dev-project-gallery']"),dev_project_gallery:document.getElementById("dev-project-gallery"),dev_project_overview:document.getElementById("dev-project-overview"),dev_project_gallery_btns:document.querySelectorAll("button[data-dev-project]"),dev_project_carousel:document.getElementById("dev-project-carousel"),dev_project_carousel_indicator_section:document.getElementById("dev-project-carousel-indicators"),dev_project_carousel_inner_section:document.getElementById("dev-project-carousel-inner"),dev_project_carousel_note_section:document.getElementById("dev-project-carousel-notes"),dev_project_carousel_icon_section:document.getElementById("dev-project-carousel-icon-section"),dev_project_carousel_next:document.querySelectorAll("#dev-project-overview .carousel-control-next"),dev_project_carousel_prev:document.querySelectorAll("#dev-project-overview .carousel-control-prev"),client_project_gallery:document.getElementById("client-project-gallery"),client_project_overview:document.getElementById("client-project-overview"),client_project_gallery_btns:document.querySelectorAll("button[data-client-project]"),client_project_carousel:document.getElementById("client-project-carousel"),client_project_carousel_indicator_section:document.getElementById("client-project-carousel-indicators"),client_project_carousel_inner_section:document.getElementById("client-project-carousel-inner"),client_project_carousel_note_section:document.getElementById("client-project-carousel-notes"),client_project_carousel_icon_section:document.getElementById("client-project-carousel-icon-section"),client_project_carousel_next:document.querySelectorAll("#client-project-overview .carousel-control-next"),client_project_carousel_prev:document.querySelectorAll("#client-project-overview .carousel-control-prev"),form_data:document.querySelectorAll(".form-data"),country_select:document.getElementById("country"),phone:document.getElementById("phone"),valid_feedback_fname:document.querySelector(".valid-feedback.valid-feedback-fname"),valid_feedback_lname:document.querySelector(".valid-feedback.valid-feedback-lname"),valid_feedback_email:document.querySelector(".valid-feedback.valid-feedback-email"),valid_feedback_country:document.querySelector(".valid-feedback.valid-feedback-country"),valid_feedback_message:document.querySelector(".valid-feedback.valid-feedback-message"),invalid_feedback_fname:document.querySelector(".invalid-feedback.invalid-feedback-fname"),invalid_feedback_lname:document.querySelector(".invalid-feedback.invalid-feedback-lname"),invalid_feedback_email:document.querySelector(".invalid-feedback.invalid-feedback-email"),invalid_feedback_country:document.querySelector(".invalid-feedback.invalid-feedback-country"),invalid_feedback_message:document.querySelector(".invalid-feedback.invalid-feedback-message"),forms_need_validation:document.querySelectorAll(".needs-validation"),my_form:document.getElementById("my-form"),my_form_button:document.getElementById("my-form-button"),my_form_status:document.getElementById("my-form-status"),grecaptchas:document.getElementsByClassName("g-recaptcha"),create_scripts:function(){for(var e=this,t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];n.forEach((function(t){var n=document.createElement("script");n.src=t,n.setAttribute("async","async"),e.body.appendChild(n)}))},load_bg_vid:function(){this.header_vid_multi.forEach((function(e){var t=e.getAttribute("data-src"),n=e.getAttribute("data-media");c(window.matchMedia(n),(function(){e.setAttribute("src",t),e.setAttribute("media",n),e.parentElement.load()}),(function(){return e.removeAttribute("src")}))}))},add_poster_img_sm:function(){var e=this;c(window.matchMedia("(max-width: 767.98px)"),(function(){e.header_vid.setAttribute("poster","./img/base/webp/think-different-700.webp")}),null)},toggler_menu_icon_switch:function(){var e=this;setInterval((function(){e.toggler_btn_word.classList.contains("d-none")&&e.toggler_btn_word?(e.toggler_btn_icon.classList.add("d-none"),e.toggler_btn_word.classList.remove("d-none")):e.toggler_btn_icon.classList.contains("d-none")&&e.toggler_btn_word&&(e.toggler_btn_icon.classList.remove("d-none"),e.toggler_btn_word.classList.add("d-none"))}),5e3)},side_menu_reveal:function(){d.bot_nav_collapse.classList.add("side-menu-reveal"),d.bot_nav_collapse.classList.remove("side-menu-hide")},side_menu_hide:function(){d.bot_nav_collapse.classList.remove("side-menu-reveal"),d.bot_nav_collapse.classList.add("side-menu-hide")},mobile_menu_reveal:function(){d.header.classList.add("mobile-menu-reveal"),d.header.classList.remove("mobile-menu-hide")},mobile_menu_hide:function(){d.header.classList.remove("mobile-menu-reveal"),d.header.classList.add("mobile-menu-hide")},no_menu:function(){d.bot_nav_collapse.classList.remove("side-menu-hide"),d.bot_nav_collapse.classList.remove("side-menu-reveal"),d.header.classList.remove("mobile-menu-hide"),d.header.classList.remove("mobile-menu-reveal"),d.bot_nav_collapse.classList.remove("show")},shrink_header:function(){this.body.classList.remove("will-change-height"),this.nav_container.classList.add("nav-container-sticky"),this.header.style.height="100px",this.header.style.boxShadow="0 0.1rem 5rem rgba(0,0,0,0.5)",this.header_vid.classList.add("d-none"),this.header_vid.pause(),this.header.style.background="linear-gradient(rgba(31,111,139,1), rgba(31,111,139,1)), url('./img/transparent-png-w10.png') no-repeat fixed 100% 100%",this.intro_msg.classList.add("h-0")},expand_placeholder_div:function(){this.body_placeholder.style.height="100vh",this.body_placeholder.classList.replace("invisible","visible"),this.body_placeholder.classList.replace("placeholder-div-reveal-start","placeholder-div-reveal-end")},expand_header:function(){var e=this;this.body.classList.add("will-change-height"),this.nav_container.classList.remove("nav-container-sticky");var t=[window.matchMedia("(min-width: 992px)"),window.matchMedia("(max-width: 991.98px)")];c(t[0],(function(){e.header.style.height="70vh"}),null),c(t[1],(function(){e.header.style.height="70vh"}),null),this.header.style.boxShadow="unset",this.header_vid.classList.remove("d-none"),this.header_vid.play(),this.intro_msg.classList.remove("h-0")},shrink_placeholder_div:function(){this.body_placeholder.style.height="0",this.body_placeholder.classList.replace("visible","invisible"),this.body_placeholder.classList.replace("placeholder-div-reveal-end","placeholder-div-reveal-start")},replace_vid_bg:function(){this.header.style.background="linear-gradient(rgba(31,111,139,0.8), rgba(0,0,0,0.6)), url('./img/base/webp/laptop-keyboard.webp') no-repeat fixed 20% 20%",this.header.style.backgroundSize="cover"},fixed_bottom_header:function(){var e=this;c(window.matchMedia("(max-width: 767.98px)"),(function(){e.header.classList.replace("sticky-top","fixed-bottom")}),(function(){e.header.classList.replace("fixed-bottom","sticky-top")}))},no_fixed_bottom_header:function(){this.header.classList.contains("fixed-bottom")&&this.header.classList.replace("fixed-bottom","sticky-top")},animate_letters:function(){this.text_wrapper_ml13.innerHTML=this.text_wrapper_ml13.textContent.replace(/\S/g,"<span class='letter'>$&</span>"),anime.timeline({loop:!0}).add({targets:".ml13 .letter",translateY:[100,0],translateZ:0,opacity:[0,1],easing:"easeOutExpo",duration:600,delay:function(e,t){return 300+30*t}}).add({targets:".ml13 .letter",translateY:[0,-100],opacity:[1,0],easing:"easeInExpo",duration:600,delay:function(e,t){return 6e3+30*t}})},change_about_info:function(){var e=this;this.summary_containers[1].classList.contains("d-none")?(this.about_summary_wrapper.classList.add("opacity-0"),setTimeout((function(){e.summary_containers[0].classList.add("d-none","opacity-0"),e.summary_containers[1].classList.remove("d-none","opacity-0"),e.summary_btn.innerHTML='\n                    <span class="circle" aria-hidden="true">\n                        <i class="fas fa-info-circle"></i>\n                    </span>\n\n                    <span class="btn-text">\n                        Learn More\n                    </span>\n                '}),205),setTimeout((function(){e.about_summary_wrapper.classList.remove("opacity-0")}),350)):this.summary_containers[0].classList.contains("d-none")&&(this.about_summary_wrapper.classList.add("opacity-0"),setTimeout((function(){e.summary_containers[1].classList.add("d-none","opacity-0"),e.summary_containers[0].classList.remove("d-none","opacity-0"),e.summary_btn.innerHTML='\n                    <span class="circle" aria-hidden="true">\n                        <i class="fas fa-info-circle"></i>\n                    </span>\n\n                    <span class="btn-text">\n                        Learn More\n                    </span>\n                '}),205),setTimeout((function(){e.about_summary_wrapper.classList.remove("opacity-0")}),350))},grow_btn_onclick:function(e,t,n){e.style.transform="scale(".concat(t,")"),setTimeout((function(){e.style.transform="initial"}),n)},scroll_horizontally:function(e,t){e.scrollLeft+=t},scroll_start:function(e,t){e.scrollLeft>=e.scrollWidth-e.clientWidth-t&&(e.scrollLeft=0)},scroll_end:function(e,t){e.scrollLeft<=t&&(e.scrollLeft=e.scrollWidth-e.clientWidth)},populate_skill_rating:function(e){this.skill_ratings_beginner.forEach((function(t){t.innerHTML=e.getRating("beginner")})),this.skill_ratings_novice.forEach((function(t){t.innerHTML=e.getRating("novice")})),this.skill_ratings_intermediate.forEach((function(t){t.innerHTML=e.getRating("intermediate")})),this.skill_ratings_advanced.forEach((function(t){t.innerHTML=e.getRating("advanced")})),this.skill_ratings_expert.forEach((function(t){t.innerHTML=e.getRating("expert")}))},display_form_validation_msg:function(){this.invalid_feedback_fname&&"none"!=window.getComputedStyle(this.invalid_feedback_fname).display&&(this.valid_feedback_fname.innerHTML="Nice! You remembered your first name!"),this.invalid_feedback_lname&&"none"!=window.getComputedStyle(this.invalid_feedback_lname).display&&(this.valid_feedback_lname.innerHTML="So you do have a last name..."),this.invalid_feedback_email&&"none"!=window.getComputedStyle(this.invalid_feedback_email).display&&(this.valid_feedback_email.innerHTML="Much better...please ensure that the spelling of your email is correct"),this.invalid_feedback_country&&"none"!=window.getComputedStyle(this.invalid_feedback_country).display&&(this.valid_feedback_country.innerHTML="Welcome to Earth 👽"),this.invalid_feedback_message&&"none"!=window.getComputedStyle(this.invalid_feedback_message).display&&(this.valid_feedback_message.innerHTML="How did you forget the most important part? Oh well, at least it's fine now...")}};const u=d;var m=n(610),p=n(991),h=n(156);const _=function(){function e(){(0,m.Z)(this,e),(0,h.Z)(this,"classification",""),(0,h.Z)(this,"filled_icon",'   \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">\n                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>\n                    </svg>\n                  '),(0,h.Z)(this,"half_icon",'                                       \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star-half" viewBox="0 0 16 16">\n                        <path d="M5.354 5.119L7.538.792A.516.516 0 0 1 8 .5c.183 0 .366.097.465.292l2.184 4.327 4.898.696A.537.537 0 0 1 16 6.32a.55.55 0 0 1-.17.445l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256a.519.519 0 0 1-.146.05c-.341.06-.668-.254-.6-.642l.83-4.73L.173 6.765a.55.55 0 0 1-.171-.403.59.59 0 0 1 .084-.302.513.513 0 0 1 .37-.245l4.898-.696zM8 12.027c.08 0 .16.018.232.056l3.686 1.894-.694-3.957a.564.564 0 0 1 .163-.505l2.906-2.77-4.052-.576a.525.525 0 0 1-.393-.288L8.002 2.223 8 2.226v9.8z"/>\n                    </svg>\n                '),(0,h.Z)(this,"empty_icon",' \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star" viewBox="0 0 16 16">\n                        <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"/>\n                    </svg>\n                ')}return(0,p.Z)(e,[{key:"getRating",value:function(e){return"beginner"===e?e=1:"novice"===e?e=2:"intermediate"===e?e=3:"advanced"===e?e=4:"expert"===e&&(e=5),this.classification=this.filled_icon.repeat(e)+this.empty_icon.repeat(5-e),this.classification}}]),e}();function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function f(e){return function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const g=function(){function e(t,n,o,i,a,r){(0,m.Z)(this,e),(0,h.Z)(this,"name",void 0),(0,h.Z)(this,"description",void 0),(0,h.Z)(this,"status",{msg:null,class_code:null}),(0,h.Z)(this,"link",void 0),(0,h.Z)(this,"link_header",void 0),(0,h.Z)(this,"link_note",void 0),(0,h.Z)(this,"github_link",void 0),(0,h.Z)(this,"github_readme",void 0),(0,h.Z)(this,"notes",[]),(0,h.Z)(this,"thumbnail",{btn_id:null,src:null,alt:null}),(0,h.Z)(this,"carousel_img_list",{ids:[],srcs:[],alts:[]}),(0,h.Z)(this,"tool_icon_list",{ids:[],srcs:[],alts:[]}),1===n?(n="Completed",this.status.class_code="status-complete"):2===n?(n="Work in Progress",this.status.class_code="status-in-progress"):3===n&&(n="On Hold",this.status.class_code="status-hold"),r=!0===r?"(GitHub - readme available)":"(GitHub)",this.name=t,this.status.msg=n,this.link=o,this.link_header=i,this.github_link=a,this.github_readme=r}return(0,p.Z)(e,[{key:"add_imgs",value:function(e,t,n){var o,i,a;(o=this.carousel_img_list.ids).push.apply(o,f(e)),(i=this.carousel_img_list.srcs).push.apply(i,f(t)),(a=this.carousel_img_list.alts).push.apply(a,f(n))}},{key:"add_tool_icons",value:function(e,t,n){var o,i,a;(o=this.tool_icon_list.ids).push.apply(o,f(e)),(i=this.tool_icon_list.srcs).push.apply(i,f(t)),(a=this.tool_icon_list.alts).push.apply(a,f(n))}}]),e}();function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}console.log("App.js Loaded Successfully");var y={};function w(e){e.keys().forEach((function(t){return y[t]=e(t)}))}function k(e){return e()}n(177),n(398),w(n(476)),w(n(225)),document.addEventListener("DOMContentLoaded",(function(){console.log("DOMContentLoaded Successfully"),function(){var e=[].slice.call(u.lazy_imgs),t=[].slice.call(u.lazy_sources),n=[].slice.call(u.lazy_bgs),o=[].slice.call(u.grecaptchas),i={root:null,rootMargin:"250px",threshold:0};if("IntersectionObserver"in window){var a=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){var t=e.target,n=t.getAttribute("data-src"),o=t.getAttribute("data-srcset");t.hasAttribute("data-src")&&(t.setAttribute("src",n),t.removeAttribute("data-src")),t.hasAttribute("data-srcset")&&(t.setAttribute("srcset",o),t.removeAttribute("data-srcset")),t.classList.remove("lazy"),a.unobserve(e.target)}}))}),i);e.forEach((function(e){a.observe(e)}));var r=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){var t=e.target,n=t.getAttribute("data-srcset");t.hasAttribute("data-srcset")&&(t.setAttribute("srcset",n),t.removeAttribute("data-srcset")),r.unobserve(e.target)}}))}),i);t.forEach((function(e){r.observe(e)}));var s=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&(e.target.classList.add("load-now"),s.unobserve(e.target))}))}),i);n.forEach((function(e){s.observe(e)}));var c=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&new Promise((function(e,t){u.create_scripts("https://www.google.com/recaptcha/api.js?render=explicit"),setTimeout(e,2e3)})).then((function(){k((function(){!function t(){u.grecaptchas.length>0?(u.my_form_button.removeAttribute("disabled"),c.unobserve(e.target),grecaptcha.render("recaptcha",{sitekey:"6LfWHkgaAAAAAIKEcuqTQiy82YSpeWTdjebsfWZ3",callback:function(){}})):setTimeout((function(){t()}),15e3)}()}))})).catch((function(e){return console.log("Error in script delay promise: ",e)}))}))}),i);o.forEach((function(e){c.observe(e)}))}}(),u.body.classList.add("will-change-height"),u.header.classList.add("will-change-height"),u.my_form_button.setAttribute("disabled","disabled"),u.add_poster_img_sm(),u.load_bg_vid(),window.addEventListener("resize",i((function(){u.add_poster_img_sm(),u.load_bg_vid()}),500)),setTimeout((function(){c(window.matchMedia("(min-width: 768px)"),(function(){return u.create_scripts("https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js")}),(function(){}))}),2e3),setTimeout((function(){return u.create_scripts("https://code.tidio.co/edv8badlavwvekyo42tfkxyp6frut7yq.js","https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")}),1e4);var e=!1;u.google_preview_modal_btn.addEventListener("click",(function(){e||(u.google_preview_modal.setAttribute("src","https://drive.google.com/file/d/1dJLAdbOlVNz-btYv6Zl1IhrlHQKYNQlT/preview"),e=!0)})),new IntersectionObserver((function(e){e.forEach((function(e){e.intersectionRect.height>0?console.log(e):console.log("else entry",e)}))}),{rootMargin:"10px",threshold:0});var t,d=!0,m=!1,p=!1;u.anchor_links.forEach((function(e){e.addEventListener("click",(function(){(document.documentElement.scrollTop<=0||window.pageYOffset<=0)&&setTimeout((function(){e.click()}),750)}))}));var h,v,f,y,w,L,j,S=function(){return t=window.setTimeout((function(){d||(u.header.classList.add("hide-header"),u.header.classList.remove("show-header"))}),800)};h=function(){u.toggler_btn.classList.contains("collapsed")?u.side_menu_hide():u.side_menu_reveal()},v=function(){u.toggler_btn.classList.contains("collapsed")?u.mobile_menu_hide():u.mobile_menu_reveal()},u.toggler_btn.addEventListener("click",(function(){var e=[window.matchMedia("(max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)")];c(e[0],v,null),c(e[1],h,null)})),window.addEventListener("resize",i((function(){u.no_menu()}),500)),u.header_vid.addEventListener("ended",(function(){u.replace_vid_bg(),u.header_vid.remove(),p=!0})),u.header_vid.addEventListener("animationend",(function(){setTimeout((function(){u.replace_vid_bg(),u.header_vid.remove(),p=!0}),3e3)})),function(){var e=function(){if((document.documentElement.scrollTop>0||window.pageYOffset>0)&&!1===m)u.shrink_header(),u.expand_placeholder_div(),m=!0;else if((document.documentElement.scrollTop<=0||window.pageYOffset<=0)&&!0===m)u.expand_header(),u.shrink_placeholder_div(),m&&p&&u.replace_vid_bg(),m=!1;else if((document.documentElement.scrollTop>0||window.pageYOffset>0)&&!0===m)return};document.documentElement.scrollTop>0||window.pageYOffset,e();var n=i((function(){m=!1}),800),o=a((function(){e()}),100);window.addEventListener("resize",i((function(){e(),d=!0,clearTimeout(t)}),200)),u.header.addEventListener("mouseover",(function(){d=!0,clearTimeout(t)})),u.header.addEventListener("mousemove",(function(){d=!0,clearTimeout(t)})),u.header.addEventListener("touchstart",(function(){d=!0,clearTimeout(t)}),{passive:!0}),u.header.addEventListener("touchmove",(function(){d=!0,clearTimeout(t)}),{passive:!0}),u.header.addEventListener("mouseout",(function(){(document.documentElement.scrollTop>0||window.pageYOffset>0)&&!u.bot_nav_collapse.classList.contains("show")&&S()})),u.header_btns.forEach((function(e){e.addEventListener("focus",(function(){d=!0,clearTimeout(t)}))})),u.header_links.forEach((function(e){e.addEventListener("focus",(function(){d=!0,clearTimeout(t)}))})),document.addEventListener("scroll",a((function(){if(d=!(document.documentElement.scrollTop>0||window.pageYOffset>0),clearTimeout(t),d)u.header.classList.remove("hide-header"),u.header.classList.add("show-header");else{if(u.bot_nav_collapse.classList.contains("show"))return void(d=!0);u.header.classList.remove("hide-header"),u.header.classList.add("show-header"),S()}}),100),{passive:!0}),document.addEventListener("scroll",i((function(){var e,t;e=u.scroll_indicator,t=document.documentElement.scrollTop/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100,e.style.width=t+"%"}),200),{passive:!0}),document.addEventListener("scroll",n,{passive:!0}),document.addEventListener("touchmove",n,{passive:!0}),document.addEventListener("touchstart",n,{passive:!0}),document.addEventListener("scroll",o,{passive:!0}),document.addEventListener("touchmove",o,{passive:!0}),document.addEventListener("touchstart",o,{passive:!0})}(),u.animate_letters(),u.my_age.innerHTML=(f=Date.now()-new Date("26 March 1990"),y=new Date(f),Math.abs(y.getUTCFullYear()-1970)),u.summary_btn.addEventListener("click",(function(){u.change_about_info()})),w=360,L=[window.matchMedia("(max-width: 320.98px)"),window.matchMedia("(min-width: 321px) and (max-width: 575.98px)"),window.matchMedia("(min-width: 576px) and (max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)"),window.matchMedia("(min-width: 992px) and (max-width: 1199.98px)"),window.matchMedia("(min-width: 1200px) and (max-width: 1399.98px)"),window.matchMedia("(min-width: 1400px)")],(j=function(){c(L[0],(function(){return w=274}),null),c(L[1],(function(){return w=296}),null),c(L[2],(function(){return w=360}),null),c(L[3],(function(){return w=328}),null),c(L[4],(function(){return w=360}),null),c(L[5],(function(){return w=980/3}),null),c(L[6],(function(){return w=360}),null)})(),window.addEventListener("resize",i((function(){j(),u.my_carousel_content.scrollLeft=0}),500)),u.my_carousel_prev_btn.addEventListener("click",a((function(){u.grow_btn_onclick(u.my_carousel_prev_btn,1.25,250),u.scroll_horizontally(u.my_carousel_content,-w),u.scroll_end(u.my_carousel_content,20)}),700)),u.my_carousel_next_btn.addEventListener("click",a((function(){u.grow_btn_onclick(u.my_carousel_next_btn,1.25,250),u.scroll_horizontally(u.my_carousel_content,w),u.scroll_start(u.my_carousel_content,20)}),700)),function(){var e,t=[window.matchMedia("(max-width: 320.98px)"),window.matchMedia("(min-width: 321px) and (max-width: 575.98px)"),window.matchMedia("(min-width: 576px) and (max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)"),window.matchMedia("(min-width: 992px)")],o=function(){c(t[0],(function(){return e=140}),null),c(t[1],(function(){return e=150}),null),c(t[2],(function(){return e=250}),null),c(t[3],(function(){return e=300}),null),c(t[4],(function(){return e=void 0}),null)};o();var a=function(){var t;TagCloud(".tag-cloud-content",["OOP","SOC / MVC","REST-APIs","Data-Structures","Continuous-Integration","UI / UX","Testing","Version-Control","Debugging","Algorithms","App-Development","Responsive-Design","Security","Optimization","Customer-Service"],{radius:null!==(t=e)&&void 0!==t?t:340,maxSpeed:"fast",initSpeed:"slow",direction:135,keep:!1}),document.querySelector(".tagcloud"),document.querySelectorAll(".tagcloud--item").forEach((function(e){e.style.color=l();var t=!1,n=!1;e.addEventListener("click",(function(){t&&n?(e.style.fontSize="0",setTimeout((function(){e.style.color=l(),e.style.fontSize="initial",e.style.fontWeight="400",t=!1,n=!1}),5e3)):t&&!n?(e.style.color="var(--theme-colour-4)",e.style.fontSize="140%",n=!0):(e.style.color="var(--theme-colour-1)",e.style.fontSize="120%",t=!0)}))}))};new Promise((function(e,t){return setTimeout(e,3100)})).then((function(){return n.e(351).then(n.bind(n,351))})).then((function(e){return e.default})).then((function(){a(),window.addEventListener("resize",i((function(){o(),document.querySelector(".tagcloud")&&document.querySelector(".tagcloud").remove(),a()}),500))})).catch((function(e){return console.error("Failed to import TagCloud module: ",e)}))}(),u.populate_skill_rating(new _),function(){var e={},t="",n=(new bootstrap.Carousel(u.dev_project_carousel,{interval:5e3}),function(){t='\n                        <div class="flex-row row justify-content-between align-items-center">\n                            <div class="col-12 col-xl-6">\n                                <div id="dev-project-carousel" class="carousel slide" data-bs-ride="carousel">\n                                    <div class="carousel-indicators" id="dev-project-carousel-indicators">\n                                        \n                                    </div>\n\n                                    <div class="carousel-inner" id="dev-project-carousel-inner">\n\n                                    </div>\n\n                                    <button class="carousel-control-prev btn h-50 m-auto" type="button" data-bs-target="#dev-project-carousel" data-bs-slide="prev">\n                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>\n        \n                                        <span class="visually-hidden">Previous</span>\n                                    </button>\n    \n                                    <button class="carousel-control-next btn h-50 m-auto" type="button" data-bs-target="#dev-project-carousel" data-bs-slide="next">\n                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>\n        \n                                        <span class="visually-hidden">Next</span>\n                                    </button>\n                                </div>\n\n                                <button class="btn btn-custom-2 my-5 d-block mx-auto w-auto btn-anim" data-id="dev-project-gallery">\n                                    <span class="circle" aria-hidden="true">\n                                        <i class="fas fa-arrow-alt-circle-up"></i>\n                                    </span>\n\n                                    <span class="btn-text">\n                                        Return to Gallery\n                                    </span>\n                                </button>\n                            </div>\n\n                            <div class="col-12 col-xl-6">\n                                <div class="card-body py-5">\n                                    <h3 class="text-center">'.concat(e.name,"</h3>\n                                    \n                                    <p>\n                                        ").concat(e.description,"\n                                        <br><strong>Status: ").concat(e.status.msg,' <span class="').concat(e.status.class_code,' status-circle"></span></strong>\n                                    </p>\n                                    \n                                    <a href=').concat(e.link,' class="fs-5 text-reset text-decoration-none anim-link-2 w-auto" target="_blank" rel="noopener"><strong class="text-custom-2"><i class="fas fa-external-link-alt"></i> ').concat(e.link_header,"</strong> Now ").concat(e.link_note,"</a>\n                                    <br><a href=").concat(e.github_link,' class="fs-5 text-reset text-decoration-none anim-link-2 w-auto" target="_blank" rel="noopener"><strong class="text-custom-1"><i class="fas fa-external-link-alt"></i> Review</strong> Code ').concat(e.github_readme,'</a>\n\n                                    <h4 class="small text-left mt-3">Notes:</h4>\n                                    <ul class="text-wrap" id="dev-project-carousel-notes">\n                                        \n                                    </ul>  \n\n                                    <h3 class="small mt-3">- Built Using -</h3>\n\n                                    <div class="icon-row-sm mb-3" id="dev-project-carousel-icon-section">\n                                        \n                                    </div>\n                                </div>  \n\n                                <button class="btn btn-custom-2 my-5 d-block mx-auto w-auto btn-anim d-xl-none" data-id="dev-project-gallery">\n                                    <span class="circle" aria-hidden="true">\n                                        <i class="fas fa-arrow-alt-circle-up"></i>\n                                    </span>\n\n                                    <span class="btn-text">\n                                        Return to Gallery\n                                    </span>\n                                </button>\n                            </div>\n                        </div>\n                    ')}),o=function(){u.return_to_dev_gallery_btns=document.querySelectorAll("[data-id='dev-project-gallery']"),u.dev_project_carousel=document.getElementById("dev-project-carousel"),u.dev_project_carousel_indicator_section=document.getElementById("dev-project-carousel-indicators"),u.dev_project_carousel_inner_section=document.getElementById("dev-project-carousel-inner"),u.dev_project_carousel_note_section=document.getElementById("dev-project-carousel-notes"),u.dev_project_carousel_icon_section=document.getElementById("dev-project-carousel-icon-section"),e.carousel_img_list.srcs.forEach((function(t,n){var o=document.createElement("div");0===n?o.classList.add("carousel-item","active"):o.classList.add("carousel-item");var i=document.createElement("img");i.setAttribute("loading","lazy"),i.classList.add("d-block","w-100","p-3"),i.setAttribute("src",t),i.setAttribute("alt",e.carousel_img_list.alts[n]||"My project carousel image"),i.setAttribute("width","625"),i.setAttribute("height","500"),o.appendChild(i),"dev"==="dev".toLowerCase()?u.dev_project_carousel_inner_section.appendChild(o):"dev"==="client".toLowerCase()&&u.client_project_carousel_inner_section.appendChild(o)})),e.carousel_img_list.srcs.forEach((function(e,t){var n=document.createElement("button");n.setAttribute("type","button"),n.setAttribute("data-bs-target","#dev-project-carousel"),0===t?(n.classList.add("active","btn"),n.setAttribute("aria-current","true")):n.classList.add("btn"),n.setAttribute("aria-label","Slide ".concat(t+1)),("dev"==="dev".toLowerCase()||"dev"==="client".toLowerCase())&&u.dev_project_carousel_indicator_section.appendChild(n)})),e.notes.forEach((function(t,n){var o=document.createElement("li");o.innerHTML=t,n===e.notes.length-1&&o.classList.add("fw-bold"),"dev"==="dev".toLowerCase()?u.dev_project_carousel_note_section.appendChild(o):"dev"==="client".toLowerCase()&&u.client_project_carousel_note_section.appendChild(o)})),e.tool_icon_list.srcs.forEach((function(t,n){var o=document.createElement("img");o.setAttribute("loading","lazy"),o.classList.add("img-fluid","icon-disp-img-lg","m-3"),o.id=e.tool_icon_list.ids[n]||null,o.setAttribute("src",t),o.setAttribute("alt",e.tool_icon_list.alts[n]||"Tool and Technology Icon Badge"),o.setAttribute("width","85"),o.setAttribute("height","64"),"dev"==="dev".toLowerCase()?u.dev_project_carousel_icon_section.appendChild(o):"dev"==="client".toLowerCase()&&u.client_project_carousel_icon_section.appendChild(o)})),dispatchEvent(new Event("load"))},i=new g("Alien Mathvasion Game",2,"https://dnoelmathinvasiongame.netlify.app/html/gamescreen.html","Play","https://github.com/DNoel26/Alien_Mathvasion",!0);i.description="This project was designed for children ages 8+ with the goal of making math fun and engaging. It was built from scratch without any frameworks, libraries or dependencies using OOP and SOC principles, and with the \n                    intention of making code DRY and easier to maintain. Utilizes heavy JavaScript and DOM manipulation. Uses promises instead of while loops to track progress. Visual design is based on retro arcade Shoot-em Up games.\n                    Good luck surviving the hardest difficulty!\n                ",i.link_note="(expect audio - desktop version only!)",i.notes.push("Gameplay works completely but there are some minor bugs to fix, mainly in the areas of UI/UX. Very rarely, game does not load when difficulty is selected. Simply refresh the browser and try again."),i.notes.push("Some features are missing such as player entered details, data persistence, settings; to be implemented at a later date."),i.notes.push("Use Google Chrome for the best experience. Not yet fully responsive on smaller devices!"),i.add_imgs([],["./img/projects/webp/min/alien-mathvasion-1-min.webp","./img/projects/webp/min/alien-mathvasion-2-min.webp","./img/projects/webp/min/alien-mathvasion-3-min.webp"],[]),i.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp"],[]);var a=new g("Wix Site Clone",1,"https://dnoelmotorcyclewixclone.netlify.app/","View","https://github.com/DNoel26/Wix_Motorcycle_Trial",!0);a.description='This was my first official development project and was intended to be a pixel for pixel clone of\n                    <a target="_blank" class="text-reset text-decoration-none anim-link-3" rel="noopener" href="https://www.wix.com/website-template/view/html/773?siteId=32647d89-1460-4326-b084-a958bf90765d&metaSiteId=129904ad-3051-8c87-f69f-31ce75166f9c&originUrl=https%3A%2F%2Fwww.wix.com%2Fwebsite%2Ftemplates%3Fcriteria%3Dauto&tpClick=view_button">a selected, original Wix site</a>. \n                    It was built using HTML, CSS and without any JavaScript. \n                    Showcases the ability to take a design and convert it into a functional webpage or website.\n                ',a.link_note="(see link to cloned Wix site above)",a.notes.push("Only 3 pages were cloned for this project: Home, About and Contact."),a.notes.push("Website is fully responsive for all devices!"),a.add_imgs([],["./img/projects/webp/min/wix-clone-1-min.webp","./img/projects/webp/min/wix-clone-2-min.webp","./img/projects/webp/min/wix-clone-3-min.webp"],[]),a.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp"],[]);var r=new g("Cyberdise Online Store",2,"https://dnoelcyberdise.herokuapp.com/","Interact","https://github.com/DNoel26/Cyberdise-Dynamic-",!0);r.description="This project was my first official Full Stack development project and end-to-end C.R.U.D. application, and was designed to test everything I had learned (and more). This online store was built from scratch using MVC principles for the Back End code.\n                    The database was designed, normalized and created in MySQL. There are both customer and employee functionalities to experiment with. Features such as \n                    authorization, authentication, page protection, session storage, pagination, multiple queries per database call, database transactions, product tracking, product restocking, add to cart, payment processing using a modified PayPal SDK, to name a few, were all built from the ground up and implemented in this site.\n                    Check it out and let me know what you think! Please use only FAKE CREDENTIALS if creating a customer account to login. See my GitHub readme for instructions on how to log in as an employee to stock, re-stock and/or modify product data etc. \n                ",r.link_note="(fake credentials only - desktop version only!)",r.notes.push("Most other major features are working as expected. Search functionality not implemented just yet."),r.notes.push("Some UI elements are incomplete/missing."),r.notes.push("Not yet fully responsive on smaller devices!"),r.add_imgs([],["./img/projects/webp/min/cyberdise-online-store-1-min.webp","./img/projects/webp/min/cyberdise-online-store-2-min.webp","./img/projects/webp/min/cyberdise-online-store-3-min.webp","./img/projects/webp/min/cyberdise-online-store-4-min.webp","./img/projects/webp/min/cyberdise-online-store-5-min.webp"],[]),r.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp","./img/logos/handlebars-badge.webp","/img/logos/mysql-badge.webp","./img/logos/nodejs-badge.webp","./img/logos/express-logo.webp","./img/logos/postman-badge.webp"],[]);var s=new g("Movie Database",2,"https://dnoelmovieapidatabase.netlify.app/","View","https://github.com/DNoel26/Movie_Database",!0);s.description='\n                    This project was built from scratch to dynamically display "Now Showing" movie details and trailers via consuming multiple APIs; meaning all data shown on my website is requested\n                    and pulled from another server, and manipulated on my website using JavaScript. Design is based on retro theatres. Click the link and take a look at all the trending movies now!\n                ',s.link_note="(desktop version only!)",s.notes.push("All major features are working as expected. Pagination to be implemented."),s.notes.push("Not yet fully responsive on smaller devices!"),s.add_imgs([],["./img/projects/webp/min/movie-db-1-min.webp","./img/projects/webp/min/movie-db-2-min.webp","./img/projects/webp/min/movie-db-3-min.webp"],[]),s.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp"],[]);var c=new g("Amazon Clone",2,"https://clone-905a7.web.app/","Interact","https://github.com/DNoel26/Amazon_React_Clone",!0);c.description="\n                    This project was done as my hands on introduction to React.js and Firebase. In this particular case, I followed a tutorial and manipulated my code rather than building from scratch.\n                    The main purpose was to understand the concepts behind the very popular React.js framework, as well as to learn new methods for coding. Main project features are account creation, \n                    login, add to cart, and payment processing using Stripe API. Please use only FAKE CREDENTIALS if creating an account to login. See my GitHub readme for further instructions. \n                ",c.link_note="(fake credentials only - desktop version only!)",c.notes.push("All major features are working as expected."),c.notes.push("Not yet fully responsive on smaller devices!"),c.add_imgs([],["./img/projects/webp/min/amazon-clone-1-min.webp","./img/projects/webp/min/amazon-clone-2-min.webp","./img/projects/webp/min/amazon-clone-3-min.webp","./img/projects/webp/min/amazon-clone-4-min.webp"],[]),c.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp","./img/logos/react-badge.webp","./img/logos/firebase-badge.webp","./img/logos/nodejs-badge.webp","./img/logos/express-logo.webp"],[]);var l,d=new g("Real Estate Site",3,"https://presidentialrealtors-dev-static.netlify.app/","View","https://github.com/DNoel26/Presidential-Realtors-Static",!0);d.description="\n                    The focus of this project was for me to learn and implement modern design, user interface (UI) and user experience (UX) elements. It was built from scratch and will eventually be converted\n                    to a fully functional single page application (SPA) using React.js, MongoDB, Node.js and Express.js. Let me know what you think!\n                ",d.link_note="(desktop version only!)",d.notes.push("Most client side features work as expected. Focus of this project was on design elements rather than functionality."),d.notes.push("Project to be redone as an app (SPA) with the the functionalities expected of a real estate website."),d.notes.push("Not yet fully responsive on smaller devices!"),d.add_imgs([],["./img/projects/webp/min/real-estate-1-min.webp","./img/projects/webp/min/real-estate-2-min.webp","./img/projects/webp/min/real-estate-3-min.webp"],[]),d.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp"],[]),(e=JSON.parse(sessionStorage.getItem("current_project")))&&(n(),u.dev_project_overview.innerHTML=t,o()),u.dev_project_gallery_btns.forEach((function(l){l.addEventListener("click",(function(){if("Alien Mathvasion Game"===l.dataset.devProject)e=i;else if("Wix Site Clone"===l.dataset.devProject)e=a;else if("Cyberdise Online Store"===l.dataset.devProject)e=r;else if("Movie Database"===l.dataset.devProject)e=s;else if("Amazon Clone"===l.dataset.devProject)e=c;else{if("Real Estate Site"!==l.dataset.devProject)return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e,t){return console.trace("Logged Values[".concat(t,"]: "),e)}))}("PROJECT NOT LOADED CORRECTLY");e=d}n(),sessionStorage.setItem("current_project",JSON.stringify(e)),u.dev_project_overview.innerHTML=t,o(),u.dev_project_overview.scrollIntoView(),u.return_to_dev_gallery_btns.forEach((function(e){e.addEventListener("click",(function(){u.dev_project_gallery.scrollIntoView()}))}))}))})),l=u.dev_project_overview,new MutationObserver((function(e,t){var n,o=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,r=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return r=e.done,e},e:function(e){s=!0,a=e},f:function(){try{r||null==n.return||n.return()}finally{if(s)throw a}}}}(e);try{for(o.s();!(n=o.n()).done;){var i=n.value;"childList"===i.type||"attributes"===i.type||i.type}}catch(e){o.e(e)}finally{o.f()}})).observe(l,{attributes:!1,childList:!0,subtree:!0}),u.return_to_dev_gallery_btns.forEach((function(e){e.addEventListener("click",(function(){u.dev_project_gallery.scrollIntoView()}))}))}(),function(){var e;new IntersectionObserver((function(o,a){o.forEach((function(o){o.isIntersecting&&n.e(905).then(n.bind(n,905)).then((function(e){return e.default})).then((function(n){var o=new n("https://restcountries.eu/rest/v2/all"),a=!1;e=function(){document.querySelectorAll("option").forEach((function(e){if(e.value&&e.selected&&""!==e.value){var t=e.getAttribute("data-flag"),n=e.getAttribute("data-calling-codes"),o=document.createElement("img");o.setAttribute("src",t),o.setAttribute("alt","Country flag for ".concat(e.value)),o.setAttribute("width","40px"),o.setAttribute("height","auto"),a||(u.phone.value="+".concat(n,"-")),u.country_select.labels[0].children[1]&&"IMG"===u.country_select.labels[0].children[1].tagName&&u.country_select.labels[0].children[1].remove(),u.country_select.labels[0].appendChild(o)}else e.selected&&!e.value&&u.country_select.labels[0].children[1]&&"IMG"===u.country_select.labels[0].children[1].tagName&&u.country_select.labels[0].children[1].remove()}))},o.fetch_api().then((function(t){t.forEach((function(e){var t=document.createElement("option");t.setAttribute("value",e.name),t.setAttribute("data-flag",e.flag),t.setAttribute("data-calling-codes",e.callingCodes),t.innerHTML=t.value,u.country_select.appendChild(t)})),u.phone.addEventListener("keyup",i((function(){a=!0}),500)),u.country_select.addEventListener("change",i((function(){e()}),300))})).catch((function(e){return console.error("Error: ",e)})).then((function(){return t()}))})).catch((function(e){return console.log("Failed to import API module: ",e)}))}))}),{root:null,rootMargin:"200px",threshold:0}).observe(u.my_form);var t=function(){var t=[function(){return u.display_form_validation_msg()}];Array.prototype.slice.call(u.forms_need_validation).forEach((function(a,c){a.querySelectorAll(".form-data").forEach((function(t){"INPUT"===t.tagName&&(t.value=sessionStorage.getItem(t.name)),"TEXTAREA"===t.tagName&&(t.value=sessionStorage.getItem(t.name)),"SELECT"===t.tagName&&(t.value=sessionStorage.getItem(t.name)||""),e(),t.addEventListener("input",i((function(){sessionStorage.setItem(t.name,t.value)}),500))})),a.addEventListener("submit",(function(e){e.preventDefault(),e.stopImmediatePropagation(),n.e(417).then(n.bind(n,417)).then((function(e){return e.default})).then((function(e){if(!a.checkValidity())return new Promise((function(e,t){a.classList.add("was-validated"),e()})).then((function(){t[c]()})).catch((function(e){console.error('Failed to add "was-validated" class to Bootstrap form: '.concat(e))}));var n=new e(u.my_form);n.method=u.my_form.method,n.url=u.my_form.action,n.data=new FormData(n.form),n.success_msg="Hi ".concat(n.get_form_data("first_name").trim(),"! ")+n.success_msg,n.error_msg="Sorry ".concat(n.get_form_data("first_name").trim(),"! ")+n.error_msg;var i=o(r,n.form,u.my_form_button,u.my_form_status,n.success_msg),l=o(s,u.my_form_status,n.error_msg);!function(e,t,n,o,i,a){var r=new XMLHttpRequest;r.open(e,t),r.setRequestHeader("Accept","application/json"),r.onreadystatechange=function(){r.readyState===XMLHttpRequest.DONE&&(200===r.status?(o(),a(r.status)):(i(),a(r.status)))},r.send(n)}(n.method,n.url,n.data,i,l,(function(e){200===e&&k((function(){a.classList.remove("was-validated"),sessionStorage.clear(),u.country_select.labels[0].children[1]&&"IMG"===u.country_select.labels[0].children[1].tagName&&u.country_select.labels[0].children[1].remove()}))}))})).catch((function(e){return console.error("Failed to import Formspree module: ",e)}))}),!1)}))}}()}))},544:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/Darnell_Noel_FSD_Resume_Feb_2021.pdf"},403:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/Darnell_Noel_FSD_Resume_Mar_2021.pdf"},716:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/My_Google_Desktop_Audit.pdf"},476:(e,t,n)=>{var o={"./Darnell_Noel_FSD_Resume_Feb_2021.pdf":544,"./Darnell_Noel_FSD_Resume_Mar_2021.pdf":403,"./My_Google_Desktop_Audit.pdf":716};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=476},925:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/4537c242317c3acb1fa5.mp4"},225:(e,t,n)=>{var o={"./laptop-keyboard-vid-hq.min.mp4":925};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=225}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,loaded:!1,exports:{}};return o[e](n,n.exports,a),n.loaded=!0,n.exports}a.m=o,a.amdO={},e=[],a.O=(t,n,o,i)=>{if(!n){var r=1/0;for(l=0;l<e.length;l++){for(var[n,o,i]=e[l],s=!0,c=0;c<n.length;c++)(!1&i||r>=i)&&Object.keys(a.O).every((e=>a.O[e](n[c])))?n.splice(c--,1):(s=!1,i<r&&(r=i));s&&(e.splice(l--,1),t=o())}return t}i=i||0;for(var l=e.length;l>0&&e[l-1][2]>i;l--)e[l]=e[l-1];e[l]=[n,o,i]},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".bundle."+{351:"a10011837abffdfd0e77",417:"86424274efb3caf6b912",905:"7f8c058ba13de7d82577"}[e]+".js",a.miniCssF=e=>"styles/"+e+".bf80826065c5a4d83082.css",a.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),t={},n="My_Dev_Portfolio:",a.l=(e,o,i,r)=>{if(t[e])t[e].push(o);else{var s,c;if(void 0!==i)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+i){s=u;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.setAttribute("data-webpack",n+i),s.src=e),t[e]=[o];var m=(n,o)=>{s.onerror=s.onload=null,clearTimeout(p);var i=t[e];if(delete t[e],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(o))),n)return n(o)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=m.bind(null,s.onerror),s.onload=m.bind(null,s.onload),c&&document.head.appendChild(s)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/",(()=>{var e={826:0};a.f.j=(t,n)=>{var o=a.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var i=new Promise(((n,i)=>o=e[t]=[n,i]));n.push(o[2]=i);var r=a.p+a.u(t),s=new Error;a.l(r,(n=>{if(a.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var i=n&&("load"===n.type?"missing":n.type),r=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+i+": "+r+")",s.name="ChunkLoadError",s.type=i,s.request=r,o[1](s)}}),"chunk-"+t,t)}},a.O.j=t=>0===e[t];var t=(t,n)=>{var o,i,[r,s,c]=n,l=0;for(o in s)a.o(s,o)&&(a.m[o]=s[o]);for(c&&c(a),t&&t(n);l<r.length;l++)i=r[l],a.o(e,i)&&e[i]&&e[i][0](),e[r[l]]=0;a.O()},n=self.webpackChunkMy_Dev_Portfolio=self.webpackChunkMy_Dev_Portfolio||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var r=a.O(void 0,[887],(()=>a(570)));r=a.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL3NyYy9qcy9CdXNpbmVzc19Mb2dpYy9GdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL3NyYy9qcy9VSV9Mb2dpYy9VSS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2pzL0J1c2luZXNzX0xvZ2ljL1NraWxsUmF0aW5nLmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9zcmMvanMvQnVzaW5lc3NfTG9naWMvUHJvamVjdC5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2Fzc2V0cy9EYXJuZWxsX05vZWxfRlNEX1Jlc3VtZV9GZWJfMjAyMS5wZGYiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL3NyYy9hc3NldHMvRGFybmVsbF9Ob2VsX0ZTRF9SZXN1bWVfTWFyXzIwMjEucGRmIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9zcmMvYXNzZXRzL015X0dvb2dsZV9EZXNrdG9wX0F1ZGl0LnBkZiIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2Fzc2V0c3xzeW5jfC8ucGRmJCIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL21lZGlhfHN5bmN8Ly5tcDQkIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvYW1kIG9wdGlvbnMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ2YWx1ZSIsIndyYXBwZXJfbm9fZXhlYyIsImZ1bmMiLCJhcmdzIiwiZGVib3VuY2UiLCJ0aW1lciIsImluX2RlYm91bmNlIiwiY29udGV4dCIsInRoaXMiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJ0aHJvdHRsZSIsImluX3Rocm90dGxlIiwiaW5pdGlhbCIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImZvcm1fc3VibWl0X3N1Y2Nlc3MiLCJmb3JtIiwiYnV0dG9uIiwic3RhdHVzIiwibXNnIiwicmVzZXQiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiLCJmb3JtX3N1Ym1pdF9lcnJvciIsIm1lZGlhX3F1ZXJpZXMiLCJtcSIsImZ1bmNfdHJ1ZSIsImZ1bmNfZmFsc2UiLCJtYXRjaGVzIiwiZ2VuZXJhdGVfZGFya19jb2xvcl9oZXgiLCJjb2xvciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBvdyIsInRvU3RyaW5nIiwic2xpY2UiLCJVSSIsImJvZHkiLCJkb2N1bWVudCIsImdvb2dsZV9wcmV2aWV3X21vZGFsX2J0biIsInF1ZXJ5U2VsZWN0b3IiLCJnb29nbGVfcHJldmlld19tb2RhbCIsImxhenlfaW1ncyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsYXp5X3NvdXJjZXMiLCJsYXp5X2JncyIsImhlYWRlciIsImhlYWRlcl92aWQiLCJoZWFkZXJfdmlkX211bHRpIiwiaGVhZGVyX2J0bnMiLCJoZWFkZXJfbGlua3MiLCJuYXZfY29udGFpbmVyIiwidG9wX25hdiIsImJvdF9uYXYiLCJib2R5X3BsYWNlaG9sZGVyIiwiaGVhZGVyX2VtcHR5X2RpdiIsInNjcm9sbF9pbmRpY2F0b3IiLCJhY3RpdmVfbGlzdHMiLCJhY3RpdmVfbGluayIsImFuY2hvcl9saW5rcyIsInRvZ2dsZXJfYnRuIiwidG9nZ2xlcl9idG5faWNvbiIsInRvZ2dsZXJfYnRuX3dvcmQiLCJuYXZiYXJfc2Nyb2xsIiwiYm90X25hdl9jb2xsYXBzZSIsImludHJvX21zZyIsIndlbGNvbWUiLCJ0ZXh0X3dyYXBwZXJfbWwxMyIsImhlYWRlcl9kaXZpZGVyIiwiYWJvdXRfc3VtbWFyeV93cmFwcGVyIiwibXlfYWdlIiwic3VtbWFyeV9jb250YWluZXJzIiwic3VtbWFyeV9idG4iLCJteV9jYXJvdXNlbF9wcmV2X2J0biIsIm15X2Nhcm91c2VsX25leHRfYnRuIiwibXlfY2Fyb3VzZWxfd3JhcHBlciIsIm15X2Nhcm91c2VsX2NvbnRlbnQiLCJteV9jYXJvdXNlbF9pdGVtcyIsInNraWxsX3JhdGluZ3MiLCJza2lsbF9yYXRpbmdzX2JlZ2lubmVyIiwic2tpbGxfcmF0aW5nc19ub3ZpY2UiLCJza2lsbF9yYXRpbmdzX2ludGVybWVkaWF0ZSIsInNraWxsX3JhdGluZ3NfYWR2YW5jZWQiLCJza2lsbF9yYXRpbmdzX2V4cGVydCIsInJldHVybl90b19kZXZfZ2FsbGVyeV9idG5zIiwiZGV2X3Byb2plY3RfZ2FsbGVyeSIsImdldEVsZW1lbnRCeUlkIiwiZGV2X3Byb2plY3Rfb3ZlcnZpZXciLCJkZXZfcHJvamVjdF9nYWxsZXJ5X2J0bnMiLCJkZXZfcHJvamVjdF9jYXJvdXNlbCIsImRldl9wcm9qZWN0X2Nhcm91c2VsX2luZGljYXRvcl9zZWN0aW9uIiwiZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbiIsImRldl9wcm9qZWN0X2Nhcm91c2VsX25vdGVfc2VjdGlvbiIsImRldl9wcm9qZWN0X2Nhcm91c2VsX2ljb25fc2VjdGlvbiIsImRldl9wcm9qZWN0X2Nhcm91c2VsX25leHQiLCJkZXZfcHJvamVjdF9jYXJvdXNlbF9wcmV2IiwiY2xpZW50X3Byb2plY3RfZ2FsbGVyeSIsImNsaWVudF9wcm9qZWN0X292ZXJ2aWV3IiwiY2xpZW50X3Byb2plY3RfZ2FsbGVyeV9idG5zIiwiY2xpZW50X3Byb2plY3RfY2Fyb3VzZWwiLCJjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbiIsImNsaWVudF9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb24iLCJjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb24iLCJjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9pY29uX3NlY3Rpb24iLCJjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9uZXh0IiwiY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfcHJldiIsImZvcm1fZGF0YSIsImNvdW50cnlfc2VsZWN0IiwicGhvbmUiLCJ2YWxpZF9mZWVkYmFja19mbmFtZSIsInZhbGlkX2ZlZWRiYWNrX2xuYW1lIiwidmFsaWRfZmVlZGJhY2tfZW1haWwiLCJ2YWxpZF9mZWVkYmFja19jb3VudHJ5IiwidmFsaWRfZmVlZGJhY2tfbWVzc2FnZSIsImludmFsaWRfZmVlZGJhY2tfZm5hbWUiLCJpbnZhbGlkX2ZlZWRiYWNrX2xuYW1lIiwiaW52YWxpZF9mZWVkYmFja19lbWFpbCIsImludmFsaWRfZmVlZGJhY2tfY291bnRyeSIsImludmFsaWRfZmVlZGJhY2tfbWVzc2FnZSIsImZvcm1zX25lZWRfdmFsaWRhdGlvbiIsIm15X2Zvcm0iLCJteV9mb3JtX2J1dHRvbiIsIm15X2Zvcm1fc3RhdHVzIiwiZ3JlY2FwdGNoYXMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY3JlYXRlX3NjcmlwdHMiLCJzcmNzIiwiZm9yRWFjaCIsInNyYyIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImxvYWRfYmdfdmlkIiwidmlkIiwiZGF0YV9zcmMiLCJnZXRBdHRyaWJ1dGUiLCJkYXRhX21lZGlhIiwid2luZG93IiwibWF0Y2hNZWRpYSIsInBhcmVudEVsZW1lbnQiLCJsb2FkIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkX3Bvc3Rlcl9pbWdfc20iLCJ0b2dnbGVyX21lbnVfaWNvbl9zd2l0Y2giLCJzZXRJbnRlcnZhbCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYWRkIiwicmVtb3ZlIiwic2lkZV9tZW51X3JldmVhbCIsInNpZGVfbWVudV9oaWRlIiwibW9iaWxlX21lbnVfcmV2ZWFsIiwibW9iaWxlX21lbnVfaGlkZSIsIm5vX21lbnUiLCJzaHJpbmtfaGVhZGVyIiwic3R5bGUiLCJoZWlnaHQiLCJib3hTaGFkb3ciLCJwYXVzZSIsImJhY2tncm91bmQiLCJleHBhbmRfcGxhY2Vob2xkZXJfZGl2IiwicmVwbGFjZSIsImV4cGFuZF9oZWFkZXIiLCJtcV9saW1pdHMiLCJwbGF5Iiwic2hyaW5rX3BsYWNlaG9sZGVyX2RpdiIsInJlcGxhY2VfdmlkX2JnIiwiYmFja2dyb3VuZFNpemUiLCJmaXhlZF9ib3R0b21faGVhZGVyIiwibm9fZml4ZWRfYm90dG9tX2hlYWRlciIsImFuaW1hdGVfbGV0dGVycyIsInRleHRDb250ZW50IiwiYW5pbWUiLCJ0aW1lbGluZSIsImxvb3AiLCJ0YXJnZXRzIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJvcGFjaXR5IiwiZWFzaW5nIiwiZHVyYXRpb24iLCJkZWxheSIsImVsIiwiY2hhbmdlX2Fib3V0X2luZm8iLCJncm93X2J0bl9vbmNsaWNrIiwiYnRuIiwic2l6ZSIsInRpbWUiLCJ0cmFuc2Zvcm0iLCJzY3JvbGxfaG9yaXpvbnRhbGx5IiwicHgiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsX3N0YXJ0IiwicHhfbGltaXQiLCJzY3JvbGxXaWR0aCIsImNsaWVudFdpZHRoIiwic2Nyb2xsX2VuZCIsInBvcHVsYXRlX3NraWxsX3JhdGluZyIsIlNraWxsIiwicmF0aW5nX2RpdiIsImdldFJhdGluZyIsImRpc3BsYXlfZm9ybV92YWxpZGF0aW9uX21zZyIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwicmFuayIsImNsYXNzaWZpY2F0aW9uIiwiZmlsbGVkX2ljb24iLCJyZXBlYXQiLCJlbXB0eV9pY29uIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpc0FycmF5IiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZnJvbSIsIm8iLCJtaW5MZW4iLCJuIiwiY2FsbCIsImNvbnN0cnVjdG9yIiwibmFtZSIsInRlc3QiLCJzdGF0dXNfbXNnIiwibGluayIsImxpbmtfaGVhZGVyIiwiZ2l0aHViX2xpbmsiLCJnaXRodWJfcmVhZG1lIiwiY2xhc3NfY29kZSIsImJ0bl9pZCIsImFsdCIsImlkcyIsImFsdHMiLCJjYXJvdXNlbF9pbWdfbGlzdCIsInB1c2giLCJ0b29sX2ljb25fbGlzdCIsImxvZyIsImNhY2hlIiwiaW1wb3J0QWxsIiwiciIsImtleXMiLCJyZWNhcHRjaGFDYWxsYmFjayIsInJlcXVpcmUiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdF9sYXp5X2ltZ3MiLCJpbml0X2xhenlfc291cmNlcyIsImluaXRfbGF6eV9iZ3MiLCJpbml0X2dyZWNhcHRjaGFzIiwib3B0aW9ucyIsInJvb3QiLCJyb290TWFyZ2luIiwidGhyZXNob2xkIiwibGF6eV9pbWdfb2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJvYnNlcnZlciIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJsYXp5X2ltYWdlIiwibGF6eV9kYXRhX3NyYyIsImxhenlfZGF0YV9zcmNzZXQiLCJoYXNBdHRyaWJ1dGUiLCJ1bm9ic2VydmUiLCJsYXp5X2ltZyIsIm9ic2VydmUiLCJsYXp5X3NvdXJjZV9vYnNlcnZlciIsImxhenlfc291cmNlIiwibGF6eV9iZ19vYnNlcnZlciIsImxhenlfYmciLCJncmVjYXB0Y2hhX29ic2VydmVyIiwiZ3JlY2FwdGNoYV9jaGVjayIsImdyZWNhcHRjaGEiLCJyZW5kZXIiLCJzaXRla2V5IiwiY2FsbGJhY2siLCJlbGVtZW50IiwiZ29vZ2xlX3ByZXZpZXdfYnRuX2lzX2NsaWNrZWQiLCJpbnRlcnNlY3Rpb25SZWN0Iiwic2Nyb2xsX3RpbWVyIiwic2hvd19oZWFkZXIiLCJzY3JvbGxfbW92ZWQiLCJoZWFkZXJfdmlkX2VuZGVkIiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJjbGljayIsInNpZGVfbWVudV90b2dnbGVyIiwibW9iaWxlX21lbnVfdG9nZ2xlciIsImRpZmZfbXMiLCJhZ2VfZHQiLCJzY3JvbGxfYW10Iiwic2Nyb2xsX2FtdF9tb2RpZmllciIsImhlYWRlcl90aW1lciIsImhlYWRlcl90cmFuc2Zvcm0iLCJzY3JvbGxfbW92ZWRfZGVib3VuY2Vfd3JhcHBlciIsInN0aWNreV9oZWFkZXJfdGhyb3R0bGVfd3JhcHBlciIsInBhc3NpdmUiLCJpbmRpY2F0b3IiLCJzY3JvbGxlZCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIndpZHRoIiwiRGF0ZSIsIm5vdyIsImFicyIsImdldFVUQ0Z1bGxZZWFyIiwidGFnY2xvdWRfcmFkaXVzIiwidGFnY2xvdWRfcmVzaXplciIsInRhZ2Nsb3VkX2xvYWRlciIsIlRhZ0Nsb3VkIiwicmFkaXVzIiwibWF4U3BlZWQiLCJpbml0U3BlZWQiLCJkaXJlY3Rpb24iLCJrZWVwIiwiaXRlbSIsImNsaWNrZWRfb25jZSIsImNsaWNrZWRfdHdpY2UiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJtb2R1bGUiLCJTa2lsbF9SYXRpbmciLCJjdXJyZW50X3Byb2plY3QiLCJuZXdfaW5uZXJfaHRtbCIsImNoYW5nZV9wcm9qZWN0IiwiYm9vdHN0cmFwIiwiQ2Fyb3VzZWwiLCJpbnRlcnZhbCIsImRlc2NyaXB0aW9uIiwibGlua19ub3RlIiwicmVpbml0aWFsaXplX2VsIiwiaW5kZXgiLCJkaXYiLCJpbWciLCJ0b0xvd2VyQ2FzZSIsIm5vdGVzIiwibm90ZSIsImxpc3QiLCJpZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsIkFsaWVuX01hdGh2YXNpb24iLCJQcm9qZWN0IiwiYWRkX2ltZ3MiLCJhZGRfdG9vbF9pY29ucyIsIldpeF9DbG9uZSIsIkN5YmVyZGlzZSIsIk1vdmllX0RhdGFiYXNlIiwiQW1hem9uX0Nsb25lIiwidGFyZ2V0X25vZGUiLCJSZWFsX0VzdGF0ZV9TaXRlIiwiSlNPTiIsInBhcnNlIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwiZGF0YXNldCIsImRldlByb2plY3QiLCJkYXRhIiwiZGF0dW0iLCJ0cmFjZSIsImxvZ2dlciIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zTGlzdCIsIm11dGF0aW9uIiwidHlwZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwic2VsZWN0X2NoYW5nZSIsIkFQSSIsIkNvdW50cnlfQVBJIiwidXNlcl90eXBlZCIsIm9wdGlvbiIsInNlbGVjdGVkIiwiZmxhZyIsImNhbGxpbmdfY29kZXMiLCJmZXRjaF9hcGkiLCJuZXdfb3B0aW9uIiwiY2FsbGluZ0NvZGVzIiwiZm9ybXNwcmVlIiwidmFsaWRhdGlvbl9tc2dzIiwidGFnTmFtZSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJGb3Jtc3ByZWUiLCJjaGVja1ZhbGlkaXR5IiwiTXlfRm9ybSIsIm1ldGhvZCIsInVybCIsIkZvcm1EYXRhIiwic3VjY2Vzc19tc2ciLCJnZXRfZm9ybV9kYXRhIiwidHJpbSIsImVycm9yX21zZyIsInN1Y2Nlc3MiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIkRPTkUiLCJzZW5kIiwiYWpheCIsImNsZWFyIiwibWFwIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZSIsIkVycm9yIiwiY29kZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwiYW1kTyIsIk8iLCJyZXN1bHQiLCJjaHVua0lkcyIsImZuIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImZ1bGZpbGxlZCIsImoiLCJldmVyeSIsInNwbGljZSIsImQiLCJkZWZpbml0aW9uIiwiZ2V0IiwiZiIsImNodW5rSWQiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJtaW5pQ3NzRiIsImhtZCIsImNyZWF0ZSIsImNoaWxkcmVuIiwic2V0IiwicHJvcCIsImhhc093blByb3BlcnR5IiwibCIsImRvbmUiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicyIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYmluZCIsImhlYWQiLCJ0b1N0cmluZ1RhZyIsInAiLCJpbnN0YWxsZWRDaHVua3MiLCI4MjYiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoiVUFBSUEsRUNBQUMsRUFDQUMsRSw4QkNEVyxTQUFTQyxFQUFnQkMsRUFBVUMsR0FDaEQsS0FBTUQsYUFBb0JDLEdBQ3hCLE1BQU0sSUFBSUMsVUFBVSxxQyw2Q0NGeEIsU0FBU0MsRUFBa0JDLEVBQVFDLEdBQ2pDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQ3JDLElBQUlFLEVBQWFILEVBQU1DLEdBQ3ZCRSxFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQ2pERCxFQUFXRSxjQUFlLEVBQ3RCLFVBQVdGLElBQVlBLEVBQVdHLFVBQVcsR0FDakRDLE9BQU9DLGVBQWVULEVBQVFJLEVBQVdNLElBQUtOLElBSW5DLFNB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LEVBQVV1RCxFQUFhQyxHQUFXN0gsRUFHaEJsWSxFQUFJLEVBQzNCLElBQUkrYixLQUFZK0QsRUFDWnJFLEVBQW9CcE0sRUFBRXlRLEVBQWEvRCxLQUNyQ04sRUFBb0JVLEVBQUVKLEdBQVkrRCxFQUFZL0QsSUFLaEQsSUFGR2dFLEdBQVNBLEVBQVF0RSxHQUNqQm9FLEdBQTRCQSxFQUEyQjNILEdBQ3JEbFksRUFBSXVjLEVBQVN0YyxPQUFRRCxJQUN6Qm9kLEVBQVViLEVBQVN2YyxHQUNoQnliLEVBQW9CcE0sRUFBRStQLEVBQWlCaEMsSUFBWWdDLEVBQWdCaEMsSUFDckVnQyxFQUFnQmhDLEdBQVMsS0FFMUJnQyxFQUFnQjdDLEVBQVN2YyxJQUFNLEVBRWhDeWIsRUFBb0JZLEtBR2pCMkQsRUFBcUJDLEtBQW1DLDZCQUFJQSxLQUFtQyw4QkFBSyxHQUN4R0QsRUFBbUJ4VyxRQUFRb1csRUFBcUJaLEtBQUssS0FBTSxJQUMzRGdCLEVBQW1CelAsS0FBT3FQLEVBQXFCWixLQUFLLEtBQU1nQixFQUFtQnpQLEtBQUt5TyxLQUFLZ0IsSyxHQ2hGdkYsSUFBSUUsRUFBc0J6RSxFQUFvQlksT0FBRXRhLEVBQVcsQ0FBQyxNQUFNLElBQU8wWixFQUFvQixPQUM3RnlFLEVBQXNCekUsRUFBb0JZLEVBQUU2RCxJIiwiZmlsZSI6ImluZGV4LmJ1bmRsZS5jNWE0OTIwNTczOTIyYTJiZTliNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHJlc3VsdCA9IGZuKCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcIk15X0Rldl9Qb3J0Zm9saW86XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCIndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2VyKC4uLmRhdGEpIHsgIFxyXG4gICAgZGF0YS5mb3JFYWNoKChkYXR1bSwgaW5kZXgpID0+IHtcclxuICAgICAgICByZXR1cm4gY29uc29sZS50cmFjZShgTG9nZ2VkIFZhbHVlc1ske2luZGV4fV06IGAsIGRhdHVtKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBwZXJfbm9fZXhlYyhmdW5jLCAuLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZnVuYyguLi5hcmdzKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBwZXJfZXhlYyhmdW5jLCAuLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gZnVuYyguLi5hcmdzKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB0aW1lcikge1xyXG4gICAgbGV0IGluX2RlYm91bmNlO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcywgYXJndW1lbnRzLCBmdW5jKTtcclxuXHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGluX2RlYm91bmNlKTtcclxuICAgICAgICBpbl9kZWJvdW5jZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKVxyXG4gICAgICAgIH0sICh0aW1lcikpO1xyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB0aW1lcikge1xyXG4gICAgbGV0IGluX3Rocm90dGxlO1xyXG4gICAgbGV0IGluaXRpYWwgPSAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgLy9sb2dnZXIoaW5fdGhyb3R0bGUsIGluaXRpYWwpXHJcblxyXG4gICAgICAgIGlmKGluX3Rocm90dGxlICE9PSB1bmRlZmluZWQpIHsgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIGluX3Rocm90dGxlID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW5fdGhyb3R0bGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluX3Rocm90dGxlID0gdW5kZWZpbmVkOyBcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGluaXRpYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKGNvbnRleHQsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSwgKGluaXRpYWwgPz8gdGltZXIpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoaW5pdGlhbCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsID0gMDtcclxuICAgICAgICAgICAgICAgIH0sICh0aW1lcikpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybV9zdWJtaXRfc3VjY2Vzcyhmb3JtLCBidXR0b24sIHN0YXR1cywgbXNnKSB7XHJcbiAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcclxuICAgIHN0YXR1cy5pbm5lckhUTUwgPSBtc2cgPz8gXCJTdWJtaXNzaW9uIFN1Y2Nlc3NmdWwhXCI7IFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1fc3VibWl0X2Vycm9yKHN0YXR1cywgbXNnKSB7XHJcbiAgICBzdGF0dXMuaW5uZXJIVE1MID0gbXNnID8/IFwiU3VibWlzc2lvbiBGYWlsZWQhXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWpheChtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcclxuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcclxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHJldHVybjtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIC8vbG9nZ2VyKHhoci5zdGF0dXMsIHhoci5yZXNwb25zZSwgeGhyLnJlc3BvbnNlVHlwZSk7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgY2FsbGJhY2soeGhyLnN0YXR1cyk7XHJcbiAgICAgICAgfSBlbHNlIHsgXHJcbiAgICAgICAgICAgIC8vbG9nZ2VyKHhoci5zdGF0dXMsIHhoci5yZXNwb25zZSwgeGhyLnJlc3BvbnNlVHlwZSk7XHJcbiAgICAgICAgICAgIGVycm9yKCk7IFxyXG4gICAgICAgICAgICBjYWxsYmFjayh4aHIuc3RhdHVzKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiB4aHIuc2VuZChkYXRhKTtcclxufTtcclxuXHJcbi8vIEluY2x1ZGUgZm9yIHNjcmVlbiBzaXplIGNoYW5nZXMgXHJcbmV4cG9ydCBmdW5jdGlvbiBtZWRpYV9xdWVyaWVzKG1xLCBmdW5jX3RydWUsIGZ1bmNfZmFsc2UpIHtcclxuICAgIGlmIChtcS5tYXRjaGVzKSB7IC8vIElmIG1lZGlhIHF1ZXJ5IG1hdGNoZXNcclxuICAgICAgICByZXR1cm4gZnVuY190cnVlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAoZnVuY19mYWxzZSA/IGZ1bmNfZmFsc2UoKSA6IG51bGwpO1xyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxfcHJvZ3Jlc3MoaW5kaWNhdG9yKSB7XHJcbiAgICBjb25zdCB3aW5fc2Nyb2xsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgIGNvbnN0IGhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgY29uc3Qgc2Nyb2xsZWQgPSAod2luX3Njcm9sbCAvIGhlaWdodCkgKiAxMDA7XHJcbiAgICByZXR1cm4gaW5kaWNhdG9yLnN0eWxlLndpZHRoID0gc2Nyb2xsZWQgKyBcIiVcIjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVfYWdlKCkgeyBcclxuICAgIGNvbnN0IGRpZmZfbXMgPSBEYXRlLm5vdygpIC0gbmV3IERhdGUoXCIyNiBNYXJjaCAxOTkwXCIpO1xyXG4gICAgY29uc3QgYWdlX2R0ID0gbmV3IERhdGUoZGlmZl9tcyk7IFxyXG4gICAgcmV0dXJuIE1hdGguYWJzKGFnZV9kdC5nZXRVVENGdWxsWWVhcigpIC0gMTk3MCk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVfZGFya19jb2xvcl9oZXgoKSB7XHJcbiAgICBsZXQgY29sb3IgPSBcIiNcIjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgY29sb3IgKz0gKFwiMFwiICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTYsIDIpIC8gMikudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sb3I7XHJcbn07IiwiaW1wb3J0IHsgZGVib3VuY2UsIG1lZGlhX3F1ZXJpZXMgfSBmcm9tIFwiLi4vQnVzaW5lc3NfTG9naWMvRnVuY3Rpb25zLmpzXCI7XHJcbmltcG9ydCBTa2lsbF9SYXRpbmcgZnJvbSBcIi4uL0J1c2luZXNzX0xvZ2ljL1NraWxsUmF0aW5nLmpzXCI7XHJcblxyXG5jb25zdCBVSSA9IHtcclxuXHJcbiAgICAvKioqIEdFTkVSQUwgKioqL1xyXG5cclxuICAgIGJvZHk6IGRvY3VtZW50LmJvZHksXHJcbiAgICBnb29nbGVfcHJldmlld19tb2RhbF9idG46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1icy10b2dnbGU9J21vZGFsJ11cIiksXHJcbiAgICBnb29nbGVfcHJldmlld19tb2RhbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZXN1bWVcIiksXHJcbiAgICBsYXp5X2ltZ3M6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWcubGF6eVwiKSxcclxuICAgIGxhenlfc291cmNlczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNvdXJjZVwiKSxcclxuICAgIGxhenlfYmdzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxhenktYmdcIiksXHJcblxyXG4gICAgLyoqKiBIRUFERVIgKioqL1xyXG5cclxuICAgIC8vIEhlYWRlciBWaWRlbyBcclxuICAgIGhlYWRlcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRlclwiKSxcclxuICAgIGhlYWRlcl92aWQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkZXIgdmlkZW9cIiksXHJcbiAgICBoZWFkZXJfdmlkX211bHRpOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidmlkZW8gW2RhdGEtc3JjXVwiKSxcclxuICAgIGhlYWRlcl9idG5zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uXCIpLFxyXG4gICAgaGVhZGVyX2xpbmtzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKSxcclxuICAgIG5hdl9jb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2LWNvbnRhaW5lclwiKSxcclxuICAgIHRvcF9uYXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9wLWhlYWRlci1uYXZcIiksXHJcbiAgICBib3RfbmF2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJvdC1oZWFkZXItbmF2XCIpLFxyXG4gICAgYm9keV9wbGFjZWhvbGRlcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHkgLnBsYWNlaG9sZGVyLWRpdlwiKSxcclxuICAgIGhlYWRlcl9lbXB0eV9kaXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkZXIgLmVtcHR5LWRpdlwiKSxcclxuICAgIHNjcm9sbF9pbmRpY2F0b3I6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbXktYmFyXCIpLFxyXG4gICAgYWN0aXZlX2xpc3RzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJvdC1oZWFkZXItbmF2IC5uYXYtaXRlbVwiKSxcclxuICAgIGFjdGl2ZV9saW5rOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS5hY3RpdmVcIiksXHJcbiAgICBhbmNob3JfbGlua3M6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhLmFuY2hvci1saW5rXCIpLFxyXG5cclxuICAgIC8vIEhhbWJ1cmdlciBtZW51IGJ1dHRvbiBpbiBoZWFkZXJcclxuICAgIHRvZ2dsZXJfYnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdmJhci10b2dnbGVyXCIpLFxyXG4gICAgdG9nZ2xlcl9idG5faWNvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItdG9nZ2xlci1pY29uXCIpLFxyXG4gICAgdG9nZ2xlcl9idG5fd29yZDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItdG9nZ2xlci13b3JkXCIpLFxyXG4gICAgbmF2YmFyX3Njcm9sbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItbmF2LXNjcm9sbFwiKSxcclxuICAgIGJvdF9uYXZfY29sbGFwc2U6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYm90LWhlYWRlci1uYXZcIiksXHJcblxyXG4gICAgLyoqKiBIT01FIFNFQ1RJT04gKioqL1xyXG5cclxuICAgIGludHJvX21zZzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnRyb1wiKSxcclxuICAgIHdlbGNvbWU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2VsY29tZVwiKSxcclxuICAgIHRleHRfd3JhcHBlcl9tbDEzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWwxMycpLFxyXG4gICAgXHJcbiAgICAvLyBHZW5lcmF0ZWQgYnkgdGhlIHNoYXBlIGRpdmlkZXIgYXBwIChyZW1lbWJlciB0byBjaGFuZ2UgY2xhc3MgbmFtZSBpZiBjaGFuZ2luZyBkaXZpZGVyIHVzaW5nIGFwcClcclxuICAgIGhlYWRlcl9kaXZpZGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmN1c3RvbS1zaGFwZS1kaXZpZGVyLWJvdHRvbS0xNjEyMDMyNzAxXCIpLFxyXG5cclxuICAgIC8qKiogQUJPVVQgU0VDVElPTiAqKiovXHJcblxyXG4gICAgYWJvdXRfc3VtbWFyeV93cmFwcGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFib3V0LXNlY3Rpb24gLnN1bW1hcnktd3JhcHBlclwiKSxcclxuICAgIG15X2FnZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWFnZT0nbXktYWdlJ11cIiksXHJcbiAgICBzdW1tYXJ5X2NvbnRhaW5lcnM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3VtbWFyeS1jb250YWluZXJcIiksXHJcbiAgICBzdW1tYXJ5X2J0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWlkPSdzdW1tYXJ5LWJ0biddXCIpLFxyXG5cclxuICAgIC8qKiogU0VSVklDRVMgU0VDVElPTiAqKiovXHJcblxyXG4gICAgbXlfY2Fyb3VzZWxfcHJldl9idG46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VydmljZXMtc2VjdGlvbiAubXktY2Fyb3VzZWwtYnRuLXByZXZcIiksXHJcbiAgICBteV9jYXJvdXNlbF9uZXh0X2J0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZXJ2aWNlcy1zZWN0aW9uIC5teS1jYXJvdXNlbC1idG4tbmV4dFwiKSxcclxuICAgIG15X2Nhcm91c2VsX3dyYXBwZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubXktY2Fyb3VzZWwtd3JhcHBlclwiKSxcclxuICAgIG15X2Nhcm91c2VsX2NvbnRlbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubXktY2Fyb3VzZWwtY29udGVudFwiKSxcclxuICAgIG15X2Nhcm91c2VsX2l0ZW1zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm15LWNhcm91c2VsLWl0ZW1cIiksXHJcblxyXG4gICAgLyoqKiBUT09MUyAmIFRFQ0hOT0xPR0lFUyBTRUNUSU9OICoqKi8gXHJcblxyXG4gICAgc2tpbGxfcmF0aW5nczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmdcIiksXHJcbiAgICBza2lsbF9yYXRpbmdzX2JlZ2lubmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNraWxsLXJhdGluZy1iZWdpbm5lclwiKSxcclxuICAgIHNraWxsX3JhdGluZ3Nfbm92aWNlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNraWxsLXJhdGluZy1ub3ZpY2VcIiksXHJcbiAgICBza2lsbF9yYXRpbmdzX2ludGVybWVkaWF0ZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmctaW50ZXJtZWRpYXRlXCIpLFxyXG4gICAgc2tpbGxfcmF0aW5nc19hZHZhbmNlZDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmctYWR2YW5jZWRcIiksXHJcbiAgICBza2lsbF9yYXRpbmdzX2V4cGVydDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmctZXhwZXJ0XCIpLFxyXG5cclxuICAgIC8qKiogUFJPSkVDVCBTRUNUSU9OICoqKi8gXHJcblxyXG4gICAgLy8gRGV2ZWxvcG1lbnQgUHJvamVjdHNcclxuICAgIHJldHVybl90b19kZXZfZ2FsbGVyeV9idG5zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtaWQ9J2Rldi1wcm9qZWN0LWdhbGxlcnknXVwiKSxcclxuICAgIGRldl9wcm9qZWN0X2dhbGxlcnk6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtZ2FsbGVyeVwiKSxcclxuICAgIGRldl9wcm9qZWN0X292ZXJ2aWV3OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRldi1wcm9qZWN0LW92ZXJ2aWV3XCIpLFxyXG4gICAgZGV2X3Byb2plY3RfZ2FsbGVyeV9idG5zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uW2RhdGEtZGV2LXByb2plY3RdXCIpLFxyXG4gICAgZGV2X3Byb2plY3RfY2Fyb3VzZWw6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtY2Fyb3VzZWxcIiksXHJcbiAgICBkZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbmRpY2F0b3JzXCIpLFxyXG4gICAgZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbm5lclwiKSxcclxuICAgIGRldl9wcm9qZWN0X2Nhcm91c2VsX25vdGVfc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1ub3Rlc1wiKSxcclxuICAgIGRldl9wcm9qZWN0X2Nhcm91c2VsX2ljb25fc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pY29uLXNlY3Rpb25cIiksXHJcbiAgICBkZXZfcHJvamVjdF9jYXJvdXNlbF9uZXh0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI2Rldi1wcm9qZWN0LW92ZXJ2aWV3IC5jYXJvdXNlbC1jb250cm9sLW5leHRcIiksXHJcbiAgICBkZXZfcHJvamVjdF9jYXJvdXNlbF9wcmV2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI2Rldi1wcm9qZWN0LW92ZXJ2aWV3IC5jYXJvdXNlbC1jb250cm9sLXByZXZcIiksXHJcblxyXG4gICAgLy8gQ2xpZW50IFByb2plY3RzXHJcbiAgICBjbGllbnRfcHJvamVjdF9nYWxsZXJ5OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsaWVudC1wcm9qZWN0LWdhbGxlcnlcIiksXHJcbiAgICBjbGllbnRfcHJvamVjdF9vdmVydmlldzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbGllbnQtcHJvamVjdC1vdmVydmlld1wiKSxcclxuICAgIGNsaWVudF9wcm9qZWN0X2dhbGxlcnlfYnRuczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvbltkYXRhLWNsaWVudC1wcm9qZWN0XVwiKSxcclxuICAgIGNsaWVudF9wcm9qZWN0X2Nhcm91c2VsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsaWVudC1wcm9qZWN0LWNhcm91c2VsXCIpLFxyXG4gICAgY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfaW5kaWNhdG9yX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtaW5kaWNhdG9yc1wiKSxcclxuICAgIGNsaWVudF9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtaW5uZXJcIiksXHJcbiAgICBjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtbm90ZXNcIiksXHJcbiAgICBjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9pY29uX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtaWNvbi1zZWN0aW9uXCIpLFxyXG4gICAgY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfbmV4dDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNjbGllbnQtcHJvamVjdC1vdmVydmlldyAuY2Fyb3VzZWwtY29udHJvbC1uZXh0XCIpLFxyXG4gICAgY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfcHJldjogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNjbGllbnQtcHJvamVjdC1vdmVydmlldyAuY2Fyb3VzZWwtY29udHJvbC1wcmV2XCIpLFxyXG5cclxuICAgIC8qKiogQ09OVEFDVCBNRSBTRUNUSU9OICoqKi9cclxuICAgIFxyXG4gICAgZm9ybV9kYXRhOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm0tZGF0YVwiKSxcclxuICAgIGNvdW50cnlfc2VsZWN0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvdW50cnlcIiksXHJcbiAgICBwaG9uZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaG9uZVwiKSxcclxuXHJcbiAgICAvKiBGb3Jtc3ByZWUgKi9cclxuXHJcbiAgICB2YWxpZF9mZWVkYmFja19mbmFtZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi52YWxpZC1mZWVkYmFjay52YWxpZC1mZWVkYmFjay1mbmFtZVwiKSxcclxuICAgIHZhbGlkX2ZlZWRiYWNrX2xuYW1lOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkLWZlZWRiYWNrLnZhbGlkLWZlZWRiYWNrLWxuYW1lXCIpLFxyXG4gICAgdmFsaWRfZmVlZGJhY2tfZW1haWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmFsaWQtZmVlZGJhY2sudmFsaWQtZmVlZGJhY2stZW1haWxcIiksXHJcbiAgICB2YWxpZF9mZWVkYmFja19jb3VudHJ5OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkLWZlZWRiYWNrLnZhbGlkLWZlZWRiYWNrLWNvdW50cnlcIiksXHJcbiAgICB2YWxpZF9mZWVkYmFja19tZXNzYWdlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkLWZlZWRiYWNrLnZhbGlkLWZlZWRiYWNrLW1lc3NhZ2VcIiksXHJcbiAgICBpbnZhbGlkX2ZlZWRiYWNrX2ZuYW1lOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmludmFsaWQtZmVlZGJhY2suaW52YWxpZC1mZWVkYmFjay1mbmFtZVwiKSxcclxuICAgIGludmFsaWRfZmVlZGJhY2tfbG5hbWU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW52YWxpZC1mZWVkYmFjay5pbnZhbGlkLWZlZWRiYWNrLWxuYW1lXCIpLFxyXG4gICAgaW52YWxpZF9mZWVkYmFja19lbWFpbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnZhbGlkLWZlZWRiYWNrLmludmFsaWQtZmVlZGJhY2stZW1haWxcIiksXHJcbiAgICBpbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnk6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW52YWxpZC1mZWVkYmFjay5pbnZhbGlkLWZlZWRiYWNrLWNvdW50cnlcIiksXHJcbiAgICBpbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2U6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW52YWxpZC1mZWVkYmFjay5pbnZhbGlkLWZlZWRiYWNrLW1lc3NhZ2VcIiksXHJcblxyXG4gICAgLy8gRmV0Y2ggYWxsIHRoZSBmb3JtcyB3ZSB3YW50IHRvIGFwcGx5IGN1c3RvbSBCb290c3RyYXAgdmFsaWRhdGlvbiBzdHlsZXMgdG9cclxuICAgIGZvcm1zX25lZWRfdmFsaWRhdGlvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5lZWRzLXZhbGlkYXRpb24nKSxcclxuXHJcbiAgICAvLyBHZXQgdGhlIGZvcm0gZWxlbWVudHMgZGVmaW5lZCBpbiB5b3VyIGZvcm0gSFRNTFxyXG4gICAgbXlfZm9ybTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteS1mb3JtXCIpLFxyXG4gICAgbXlfZm9ybV9idXR0b246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXktZm9ybS1idXR0b25cIiksXHJcbiAgICBteV9mb3JtX3N0YXR1czogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteS1mb3JtLXN0YXR1c1wiKSxcclxuICAgIGdyZWNhcHRjaGFzOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZy1yZWNhcHRjaGFcIiksXHJcblxyXG4gICAgY3JlYXRlX3NjcmlwdHMoLi4uc3Jjcykge1xyXG4gICAgICAgIHNyY3MuZm9yRWFjaChzcmMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKFwiYXN5bmNcIiwgXCJhc3luY1wiKTtcclxuICAgICAgICAgICAgdGhpcy5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7ICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBsb2FkX2JnX3ZpZCgpIHsgICAgICAgIFxyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5oZWFkZXJfdmlkX211bHRpKTtcclxuICAgICAgICB0aGlzLmhlYWRlcl92aWRfbXVsdGkuZm9yRWFjaCh2aWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhX3NyYyA9IHZpZC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YV9tZWRpYSA9IHZpZC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1lZGlhXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBtcV9saW1pdCA9IHdpbmRvdy5tYXRjaE1lZGlhKGRhdGFfbWVkaWEpO1xyXG5cclxuICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdCwgKCkgPT4geyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZpZC5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgZGF0YV9zcmMpO1xyXG4gICAgICAgICAgICAgICAgdmlkLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIGRhdGFfbWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgdmlkLnBhcmVudEVsZW1lbnQubG9hZCgpO1xyXG4gICAgICAgICAgICB9LCAoKSA9PiB2aWQucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgYWRkX3Bvc3Rlcl9pbWdfc20oKSB7XHJcbiAgICAgICAgY29uc3QgbXFfbGltaXQgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKTtcclxuXHJcbiAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdCwgKCkgPT4geyBcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJfdmlkLnNldEF0dHJpYnV0ZShcInBvc3RlclwiLCBcIi4vaW1nL2Jhc2Uvd2VicC90aGluay1kaWZmZXJlbnQtNzAwLndlYnBcIik7XHJcbiAgICAgICAgfSwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRvZ2dsZXJfbWVudV9pY29uX3N3aXRjaCgpIHtcclxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvZ2dsZXJfYnRuX3dvcmQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpICYmIHRoaXMudG9nZ2xlcl9idG5fd29yZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVyX2J0bl9pY29uLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXJfYnRuX3dvcmQuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZXJfYnRuX2ljb24uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpICYmIHRoaXMudG9nZ2xlcl9idG5fd29yZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVyX2J0bl9pY29uLmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXJfYnRuX3dvcmQuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCA1MDAwKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2lkZV9tZW51X3JldmVhbCgpIHtcclxuICAgICAgICBVSS5ib3RfbmF2X2NvbGxhcHNlLmNsYXNzTGlzdC5hZGQoXCJzaWRlLW1lbnUtcmV2ZWFsXCIpO1xyXG4gICAgICAgIFVJLmJvdF9uYXZfY29sbGFwc2UuY2xhc3NMaXN0LnJlbW92ZShcInNpZGUtbWVudS1oaWRlXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzaWRlX21lbnVfaGlkZSgpIHtcclxuICAgICAgICBVSS5ib3RfbmF2X2NvbGxhcHNlLmNsYXNzTGlzdC5yZW1vdmUoXCJzaWRlLW1lbnUtcmV2ZWFsXCIpO1xyXG4gICAgICAgIFVJLmJvdF9uYXZfY29sbGFwc2UuY2xhc3NMaXN0LmFkZChcInNpZGUtbWVudS1oaWRlXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb2JpbGVfbWVudV9yZXZlYWwoKSB7XHJcbiAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJtb2JpbGUtbWVudS1yZXZlYWxcIik7XHJcbiAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2JpbGUtbWVudS1oaWRlXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb2JpbGVfbWVudV9oaWRlKCkge1xyXG4gICAgICAgIFVJLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwibW9iaWxlLW1lbnUtcmV2ZWFsXCIpO1xyXG4gICAgICAgIFVJLmhlYWRlci5jbGFzc0xpc3QuYWRkKFwibW9iaWxlLW1lbnUtaGlkZVwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgbm9fbWVudSgpIHsgICAgXHJcbiAgICAgICAgVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKFwic2lkZS1tZW51LWhpZGVcIik7XHJcbiAgICAgICAgVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKFwic2lkZS1tZW51LXJldmVhbFwiKTtcclxuICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcIm1vYmlsZS1tZW51LWhpZGVcIik7XHJcbiAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2JpbGUtbWVudS1yZXZlYWxcIik7XHJcbiAgICAgICAgVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2hyaW5rX2hlYWRlcigpIHsgICAgICAgXHJcbiAgICAgICAgLy8gT24gc2Nyb2xsLCBzaHJpbmtzIGhlYWRlciBhbmQgZXhwYW5kcyBib2R5LCBwYXVzZXMgdmlkZW8sIGNoYW5nZXMgdG8gc3RhdGljIGJnIGFuZCBhZGp1c3RzIGhlaWdodCBvZiBwbGFjZWhvbGRlciBlbGVtZW50cyBmb3Igc21vb3RoIHRyYW5zaXRpb25cclxuICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIndpbGwtY2hhbmdlLWhlaWdodFwiKTtcclxuICAgICAgICB0aGlzLm5hdl9jb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5hdi1jb250YWluZXItc3RpY2t5XCIpO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmhlaWdodCA9IFwiMTAwcHhcIjtcclxuICAgICAgICB0aGlzLmhlYWRlci5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMC4xcmVtIDVyZW0gcmdiYSgwLDAsMCwwLjUpXCI7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJfdmlkLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJfdmlkLnBhdXNlKCk7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMzEsMTExLDEzOSwxKSwgcmdiYSgzMSwxMTEsMTM5LDEpKSwgdXJsKCcuL2ltZy90cmFuc3BhcmVudC1wbmctdzEwLnBuZycpIG5vLXJlcGVhdCBmaXhlZCAxMDAlIDEwMCVcIjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBPbiBzY3JvbGwsIGhpZGVzIGludHJvZHVjdGlvbiBtc2cgYW5kIHJlbW92ZXMgdG9wIHBhZGRpbmcgZnJvbSB3ZWxjb21lIHNlY3Rpb24gYmVsb3dcclxuICAgICAgICB0aGlzLmludHJvX21zZy5jbGFzc0xpc3QuYWRkKFwiaC0wXCIpOyAgIFxyXG4gICAgfSxcclxuXHJcbiAgICBleHBhbmRfcGxhY2Vob2xkZXJfZGl2KCkge1xyXG4gICAgICAgIHRoaXMuYm9keV9wbGFjZWhvbGRlci5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7IC8vIDQ2Ljg3NXJlbSBmb3IgbGFyZ2UsIDUyMHB4IGZvciBzbWFsbGVyXHJcbiAgICAgICAgdGhpcy5ib2R5X3BsYWNlaG9sZGVyLmNsYXNzTGlzdC5yZXBsYWNlKFwiaW52aXNpYmxlXCIsIFwidmlzaWJsZVwiKTtcclxuICAgICAgICB0aGlzLmJvZHlfcGxhY2Vob2xkZXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJwbGFjZWhvbGRlci1kaXYtcmV2ZWFsLXN0YXJ0XCIsIFwicGxhY2Vob2xkZXItZGl2LXJldmVhbC1lbmRcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIGV4cGFuZF9oZWFkZXIoKSB7XHJcbiAgICAgICAgLy8gUmV0dXJucyBoZWFkZXIgYW5kIGJvZHkgdG8gaW5pdGlhbCBzdGF0ZXMgd2hlbiBzY3JvbGxlZCB0byB0aGUgdG9wXHJcbiAgICAgICAgdGhpcy5ib2R5LmNsYXNzTGlzdC5hZGQoXCJ3aWxsLWNoYW5nZS1oZWlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5uYXZfY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJuYXYtY29udGFpbmVyLXN0aWNreVwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgbXFfbGltaXRzID0gW1xyXG4gICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDk5MnB4KVwiKSxcclxuICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA5OTEuOThweClcIiksXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMF0sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuaGVpZ2h0ID0gXCI3MHZoXCI7XHJcbiAgICAgICAgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzFdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmhlaWdodCA9IFwiNzB2aFwiOyAgXHJcbiAgICAgICAgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmJveFNoYWRvdyA9IFwidW5zZXRcIjtcclxuICAgICAgICB0aGlzLmhlYWRlcl92aWQuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKTtcclxuICAgICAgICB0aGlzLmhlYWRlcl92aWQucGxheSgpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm5zIGludHJvZHVjdGlvbiBtc2cgYW5kIHdlbGNvbWUgc2VjdGlvbiB0byBpbml0aWFsIHN0YXRlIHdoZW4gc2Nyb2xsZWQgdG8gdGhlIHRvcFxyXG4gICAgICAgIHRoaXMuaW50cm9fbXNnLmNsYXNzTGlzdC5yZW1vdmUoXCJoLTBcIik7ICAgXHJcbiAgICB9LFxyXG5cclxuICAgIHNocmlua19wbGFjZWhvbGRlcl9kaXYoKSB7XHJcbiAgICAgICAgdGhpcy5ib2R5X3BsYWNlaG9sZGVyLnN0eWxlLmhlaWdodCA9IFwiMFwiO1xyXG4gICAgICAgIHRoaXMuYm9keV9wbGFjZWhvbGRlci5jbGFzc0xpc3QucmVwbGFjZShcInZpc2libGVcIiwgXCJpbnZpc2libGVcIik7XHJcbiAgICAgICAgdGhpcy5ib2R5X3BsYWNlaG9sZGVyLmNsYXNzTGlzdC5yZXBsYWNlKFwicGxhY2Vob2xkZXItZGl2LXJldmVhbC1lbmRcIiwgXCJwbGFjZWhvbGRlci1kaXYtcmV2ZWFsLXN0YXJ0XCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXBsYWNlX3ZpZF9iZygpIHtcclxuICAgICAgICAvLyBUbyByZXBsYWNlIHRoZSBoZWFkZXIgdmlkZW8gYmcgd2hlbiBpdCBlbmRzXHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMzEsMTExLDEzOSwwLjgpLCByZ2JhKDAsMCwwLDAuNikpLCB1cmwoJy4vaW1nL2Jhc2Uvd2VicC9sYXB0b3Ata2V5Ym9hcmQud2VicCcpIG5vLXJlcGVhdCBmaXhlZCAyMCUgMjAlXCI7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcImNvdmVyXCI7XHJcbiAgICB9LFxyXG5cclxuICAgIGZpeGVkX2JvdHRvbV9oZWFkZXIoKSB7XHJcbiAgICAgICAgY29uc3QgbXFfbGltaXQgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKVxyXG4gICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXQsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJzdGlja3ktdG9wXCIsIFwiZml4ZWQtYm90dG9tXCIpO1xyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJmaXhlZC1ib3R0b21cIiwgXCJzdGlja3ktdG9wXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBub19maXhlZF9ib3R0b21faGVhZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhlYWRlci5jbGFzc0xpc3QuY29udGFpbnMoXCJmaXhlZC1ib3R0b21cIikpIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZXBsYWNlKFwiZml4ZWQtYm90dG9tXCIsIFwic3RpY2t5LXRvcFwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgYW5pbWF0ZV9sZXR0ZXJzKCkge1xyXG4gICAgICAgIC8vIFdyYXAgZXZlcnkgbGV0dGVyIGluIGEgc3BhblxyXG4gICAgICAgIHRoaXMudGV4dF93cmFwcGVyX21sMTMuaW5uZXJIVE1MID0gdGhpcy50ZXh0X3dyYXBwZXJfbWwxMy50ZXh0Q29udGVudC5yZXBsYWNlKC9cXFMvZywgXCI8c3BhbiBjbGFzcz0nbGV0dGVyJz4kJjwvc3Bhbj5cIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYW5pbWUudGltZWxpbmUoe2xvb3A6IHRydWV9KVxyXG4gICAgICAgIC5hZGQoe1xyXG4gICAgICAgICAgICB0YXJnZXRzOiAnLm1sMTMgLmxldHRlcicsXHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVk6IFsxMDAsMF0sXHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVo6IDAsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFswLDFdLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiZWFzZU91dEV4cG9cIixcclxuICAgICAgICAgICAgZHVyYXRpb246IDYwMCxcclxuICAgICAgICAgICAgZGVsYXk6IChlbCwgaSkgPT4gMzAwICsgMzAgKiBpLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmFkZCh7XHJcbiAgICAgICAgICAgIHRhcmdldHM6ICcubWwxMyAubGV0dGVyJyxcclxuICAgICAgICAgICAgdHJhbnNsYXRlWTogWzAsLTEwMF0sXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFsxLDBdLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiZWFzZUluRXhwb1wiLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogNjAwLFxyXG4gICAgICAgICAgICBkZWxheTogKGVsLCBpKSA9PiA2MDAwICsgMzAgKiBpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBjaGFuZ2VfYWJvdXRfaW5mbygpIHtcclxuICAgICAgICBpZiAodGhpcy5zdW1tYXJ5X2NvbnRhaW5lcnNbMV0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJvdXRfc3VtbWFyeV93cmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJvcGFjaXR5LTBcIik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeV9jb250YWluZXJzWzBdLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIiwgXCJvcGFjaXR5LTBcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1bW1hcnlfY29udGFpbmVyc1sxXS5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIsIFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJ5X2J0bi5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtaW5mby1jaXJjbGVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJ0bi10ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIE1vcmVcclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICB9LCAyMDUpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFib3V0X3N1bW1hcnlfd3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICAgICAgICB9LCAzNTApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdW1tYXJ5X2NvbnRhaW5lcnNbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJvdXRfc3VtbWFyeV93cmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJvcGFjaXR5LTBcIik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1bW1hcnlfY29udGFpbmVyc1sxXS5jbGFzc0xpc3QuYWRkKFwiZC1ub25lXCIsIFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJ5X2NvbnRhaW5lcnNbMF0uY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiLCBcIm9wYWNpdHktMFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeV9idG4uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWluZm8tY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJidG4tdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMZWFybiBNb3JlXHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgfSwgMjA1KTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hYm91dF9zdW1tYXJ5X3dyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcIm9wYWNpdHktMFwiKTtcclxuICAgICAgICAgICAgfSwgMzUwKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBncm93X2J0bl9vbmNsaWNrKGJ0biwgc2l6ZSwgdGltZSkge1xyXG4gICAgICAgIGJ0bi5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHtzaXplfSlgO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgYnRuLnN0eWxlLnRyYW5zZm9ybSA9IFwiaW5pdGlhbFwiO1xyXG4gICAgICAgIH0sIHRpbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzY3JvbGxfaG9yaXpvbnRhbGx5KGVsLCBweCkge1xyXG4gICAgICAgIGVsLnNjcm9sbExlZnQgKz0gcHg7XHJcbiAgICB9LFxyXG5cclxuICAgIHNjcm9sbF9zdGFydChlbCwgcHhfbGltaXQpIHtcclxuICAgICAgICBpZiAoZWwuc2Nyb2xsTGVmdCA+PSAoZWwuc2Nyb2xsV2lkdGggLSBlbC5jbGllbnRXaWR0aCAtIHB4X2xpbWl0KSkge1xyXG4gICAgICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBzY3JvbGxfZW5kKGVsLCBweF9saW1pdCkge1xyXG4gICAgICAgIGlmKGVsLnNjcm9sbExlZnQgPD0gcHhfbGltaXQpIHtcclxuICAgICAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IChlbC5zY3JvbGxXaWR0aCAtIGVsLmNsaWVudFdpZHRoKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBwb3B1bGF0ZV9za2lsbF9yYXRpbmcoU2tpbGwpIHtcclxuICAgICAgICB0aGlzLnNraWxsX3JhdGluZ3NfYmVnaW5uZXIuZm9yRWFjaChyYXRpbmdfZGl2ID0+IHtcclxuICAgICAgICAgICAgcmF0aW5nX2Rpdi5pbm5lckhUTUwgPSBTa2lsbC5nZXRSYXRpbmcoXCJiZWdpbm5lclwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNraWxsX3JhdGluZ3Nfbm92aWNlLmZvckVhY2gocmF0aW5nX2RpdiA9PiB7ICAgICBcclxuICAgICAgICAgICAgcmF0aW5nX2Rpdi5pbm5lckhUTUwgPSBTa2lsbC5nZXRSYXRpbmcoXCJub3ZpY2VcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5za2lsbF9yYXRpbmdzX2ludGVybWVkaWF0ZS5mb3JFYWNoKHJhdGluZ19kaXYgPT4ge1xyXG4gICAgICAgICAgICByYXRpbmdfZGl2LmlubmVySFRNTCA9IFNraWxsLmdldFJhdGluZyhcImludGVybWVkaWF0ZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNraWxsX3JhdGluZ3NfYWR2YW5jZWQuZm9yRWFjaChyYXRpbmdfZGl2ID0+IHtcclxuICAgICAgICAgICAgcmF0aW5nX2Rpdi5pbm5lckhUTUwgPSBTa2lsbC5nZXRSYXRpbmcoXCJhZHZhbmNlZFwiKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5za2lsbF9yYXRpbmdzX2V4cGVydC5mb3JFYWNoKHJhdGluZ19kaXYgPT4ge1xyXG4gICAgICAgICAgICByYXRpbmdfZGl2LmlubmVySFRNTCA9IFNraWxsLmdldFJhdGluZyhcImV4cGVydFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgZGlzcGxheV9mb3JtX3ZhbGlkYXRpb25fbXNnKCkge1xyXG4gICAgICAgIC8vIFVwZGF0ZXMgVUkgd2l0aCBkaWZmZXJlbnQgc3VjY2VzcyB2YWxpZGF0aW9uIG1lc3NhZ2VzIGFmdGVyIGZhaWx1cmUgdG8gc3VibWl0IGNvcnJlY3RseVxyXG4gICAgICAgIGlmICh0aGlzLmludmFsaWRfZmVlZGJhY2tfZm5hbWUgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX2ZuYW1lKS5kaXNwbGF5ICE9IFwibm9uZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRfZmVlZGJhY2tfZm5hbWUuaW5uZXJIVE1MID0gXCJOaWNlISBZb3UgcmVtZW1iZXJlZCB5b3VyIGZpcnN0IG5hbWUhXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW52YWxpZF9mZWVkYmFja19sbmFtZSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmludmFsaWRfZmVlZGJhY2tfbG5hbWUpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZF9mZWVkYmFja19sbmFtZS5pbm5lckhUTUwgPSBcIlNvIHlvdSBkbyBoYXZlIGEgbGFzdCBuYW1lLi4uXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW52YWxpZF9mZWVkYmFja19lbWFpbCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmludmFsaWRfZmVlZGJhY2tfZW1haWwpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRfZmVlZGJhY2tfZW1haWwuaW5uZXJIVE1MID0gXCJNdWNoIGJldHRlci4uLnBsZWFzZSBlbnN1cmUgdGhhdCB0aGUgc3BlbGxpbmcgb2YgeW91ciBlbWFpbCBpcyBjb3JyZWN0XCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnkgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnkpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZF9mZWVkYmFja19jb3VudHJ5LmlubmVySFRNTCA9IFwiV2VsY29tZSB0byBFYXJ0aCBcIiArIGDwn5G9YDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2UgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2UpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZF9mZWVkYmFja19tZXNzYWdlLmlubmVySFRNTCA9IFwiSG93IGRpZCB5b3UgZm9yZ2V0IHRoZSBtb3N0IGltcG9ydGFudCBwYXJ0PyBPaCB3ZWxsLCBhdCBsZWFzdCBpdCdzIGZpbmUgbm93Li4uXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVUk7IiwiLy9HZW5lcmF0ZXMgc2tpbGwgcmF0aW5nIGRpdnMgYW5kIGljb25zIGJhc2VkIG9uIGNsYXNzIG5hbWVcclxuXHJcbi8qIFNWRyBwYXRoIGZvciBmaWxsZWQgc3RhciBpY29uXHJcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyLWZpbGxcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XHJcbiAgICAgICAgPHBhdGggZD1cIk0zLjYxMiAxNS40NDNjLS4zODYuMTk4LS44MjQtLjE0OS0uNzQ2LS41OTJsLjgzLTQuNzNMLjE3MyA2Ljc2NWMtLjMyOS0uMzE0LS4xNTgtLjg4OC4yODMtLjk1bDQuODk4LS42OTZMNy41MzguNzkyYy4xOTctLjM5LjczLS4zOS45MjcgMGwyLjE4NCA0LjMyNyA0Ljg5OC42OTZjLjQ0MS4wNjIuNjEyLjYzNi4yODMuOTVsLTMuNTIzIDMuMzU2LjgzIDQuNzNjLjA3OC40NDMtLjM2Ljc5LS43NDYuNTkyTDggMTMuMTg3bC00LjM4OSAyLjI1NnpcIi8+XHJcbiAgICA8L3N2Zz5cclxuKi9cclxuXHJcbi8qIFNWRyBwYXRoIGZvciBoYWxmLWZpbGxlZCBzdGFyIGljb25cclxuICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cImJpIGJpLXN0YXItaGFsZlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cclxuICAgICAgICA8cGF0aCBkPVwiTTUuMzU0IDUuMTE5TDcuNTM4Ljc5MkEuNTE2LjUxNiAwIDAgMSA4IC41Yy4xODMgMCAuMzY2LjA5Ny40NjUuMjkybDIuMTg0IDQuMzI3IDQuODk4LjY5NkEuNTM3LjUzNyAwIDAgMSAxNiA2LjMyYS41NS41NSAwIDAgMS0uMTcuNDQ1bC0zLjUyMyAzLjM1Ni44MyA0LjczYy4wNzguNDQzLS4zNi43OS0uNzQ2LjU5Mkw4IDEzLjE4N2wtNC4zODkgMi4yNTZhLjUxOS41MTkgMCAwIDEtLjE0Ni4wNWMtLjM0MS4wNi0uNjY4LS4yNTQtLjYtLjY0MmwuODMtNC43M0wuMTczIDYuNzY1YS41NS41NSAwIDAgMS0uMTcxLS40MDMuNTkuNTkgMCAwIDEgLjA4NC0uMzAyLjUxMy41MTMgMCAwIDEgLjM3LS4yNDVsNC44OTgtLjY5NnpNOCAxMi4wMjdjLjA4IDAgLjE2LjAxOC4yMzIuMDU2bDMuNjg2IDEuODk0LS42OTQtMy45NTdhLjU2NC41NjQgMCAwIDEgLjE2My0uNTA1bDIuOTA2LTIuNzctNC4wNTItLjU3NmEuNTI1LjUyNSAwIDAgMS0uMzkzLS4yODhMOC4wMDIgMi4yMjMgOCAyLjIyNnY5Ljh6XCIvPlxyXG4gICAgPC9zdmc+XHJcbiovXHJcblxyXG4vKiBTVkcgcGF0aCBmb3IgZW1wdHkgc3RhciBpY29uXHJcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNMi44NjYgMTQuODVjLS4wNzguNDQ0LjM2Ljc5MS43NDYuNTkzbDQuMzktMi4yNTYgNC4zODkgMi4yNTZjLjM4Ni4xOTguODI0LS4xNDkuNzQ2LS41OTJsLS44My00LjczIDMuNTIzLTMuMzU2Yy4zMjktLjMxNC4xNTgtLjg4OC0uMjgzLS45NWwtNC44OTgtLjY5Nkw4LjQ2NS43OTJhLjUxMy41MTMgMCAwIDAtLjkyNyAwTDUuMzU0IDUuMTJsLTQuODk4LjY5NmMtLjQ0MS4wNjItLjYxMi42MzYtLjI4My45NWwzLjUyMyAzLjM1Ni0uODMgNC43M3ptNC45MDUtMi43NjdsLTMuNjg2IDEuODk0LjY5NC0zLjk1N2EuNTY1LjU2NSAwIDAgMC0uMTYzLS41MDVMMS43MSA2Ljc0NWw0LjA1Mi0uNTc2YS41MjUuNTI1IDAgMCAwIC4zOTMtLjI4OGwxLjg0Ny0zLjY1OCAxLjg0NiAzLjY1OGEuNTI1LjUyNSAwIDAgMCAuMzkzLjI4OGw0LjA1Mi41NzUtMi45MDYgMi43N2EuNTY0LjU2NCAwIDAgMC0uMTYzLjUwNmwuNjk0IDMuOTU3LTMuNjg2LTEuODk0YS41MDMuNTAzIDAgMCAwLS40NjEgMHpcIi8+XHJcbiAgICA8L3N2Zz5cclxuKi9cclxuXHJcbmNsYXNzIFNraWxsX1JhdGluZyB7XHJcblxyXG4gICAgY2xhc3NpZmljYXRpb24gPSBcIlwiOyAvLyBSZXByZXNlbnRlZCBieSBzdGFyIGljb25zIGluIFVJXHJcbiAgICBmaWxsZWRfaWNvbiA9IGAgICBcclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjExXCIgaGVpZ2h0PVwiMTFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyLWZpbGxcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMy42MTIgMTUuNDQzYy0uMzg2LjE5OC0uODI0LS4xNDktLjc0Ni0uNTkybC44My00LjczTC4xNzMgNi43NjVjLS4zMjktLjMxNC0uMTU4LS44ODguMjgzLS45NWw0Ljg5OC0uNjk2TDcuNTM4Ljc5MmMuMTk3LS4zOS43My0uMzkuOTI3IDBsMi4xODQgNC4zMjcgNC44OTguNjk2Yy40NDEuMDYyLjYxMi42MzYuMjgzLjk1bC0zLjUyMyAzLjM1Ni44MyA0LjczYy4wNzguNDQzLS4zNi43OS0uNzQ2LjU5Mkw4IDEzLjE4N2wtNC4zODkgMi4yNTZ6XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICBgO1xyXG4gICAgaGFsZl9pY29uID0gYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxMVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cImJpIGJpLXN0YXItaGFsZlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk01LjM1NCA1LjExOUw3LjUzOC43OTJBLjUxNi41MTYgMCAwIDEgOCAuNWMuMTgzIDAgLjM2Ni4wOTcuNDY1LjI5MmwyLjE4NCA0LjMyNyA0Ljg5OC42OTZBLjUzNy41MzcgMCAwIDEgMTYgNi4zMmEuNTUuNTUgMCAwIDEtLjE3LjQ0NWwtMy41MjMgMy4zNTYuODMgNC43M2MuMDc4LjQ0My0uMzYuNzktLjc0Ni41OTJMOCAxMy4xODdsLTQuMzg5IDIuMjU2YS41MTkuNTE5IDAgMCAxLS4xNDYuMDVjLS4zNDEuMDYtLjY2OC0uMjU0LS42LS42NDJsLjgzLTQuNzNMLjE3MyA2Ljc2NWEuNTUuNTUgMCAwIDEtLjE3MS0uNDAzLjU5LjU5IDAgMCAxIC4wODQtLjMwMi41MTMuNTEzIDAgMCAxIC4zNy0uMjQ1bDQuODk4LS42OTZ6TTggMTIuMDI3Yy4wOCAwIC4xNi4wMTguMjMyLjA1NmwzLjY4NiAxLjg5NC0uNjk0LTMuOTU3YS41NjQuNTY0IDAgMCAxIC4xNjMtLjUwNWwyLjkwNi0yLjc3LTQuMDUyLS41NzZhLjUyNS41MjUgMCAwIDEtLjM5My0uMjg4TDguMDAyIDIuMjIzIDggMi4yMjZ2OS44elwiLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICBlbXB0eV9pY29uID0gYCBcclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjExXCIgaGVpZ2h0PVwiMTFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTIuODY2IDE0Ljg1Yy0uMDc4LjQ0NC4zNi43OTEuNzQ2LjU5M2w0LjM5LTIuMjU2IDQuMzg5IDIuMjU2Yy4zODYuMTk4LjgyNC0uMTQ5Ljc0Ni0uNTkybC0uODMtNC43MyAzLjUyMy0zLjM1NmMuMzI5LS4zMTQuMTU4LS44ODgtLjI4My0uOTVsLTQuODk4LS42OTZMOC40NjUuNzkyYS41MTMuNTEzIDAgMCAwLS45MjcgMEw1LjM1NCA1LjEybC00Ljg5OC42OTZjLS40NDEuMDYyLS42MTIuNjM2LS4yODMuOTVsMy41MjMgMy4zNTYtLjgzIDQuNzN6bTQuOTA1LTIuNzY3bC0zLjY4NiAxLjg5NC42OTQtMy45NTdhLjU2NS41NjUgMCAwIDAtLjE2My0uNTA1TDEuNzEgNi43NDVsNC4wNTItLjU3NmEuNTI1LjUyNSAwIDAgMCAuMzkzLS4yODhsMS44NDctMy42NTggMS44NDYgMy42NThhLjUyNS41MjUgMCAwIDAgLjM5My4yODhsNC4wNTIuNTc1LTIuOTA2IDIuNzdhLjU2NC41NjQgMCAwIDAtLjE2My41MDZsLjY5NCAzLjk1Ny0zLjY4Ni0xLjg5NGEuNTAzLjUwMyAwIDAgMC0uNDYxIDB6XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgYDtcclxuXHJcbiAgICBnZXRSYXRpbmcocmFuaykge1xyXG5cclxuICAgICAgICBpZiAocmFuayA9PT0gXCJiZWdpbm5lclwiKSB7XHJcbiAgICAgICAgICAgIHJhbmsgPSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmFuayA9PT0gXCJub3ZpY2VcIikge1xyXG4gICAgICAgICAgICByYW5rID0gMjtcclxuICAgICAgICB9IGVsc2UgaWYgKHJhbmsgPT09IFwiaW50ZXJtZWRpYXRlXCIpIHtcclxuICAgICAgICAgICAgcmFuayA9IDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyYW5rID09PSBcImFkdmFuY2VkXCIpIHtcclxuICAgICAgICAgICAgcmFuayA9IDQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyYW5rID09PSBcImV4cGVydFwiKSB7XHJcbiAgICAgICAgICAgIHJhbmsgPSA1O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qZm9yKGxldCBpPTA7IGk8NTsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuayA+IGkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzaWZpY2F0aW9uICs9IHRoaXMuZmlsbGVkX2ljb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvbiArPSB0aGlzLmVtcHR5X2ljb247XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTsqL1xyXG5cclxuICAgICAgICB0aGlzLmNsYXNzaWZpY2F0aW9uID0gdGhpcy5maWxsZWRfaWNvbi5yZXBlYXQocmFuaykgKyB0aGlzLmVtcHR5X2ljb24ucmVwZWF0KDUgLSByYW5rKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGFzc2lmaWNhdGlvbjtcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTa2lsbF9SYXRpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJjbGFzcyBQcm9qZWN0IHtcclxuXHJcbiAgICBuYW1lO1xyXG4gICAgZGVzY3JpcHRpb247IFxyXG4gICAgc3RhdHVzID0ge1xyXG5cclxuICAgICAgICBtc2c6IG51bGwsIC8vIENvbXBsZXRlZCwgV29yayBpbiBQcm9ncmVzcywgT24gSG9sZFxyXG4gICAgICAgIGNsYXNzX2NvZGU6IG51bGwsXHJcbiAgICB9O1xyXG4gICAgbGluazsgLy8gaHJlZiB0byBwcm9qZWN0IGhvc3RlZCBzaXRlXHJcbiAgICBsaW5rX2hlYWRlcjsgLy8gZS5nLiBcIlBsYXlcIiBvciBcIlZpZXdcIiBOb3dcclxuICAgIGxpbmtfbm90ZTsgLy8gZS5nLiAoZXhwZWN0IGF1ZGlvKVxyXG4gICAgZ2l0aHViX2xpbms7IC8vIGhyZWYgdG8gcHJvamVjdCBnaXRodWIgcmVwb1xyXG4gICAgZ2l0aHViX3JlYWRtZTsgLy8gYm9vbGVhblxyXG4gICAgbm90ZXMgPSBbXTsgLy8gZGlzcGxheWVkIGFzIGFuIHVub3JkZXJlZCBsaXN0XHJcbiAgICB0aHVtYm5haWwgPSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYnRuX2lkOiBudWxsLFxyXG4gICAgICAgIHNyYzogbnVsbCxcclxuICAgICAgICBhbHQ6IG51bGwsXHJcbiAgICB9OyAvLyBtYWluIGJ1dHRvbiBpbWFnZSBkaXNwbGF5ZWQgaW4gZ2FsbGVyeSBhYm92ZSBwcm9qZWN0IG92ZXJ2aWV3XHJcbiAgICBjYXJvdXNlbF9pbWdfbGlzdCA9IHtcclxuXHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBzcmNzOiBbXSxcclxuICAgICAgICBhbHRzOiBbXSxcclxuICAgIH07IC8vIGltYWdlcyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGNhcm91c2VsXHJcbiAgICB0b29sX2ljb25fbGlzdCA9IHtcclxuXHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBzcmNzOiBbXSxcclxuICAgICAgICBhbHRzOiBbXSxcclxuICAgIH07IC8vIGkuZS4gdG8gYmUgYWRkZWQgdG8gdGhlIFwiLSBCdWlsdCBVc2luZyAtXCIgaWNvbiBzZWN0aW9uXHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSwgc3RhdHVzX21zZywgbGluaywgbGlua19oZWFkZXIsIGdpdGh1Yl9saW5rLCBnaXRodWJfcmVhZG1lKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChzdGF0dXNfbXNnID09PSAxKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c19tc2cgPSBcIkNvbXBsZXRlZFwiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5jbGFzc19jb2RlID0gXCJzdGF0dXMtY29tcGxldGVcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c19tc2cgPT09IDIpIHtcclxuICAgICAgICAgICAgc3RhdHVzX21zZyA9IFwiV29yayBpbiBQcm9ncmVzc1wiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5jbGFzc19jb2RlID0gXCJzdGF0dXMtaW4tcHJvZ3Jlc3NcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c19tc2cgPT09IDMpIHtcclxuICAgICAgICAgICAgc3RhdHVzX21zZyA9IFwiT24gSG9sZFwiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5jbGFzc19jb2RlID0gXCJzdGF0dXMtaG9sZFwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGdpdGh1Yl9yZWFkbWUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgZ2l0aHViX3JlYWRtZSA9IFwiKEdpdEh1YiAtIHJlYWRtZSBhdmFpbGFibGUpXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2l0aHViX3JlYWRtZSA9IFwiKEdpdEh1YilcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMubXNnID0gc3RhdHVzX21zZztcclxuICAgICAgICB0aGlzLmxpbmsgPSBsaW5rO1xyXG4gICAgICAgIHRoaXMubGlua19oZWFkZXIgPSBsaW5rX2hlYWRlcjtcclxuICAgICAgICB0aGlzLmdpdGh1Yl9saW5rID0gZ2l0aHViX2xpbms7XHJcbiAgICAgICAgdGhpcy5naXRodWJfcmVhZG1lID0gZ2l0aHViX3JlYWRtZTtcclxuICAgIH07XHJcblxyXG4gICAgYWRkX2ltZ3MoaWRzLCBzcmNzLCBhbHRzKSB7XHJcbiAgICAgICAgdGhpcy5jYXJvdXNlbF9pbWdfbGlzdC5pZHMucHVzaCguLi5pZHMpO1xyXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxfaW1nX2xpc3Quc3Jjcy5wdXNoKC4uLnNyY3MpO1xyXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxfaW1nX2xpc3QuYWx0cy5wdXNoKC4uLmFsdHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhZGRfdG9vbF9pY29ucyhpZHMsIHNyY3MsIGFsdHMpIHtcclxuICAgICAgICB0aGlzLnRvb2xfaWNvbl9saXN0Lmlkcy5wdXNoKC4uLmlkcyk7XHJcbiAgICAgICAgdGhpcy50b29sX2ljb25fbGlzdC5zcmNzLnB1c2goLi4uc3Jjcyk7XHJcbiAgICAgICAgdGhpcy50b29sX2ljb25fbGlzdC5hbHRzLnB1c2goLi4uYWx0cyk7XHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdDsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zb2xlLmxvZyhcIkFwcC5qcyBMb2FkZWQgU3VjY2Vzc2Z1bGx5XCIpO1xyXG5cclxuY29uc3QgY2FjaGUgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGltcG9ydEFsbChyKSB7XHJcbiAgICByLmtleXMoKS5mb3JFYWNoKChrZXkpID0+IChjYWNoZVtrZXldID0gcihrZXkpKSk7XHJcbn07XHJcblxyXG4vKmltcG9ydChcIi4uL2Nzcy9zdHlsZS5jc3NcIilcclxuLnRoZW4oKCkgPT4ge1xyXG4gICAgaW1wb3J0KFwiLi4vY3NzL21xLmNzc1wiKVxyXG59KVxyXG4uY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIGltcG9ydCBDU1MgZmlsZXM6IFwiLCBlcnIpKTsqL1xyXG5cclxucmVxdWlyZShcIi4uL2Nzcy9zdHlsZS5jc3NcIik7XHJcbnJlcXVpcmUoXCIuLi9jc3MvbXEuY3NzXCIpO1xyXG5cclxuLy9pbXBvcnRBbGwocmVxdWlyZS5jb250ZXh0KCcuL2pzLycsIHRydWUsIC9cXC5qcyQvKSk7XHJcbi8vaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi4vY3NzLycsIHRydWUsIC9cXC5jc3MkLykpO1xyXG4vL2ltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoJy4vaW1nLycsIHRydWUsIC9cXC4ocG5nfHN2Z3xqcGd8anBlZ3xnaWZ8d2VicCkkLykpO1xyXG4vL2ltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoJy4vaHRtbC8nLCB0cnVlLCAvXFwuaHRtbCQvKSk7XHJcbmltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoJy4uL2Fzc2V0cy8nLCB0cnVlLCAvXFwucGRmJC8pKTtcclxuaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi4vbWVkaWEvJywgdHJ1ZSwgL1xcLm1wNCQvKSk7XHJcblxyXG5pbXBvcnQgVUkgZnJvbSBcIi4vVUlfTG9naWMvVUkuanNcIjtcclxuaW1wb3J0IHsgbG9nZ2VyLCBjYWxjdWxhdGVfYWdlLCB3cmFwcGVyX2V4ZWMsIHdyYXBwZXJfbm9fZXhlYywgZGVib3VuY2UsIHRocm90dGxlLCBzY3JvbGxfcHJvZ3Jlc3MsXHJcbiAgICBnZW5lcmF0ZV9kYXJrX2NvbG9yX2hleCwgZm9ybV9zdWJtaXRfc3VjY2VzcywgZm9ybV9zdWJtaXRfZXJyb3IsIGFqYXgsIG1lZGlhX3F1ZXJpZXN9IGZyb20gXCIuL0J1c2luZXNzX0xvZ2ljL0Z1bmN0aW9ucy5qc1wiO1xyXG5pbXBvcnQgU2tpbGxfUmF0aW5nIGZyb20gXCIuL0J1c2luZXNzX0xvZ2ljL1NraWxsUmF0aW5nLmpzXCI7XHJcbmltcG9ydCBQcm9qZWN0IGZyb20gXCIuL0J1c2luZXNzX0xvZ2ljL1Byb2plY3QuanNcIjtcclxuLy9pbXBvcnQgRm9ybXNwcmVlIGZyb20gXCIuL0J1c2luZXNzX0xvZ2ljL0Zvcm1zcHJlZS5qc1wiO1xyXG4vL2ltcG9ydCBBUEkgZnJvbSBcIi4vQnVzaW5lc3NfTG9naWMvQVBJLmpzXCI7XHJcblxyXG4vLyBHb29nbGUgcmVjYXB0Y2hhIGRhdGEgZnVuY3Rpb24gKGZ1bmN0aW9uIG5hbWUgbXVzdCBiZSBzYW1lIGFzIGRhdGEtY2FsbGJhY2sgYXR0cmlidXRlIHZhbHVlKVxyXG5mdW5jdGlvbiByZWNhcHRjaGFDYWxsYmFjayhmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgIC8vY29uc29sZS5sb2coXCJJbiByZWNhcHRjaGFcIik7XHJcbiAgICByZXR1cm4gZnVuYygpO1xyXG59O1xyXG5cclxuY29uc3QgQXBwID0ge1xyXG4gICAgaW5pdCgpIHtcclxuXHJcbiAgICAgICAgLyoqKiBNYWluIERvY3VtZW50ICoqKi9cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCk9PntcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRE9NQ29udGVudExvYWRlZCBTdWNjZXNzZnVsbHlcIik7ICAgIFxyXG5cclxuICAgICAgICAgICAgLy9VSS50b2dnbGVyX21lbnVfaWNvbl9zd2l0Y2goKTtcclxuXHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIC8vIExhenkgbG9hZCBpbWFnZXNcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRfbGF6eV9pbWdzID0gW10uc2xpY2UuY2FsbChVSS5sYXp5X2ltZ3MpO1xyXG4gICAgICAgICAgICAgICAgLy8gTGF6eSBsb2FkIGltYWdlIHNvdXJjZXMgKHBpY3R1cmUgdGFnKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdF9sYXp5X3NvdXJjZXMgPSBbXS5zbGljZS5jYWxsKFVJLmxhenlfc291cmNlcyk7XHJcbiAgICAgICAgICAgICAgICAvLyBMYXp5IGxvYWQgYmFja2dyb3VuZCBpbWFnZXMgaW4gQ1NTXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0X2xhenlfYmdzID0gW10uc2xpY2UuY2FsbChVSS5sYXp5X2Jncyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0X2dyZWNhcHRjaGFzID0gW10uc2xpY2UuY2FsbChVSS5ncmVjYXB0Y2hhcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogJzI1MHB4JyxcclxuICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXCJJbnRlcnNlY3Rpb25PYnNlcnZlclwiIGluIHdpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIExhenkgSW1hZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF6eV9pbWdfb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oZW50cmllcywgb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXp5X2ltYWdlID0gZW50cnkudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhenlfZGF0YV9zcmMgPSBsYXp5X2ltYWdlLmdldEF0dHJpYnV0ZShcImRhdGEtc3JjXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhenlfZGF0YV9zcmNzZXQgPSBsYXp5X2ltYWdlLmdldEF0dHJpYnV0ZShcImRhdGEtc3Jjc2V0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF6eV9pbWFnZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2ltYWdlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBsYXp5X2RhdGFfc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9pbWFnZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF6eV9pbWFnZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXNyY3NldFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2ltYWdlLnNldEF0dHJpYnV0ZShcInNyY3NldFwiLCBsYXp5X2RhdGFfc3Jjc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9pbWFnZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNyY3NldFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfaW1hZ2UuY2xhc3NMaXN0LnJlbW92ZShcImxhenlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9pbWdfb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdF9sYXp5X2ltZ3MuZm9yRWFjaChmdW5jdGlvbihsYXp5X2ltZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2ltZ19vYnNlcnZlci5vYnNlcnZlKGxhenlfaW1nKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgIC8vIExhenkgSW1hZ2UgU291cmNlc1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhenlfc291cmNlX29ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uKGVudHJpZXMsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF6eV9zb3VyY2UgPSBlbnRyeS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF6eV9kYXRhX3NyY3NldCA9IGxhenlfc291cmNlLmdldEF0dHJpYnV0ZShcImRhdGEtc3Jjc2V0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF6eV9zb3VyY2UuaGFzQXR0cmlidXRlKFwiZGF0YS1zcmNzZXRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9zb3VyY2Uuc2V0QXR0cmlidXRlKFwic3Jjc2V0XCIsIGxhenlfZGF0YV9zcmNzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X3NvdXJjZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNyY3NldFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfc291cmNlX29ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRfbGF6eV9zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24obGF6eV9zb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9zb3VyY2Vfb2JzZXJ2ZXIub2JzZXJ2ZShsYXp5X3NvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExhenkgQmdcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXp5X2JnX29ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uKGVudHJpZXMsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJsb2FkLW5vd1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2JnX29ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRfbGF6eV9iZ3MuZm9yRWFjaChmdW5jdGlvbihsYXp5X2JnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfYmdfb2JzZXJ2ZXIub2JzZXJ2ZShsYXp5X2JnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JlY2FwdGNoYV9vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbihlbnRyaWVzLCBvYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSS5jcmVhdGVfc2NyaXB0cyhcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcmVjYXB0Y2hhL2FwaS5qcz9yZW5kZXI9ZXhwbGljaXRcIik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrcyB0byBzZWUgaWYgcmVjYXB0Y2hhIGhhcyBsb2FkZWQgY29ycmVjdGx5IGFuZCAqaWYgbm90LCBtYWtlcyB1cCB0byAxMCBhdHRlbXB0cyB0byByZWxvYWQqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2FwdGNoYUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyZWNhcHRjaGFfY2hlY2sgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVUkuZ3JlY2FwdGNoYXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSS5teV9mb3JtX2J1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlY2FwdGNoYV9vYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZ3JlY2FwdGNoYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWNhcHRjaGEucmVuZGVyKFwicmVjYXB0Y2hhXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVrZXk6IFwiNkxmV0hrZ2FBQUFBQUlLRWN1cVRRaXk4MllTcGVXVGRqZWJzZldaM1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWNhcHRjaGFfY2hlY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTUwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWNhcHRjaGFfY2hlY2soKTsgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKFwiRXJyb3IgaW4gc2NyaXB0IGRlbGF5IHByb21pc2U6IFwiLCBlcnIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbml0X2dyZWNhcHRjaGFzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyZWNhcHRjaGFfb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pKCk7ICAgIFxyXG5cclxuICAgICAgICAgICAgLyoqKiBHRU5FUkFMICoqKi9cclxuXHJcbiAgICAgICAgICAgIFVJLmJvZHkuY2xhc3NMaXN0LmFkZChcIndpbGwtY2hhbmdlLWhlaWdodFwiKTtcclxuICAgICAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJ3aWxsLWNoYW5nZS1oZWlnaHRcIik7XHJcbiAgICAgICAgICAgIFVJLm15X2Zvcm1fYnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXQgbmV3IHBvc3RlciBpbWFnZSBpZiBvbiBtb2JpbGUgZGV2aWNlXHJcbiAgICAgICAgICAgIC8vIExvYWQgQkcgdmlkZW8gZnJvbSBzZWxlY3Rpb25cclxuICAgICAgICAgICAgVUkuYWRkX3Bvc3Rlcl9pbWdfc20oKTtcclxuICAgICAgICAgICAgVUkubG9hZF9iZ192aWQoKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZGVib3VuY2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBVSS5hZGRfcG9zdGVyX2ltZ19zbSgpO1xyXG4gICAgICAgICAgICAgICAgVUkubG9hZF9iZ192aWQoKTtcclxuICAgICAgICAgICAgfSwgNTAwKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBEZWxheSBsb2FkIG9mIG5vbi1lc3NlbnRpYWwgc2NyaXB0c1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMod2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA3NjhweClcIiksICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVUkuY3JlYXRlX3NjcmlwdHMoXCJodHRwczovL3VucGtnLmNvbS9AbG90dGllZmlsZXMvbG90dGllLXBsYXllckBsYXRlc3QvZGlzdC9sb3R0aWUtcGxheWVyLmpzXCIpO1xyXG4gICAgICAgICAgICAgICAgfSwgKCkgPT4ge3JldHVybn0pXHJcbiAgICAgICAgICAgIH0sIDIwMDApO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiBVSS5jcmVhdGVfc2NyaXB0cyhcImh0dHBzOi8vY29kZS50aWRpby5jby9lZHY4YmFkbGF2d3Zla3lvNDJ0Zmt4eXA2ZnJ1dDd5cS5qc1wiLCBcImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vYXhpb3MvZGlzdC9heGlvcy5taW4uanNcIik7XHJcbiAgICAgICAgICAgIH0sIDEwMDAwKTtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc3Qgc2NyaXB0X2RlbGF5ID0gXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBMb2FkcyBHb29nbGUgUHJldmlldyBvbiBjbGljayBvbmx5XHJcbiAgICAgICAgICAgIGxldCBnb29nbGVfcHJldmlld19idG5faXNfY2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBVSS5nb29nbGVfcHJldmlld19tb2RhbF9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWdvb2dsZV9wcmV2aWV3X2J0bl9pc19jbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmdvb2dsZV9wcmV2aWV3X21vZGFsLnNldEF0dHJpYnV0ZShcInNyY1wiLCBcImh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMWRKTEFkYk9sVk56LWJ0WXY2WmwxSWhybEhRS1lOUWxUL3ByZXZpZXdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2dsZV9wcmV2aWV3X2J0bl9pc19jbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogXCIxMHB4XCIsXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDBcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaW50ZXJzZWN0aW9uUmVjdC5oZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVudHJ5KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZWxzZSBlbnRyeVwiLCBlbnRyeSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2hvd19oZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICBsZXQgc2Nyb2xsX2xpbWl0ID0gMDtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbF9tb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgc2Nyb2xsX3RvcF9yZXNldCA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBoZWFkZXJfdmlkX2VuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxfdGltZXI7XHJcblxyXG4gICAgICAgICAgICAvLyBTaW11bGF0ZXMgYW5vdGhlciBjbGljayBldmVudCBhZnRlciBmaXJzdCBpZiBzY3JvbGxlZCB0byB0b3AgXHJcbiAgICAgICAgICAgIC8vIER1ZSB0byBkeW5hbWljIGhlaWdodCBjaGFuZ2VzIGluIGJvZHkgYW5jaG9ycyBjYW4gc29tZXRpbWVzIG5vdCBzY3JvbGwgdG8gYWNjdXJhdGUgcG9zaXRpb25zXHJcbiAgICAgICAgICAgIFVJLmFuY2hvcl9saW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDw9IHNjcm9sbF9saW1pdCB8fCB3aW5kb3cucGFnZVlPZmZzZXQgPD0gc2Nyb2xsX2xpbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5jbGljaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA3NTApO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBTZXRzIHRoZSB0aW1lciBmb3IgdGhlIGhlYWRlciBoaWRlL3Nob3cgZnVuY3Rpb24gKHRpbWVyIHRvIGJlIGNsZWFyZWQgb24gd2luZG93IHNjcm9sbCBvciBlbGVtZW50IGhvdmVyKVxyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJfdGltZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChzY3JvbGxfdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vaXNfc2Nyb2xsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaG93X2hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LmFkZChcImhpZGUtaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcInNob3ctaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9LCA4MDApKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbnRyb2xzIHRoZSBzaWRlIG1lbnUgKHRhYmxldCkgYW5kIG1vYmlsZSBtZW51IGZ1bmN0aW9ucyBcclxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lkZV9tZW51X3RvZ2dsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFVSS50b2dnbGVyX2J0bi5jbGFzc0xpc3QuY29udGFpbnMoXCJjb2xsYXBzZWRcIikpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5zaWRlX21lbnVfcmV2ZWFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5zaWRlX21lbnVfaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vYmlsZV9tZW51X3RvZ2dsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFVSS50b2dnbGVyX2J0bi5jbGFzc0xpc3QuY29udGFpbnMoXCJjb2xsYXBzZWRcIikpIHsgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLm1vYmlsZV9tZW51X3JldmVhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLm1vYmlsZV9tZW51X2hpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBtcV9tZW51X3RvZ2dsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXFfbGltaXRzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MS45OHB4KVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMF0sIG1vYmlsZV9tZW51X3RvZ2dsZXIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzFdLCBzaWRlX21lbnVfdG9nZ2xlciwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLnRvZ2dsZXJfYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtcV9tZW51X3RvZ2dsZXIpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZGVib3VuY2UoZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBVSS5ub19tZW51KCk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MDApKTtcclxuICAgICAgICAgICAgfSgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZXMgdmlkZW8gYWZ0ZXIgcGxheWluZyBvbmNlIGFuZCB0aGVuIGFkZHMgYSBzdGF0aWMgYmFja2dyb3VuZCBpbWFnZSAocmVmcmVzaCB0byBwbGF5IHZpZGVvIGFnYWluKVxyXG4gICAgICAgICAgICBVSS5oZWFkZXJfdmlkLmFkZEV2ZW50TGlzdGVuZXIoXCJlbmRlZFwiLCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgVUkucmVwbGFjZV92aWRfYmcoKTtcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlcl92aWQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJfdmlkX2VuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gUmVtb3ZlcyBwb3N0ZXIgb3IgYmcgaWYgdmlkZW8gZmFpbHMgdG8gbG9hZCBhbmQgdGhlbiBhZGRzIGEgc3RhdGljIGJhY2tncm91bmQgaW1hZ2VcclxuICAgICAgICAgICAgVUkuaGVhZGVyX3ZpZC5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsICgpPT57XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBVSS5yZXBsYWNlX3ZpZF9iZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLmhlYWRlcl92aWQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyX3ZpZF9lbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTtcclxuICAgICAgICAgICAgfSk7IFxyXG5cclxuICAgICAgICAgICAgLy8gQ29udHJvbHMgdGhlIFNjcm9sbCBFdmVudHNcclxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc2l6ZSBoZWFkZXIgd2hlbiBzY3JvbGxpbmcgLSBhZGRzIGFydGlmaWNpYWwgaGVpZ2h0IHRvIGNvbXBlbnNhdGUgZm9yIHJlZHVjdGlvbiBpbiBoZWFkZXIgaGVpZ2h0IGFuZCBhaWQgaW4gc21vb3RoIHRyYW5zaXRpb25pbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiBzY3JvbGxfbGltaXQgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID4gc2Nyb2xsX2xpbWl0KSAmJiBzY3JvbGxfbW92ZWQgPT09IGZhbHNlKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuc2hyaW5rX2hlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5leHBhbmRfcGxhY2Vob2xkZXJfZGl2KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbF9tb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA8PSBzY3JvbGxfbGltaXQgfHwgd2luZG93LnBhZ2VZT2Zmc2V0IDw9IHNjcm9sbF9saW1pdCkgJiYgc2Nyb2xsX21vdmVkID09PSB0cnVlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmV4cGFuZF9oZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuc2hyaW5rX3BsYWNlaG9sZGVyX2RpdigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbF9tb3ZlZCAmJiBoZWFkZXJfdmlkX2VuZGVkKSB7ICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkucmVwbGFjZV92aWRfYmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbF9tb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxfdG9wX3Jlc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID4gc2Nyb2xsX2xpbWl0IHx8IHdpbmRvdy5wYWdlWU9mZnNldCA+IHNjcm9sbF9saW1pdCkgJiYgc2Nyb2xsX21vdmVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVja3Mgc2Nyb2xsIHBvc2l0aW9uIG9uIGxvYWQgb3IgcmVmcmVzaCBhbmQgZXhlY3V0ZXMgXHJcbiAgICAgICAgICAgICAgICBpZihkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID4gc2Nyb2xsX2xpbWl0IHx8IHdpbmRvdy5wYWdlWU9mZnNldCA+IHNjcm9sbF9saW1pdCkgc2Nyb2xsX3RvcF9yZXNldCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyX3RyYW5zZm9ybSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjcm9sbF9tb3ZlZF9kZWJvdW5jZV93cmFwcGVyID0gZGVib3VuY2UoZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxfbW92ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIDgwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RpY2t5X2hlYWRlcl90aHJvdHRsZV93cmFwcGVyID0gdGhyb3R0bGUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyX3RyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIEFkanVzdHMgaGVhZGVyIHRvIG1hdGNoIHNjcmVlbiBzaXplIGlmIHJlc2l6ZWRcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRlYm91bmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJfdHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd19oZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxfdGltZXIpO1xyXG4gICAgICAgICAgICAgICAgfSwgMjAwKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RvcHMgdGhlIGhlYWRlciB0aW1lciB3aGVuIG1vdXNlIGhvdmVycyBvdmVyIHRoZSBoZWFkZXJcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wcyB0aGUgaGVhZGVyIHRpbWVyIHdoZW4gbW91c2UgbW92ZXMgb3ZlciB0aGUgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICBVSS5oZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd19oZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxfdGltZXIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RvcHMgdGhlIGhlYWRlciB0aW1lciB3aGVuIHNjcmVlbiBpcyB0b3VjaGVkIG9uIHRoZSBoZWFkZXJcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvd19oZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxfdGltZXIpO1xyXG4gICAgICAgICAgICAgICAgfSwge3Bhc3NpdmU6IHRydWV9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wcyB0aGUgaGVhZGVyIHRpbWVyIHdoZW4gc2NyZWVuIGlzIG1vdmVkIG9uIHRoZSBoZWFkZXJcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICB9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlc3VtZXMgaGVhZGVyIHRpbWVyIHRvIGhpZGUgaGVhZGVyIHdoZW4gbW91c2UgbGVhdmVzIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICBVSS5oZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiBzY3JvbGxfbGltaXQgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID4gc2Nyb2xsX2xpbWl0KSAmJiAhVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvd19oZWFkZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyX3RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTsgICAgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wcyB0aGUgaGVhZGVyIHRpbWVyIHdoZW4gd2hlbiBoZWFkZXIgYnV0dG9ucyBhcmUgZm9jdXNlZFxyXG4gICAgICAgICAgICAgICAgVUkuaGVhZGVyX2J0bnMuZm9yRWFjaChidG4gPT4geyAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dfaGVhZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wcyB0aGUgaGVhZGVyIHRpbWVyIHdoZW4gaGVhZGVyIGxpbmtzIGFyZSBmb2N1c2VkXHJcbiAgICAgICAgICAgICAgICBVSS5oZWFkZXJfbGlua3MuZm9yRWFjaChsaW5rID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxfdGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9IaWRlcyBoZWFkZXIgb24gc2Nyb2xsIGFuZCByZXR1cm5zIHRvIG5vcm1hbCBwb3NpdGlvbiB3aGVuIHN0b3BwZWQgYWZ0ZXIgYSBmZXcgc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aHJvdHRsZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiBzY3JvbGxfbGltaXQgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID4gc2Nyb2xsX2xpbWl0KSBzaG93X2hlYWRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Ugc2hvd19oZWFkZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciBwcmV2aW91cyB0aW1lciBhbmQgcmVzZXRcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsX3RpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBIaWRlcyB0aGUgaGVhZGVyIG9uIHNjcm9sbCBzdG9wIG9yIHNob3dzIHdoaWxlIHNjcm9sbGluZyBvciBob3ZlcmluZyBvbiBlbGVtZW50IChkZWJvdW5jZXMgd2hpbGUgc2Nyb2xsaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2hvd19oZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFVJLmJvdF9uYXZfY29sbGFwc2UuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hvd1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19oZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLWhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJzaG93LWhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyX3RpbWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLWhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJzaG93LWhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKSwge3Bhc3NpdmU6IHRydWV9KTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGRlYm91bmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxfcHJvZ3Jlc3MoVUkuc2Nyb2xsX2luZGljYXRvcik7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDApLCB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgc2Nyb2xsX21vdmVkX2RlYm91bmNlX3dyYXBwZXIsICB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBzY3JvbGxfbW92ZWRfZGVib3VuY2Vfd3JhcHBlciwgIHtwYXNzaXZlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBzY3JvbGxfbW92ZWRfZGVib3VuY2Vfd3JhcHBlciwgIHtwYXNzaXZlOiB0cnVlfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzdGlja3lfaGVhZGVyX3Rocm90dGxlX3dyYXBwZXIsICB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBzdGlja3lfaGVhZGVyX3Rocm90dGxlX3dyYXBwZXIsICB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgc3RpY2t5X2hlYWRlcl90aHJvdHRsZV93cmFwcGVyLCAge3Bhc3NpdmU6IHRydWV9KTtcclxuICAgICAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgICAgIC8vQWRkIGFjdGl2ZS1saXN0IGNsYXNzIHRvIGFjdGl2ZSBsaW5rIHRvIHdvcmsgd2l0aCBDU1MgOjpiZWZvcmUgYW5kIDo6YWZ0ZXIgc2V0dGluZ3MgKGRvZXMgbm90IHdvcmsgd2VsbCB3aXRoIGFuaW1hdGlvbnMgZm9yIGRyb3Bkb3duIHdoZW4gYWN0aXZlIGlzIHNldCB0byB0aGUgbGluayBpdHNlbGYpXHJcbiAgICAgICAgICAgIC8qVUkuYWN0aXZlX2xpc3RzLmZvckVhY2gobGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYobGkuY2hpbGRyZW5bMF0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiYWN0aXZlXCIpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtbGlzdFwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmUtbGlzdFwiKTsgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgICAgICAgLyoqKiBIT01FIFNFQ1RJT04gKioqL1xyXG5cclxuICAgICAgICAgICAgLy8gQW5pbWF0ZSBcIkRldmVsb3BlciBQb3J0Zm9saW9cIlxyXG4gICAgICAgICAgICBVSS5hbmltYXRlX2xldHRlcnMoKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiogQUJPVVQgTUUgU0VDVElPTiAqKiovXHJcblxyXG4gICAgICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IGFkanVzdCBteSBhZ2UgaW4gYmlvIGJhc2VkIG9uIGRhdGVcclxuICAgICAgICAgICAgVUkubXlfYWdlLmlubmVySFRNTCA9IGNhbGN1bGF0ZV9hZ2UoKTsgXHJcblxyXG4gICAgICAgICAgICAvLyBBZGRzIGEgZmFkZSBpbiBhbmQgb3V0IGVmZmVjdCB3aGVuIGNsaWNraW5nIHRoZSBidXR0b24gaW4gbXkgYmlvXHJcbiAgICAgICAgICAgIFVJLnN1bW1hcnlfYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgVUkuY2hhbmdlX2Fib3V0X2luZm8oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvKioqIE1ZIFNFUlZJQ0VTIFNFQ1RJT04gKioqL1xyXG5cclxuICAgICAgICAgICAgbGV0IG15X2Nhcm91c2VsX2J0bl9jbGljayA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hhbmdlcyBjYXJvdXNlbCBob3Jpem9udGFsIHNjcm9sbCBhbW91bnQgZGVwZW5kaW5nIG9uIHRoZSBzY3JlZW4gc2l6ZVxyXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgc2Nyb2xsX2FtdCA9IDM2MDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1xX2xpbWl0cyA9IFtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDMyMC45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDMyMXB4KSBhbmQgKG1heC13aWR0aDogNTc1Ljk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogNTc2cHgpIGFuZCAobWF4LXdpZHRoOiA3NjcuOThweClcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MS45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDk5MnB4KSBhbmQgKG1heC13aWR0aDogMTE5OS45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDEyMDBweCkgYW5kIChtYXgtd2lkdGg6IDEzOTkuOThweClcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiAxNDAwcHgpXCIpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjcm9sbF9hbXRfbW9kaWZpZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1swXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDI3NDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMV0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbF9hbXQgPSAyOTY7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1syXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDM2MDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbM10sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbF9hbXQgPSA2NTYvMjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbNF0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbF9hbXQgPSA3MjAvMjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbNV0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbF9hbXQgPSA5ODAvMztcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbNl0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbF9hbXQgPSAxMDgwLzM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbF9hbXRfbW9kaWZpZXIoKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRlYm91bmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxfYW10X21vZGlmaWVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkubXlfY2Fyb3VzZWxfY29udGVudC5zY3JvbGxMZWZ0ID0gMDtcclxuICAgICAgICAgICAgICAgIH0sIDUwMCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLm15X2Nhcm91c2VsX3ByZXZfYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aHJvdHRsZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2dlcihzY3JvbGxfYW10KTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5ncm93X2J0bl9vbmNsaWNrKFVJLm15X2Nhcm91c2VsX3ByZXZfYnRuLCAxLjI1LCAyNTApO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLnNjcm9sbF9ob3Jpem9udGFsbHkoVUkubXlfY2Fyb3VzZWxfY29udGVudCwgLXNjcm9sbF9hbXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLnNjcm9sbF9lbmQoVUkubXlfY2Fyb3VzZWxfY29udGVudCwgMjApO1xyXG4gICAgICAgICAgICAgICAgfSwgNzAwKSk7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIFVJLm15X2Nhcm91c2VsX25leHRfYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aHJvdHRsZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2dlcihzY3JvbGxfYW10KTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5ncm93X2J0bl9vbmNsaWNrKFVJLm15X2Nhcm91c2VsX25leHRfYnRuLCAxLjI1LCAyNTApO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLnNjcm9sbF9ob3Jpem9udGFsbHkoVUkubXlfY2Fyb3VzZWxfY29udGVudCwgc2Nyb2xsX2FtdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuc2Nyb2xsX3N0YXJ0KFVJLm15X2Nhcm91c2VsX2NvbnRlbnQsIDIwKTtcclxuICAgICAgICAgICAgICAgIH0sIDcwMCkpO1xyXG4gICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAgICAgLyoqKiBUT09MUyAmIFRFQ0hOT0xPR0lFUyBTRUNUSU9OICoqKi9cclxuXHJcbiAgICAgICAgICAgIC8qKiBUYWcgQ2xvdWQgKiovXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFnY2xvdWRfcmFkaXVzO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1xX2xpbWl0cyA9IFtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDMyMC45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDMyMXB4KSBhbmQgKG1heC13aWR0aDogNTc1Ljk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogNTc2cHgpIGFuZCAobWF4LXdpZHRoOiA3NjcuOThweClcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtd2lkdGg6IDk5MS45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDk5MnB4KVwiKVxyXG4gICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWdjbG91ZF9yZXNpemVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMF0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ2Nsb3VkX3JhZGl1cyA9IDE0MDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTsgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzFdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWdjbG91ZF9yYWRpdXMgPSAxNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7IFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1syXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFnY2xvdWRfcmFkaXVzID0gMjUwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpOyBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbM10sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ2Nsb3VkX3JhZGl1cyA9IDMwMDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTsgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzRdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWdjbG91ZF9yYWRpdXMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7IFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB0YWdjbG91ZF9yZXNpemVyKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFnQ2xvdWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFnY2xvdWRfbG9hZGVyID0gZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIERlZmluZSB0YWdzIGluIGpzIGFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG15VGFncyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ09PUCcsICdTT0MgLyBNVkMnLCAnUkVTVC1BUElzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0RhdGEtU3RydWN0dXJlcycsICdDb250aW51b3VzLUludGVncmF0aW9uJywgJ1VJIC8gVVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnVGVzdGluZycsICdWZXJzaW9uLUNvbnRyb2wnLCAnRGVidWdnaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FsZ29yaXRobXMnLCAnQXBwLURldmVsb3BtZW50JywgJ1Jlc3BvbnNpdmUtRGVzaWduJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdTZWN1cml0eScsICdPcHRpbWl6YXRpb24nLCAnQ3VzdG9tZXItU2VydmljZScsXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVuZGVyIGEgZGVmYXVsdCB0YWcgY2xvdWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBsZXQgdGFnQ2xvdWQgPSBUYWdDbG91ZCgnLnRhZy1jbG91ZC1jb250ZW50JywgbXlUYWdzKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDb25maWcgdGFnIGNsb3VkIGJ5IG92ZXJyaWRpbmcgZGVmYXVsdCBwYXJhbWV0ZXJzIGJlbG93XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhZ0Nsb3VkID0gVGFnQ2xvdWQoJy50YWctY2xvdWQtY29udGVudCcsIG15VGFncywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByYWRpdXMgaW4gcHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiB0YWdjbG91ZF9yYWRpdXMgPz8gMzQwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmltYXRpb24gc3BlZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2xvdywgbm9ybWFsLCBmYXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFNwZWVkOiAnZmFzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRTcGVlZDogJ3Nsb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwID0gdG9wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDkwID0gbGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxMzUgPSByaWdodC1ib3R0b21cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxMzUsICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludGVyYWN0IHdpdGggY3Vyc29yIG1vdmUgb24gbW91c2Ugb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlZXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRhZ0Nsb3VkKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbW9yZSB0YWdzIHRvIGV4aXN0aW5nIHRhZyBjbG91ZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG15VGFncyA9IG15VGFncy5jb25jYXQoW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhZ0Nsb3VkLnVwZGF0ZShteVRhZ3MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdjbG91ZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFnY2xvdWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnY2xvdWRfaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhZ2Nsb3VkLS1pdGVtXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSYW5kb21pemVzIHRhZyB3b3JkIGNvbG91cnMgYW5kIGFkZHMgZWZmZWN0cyBvbiBjbGlja1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZ2Nsb3VkX2l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuY29sb3IgPSBnZW5lcmF0ZV9kYXJrX2NvbG9yX2hleCgpOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsaWNrZWRfb25jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xpY2tlZF90d2ljZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PnsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tlZF9vbmNlICYmIGNsaWNrZWRfdHdpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmZvbnRTaXplID0gXCIwXCI7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuY29sb3IgPSBnZW5lcmF0ZV9kYXJrX2NvbG9yX2hleCgpOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5mb250U2l6ZSA9IFwiaW5pdGlhbFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmZvbnRXZWlnaHQgPSBcIjQwMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlja2VkX29uY2UgPSBmYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWRfdHdpY2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xpY2tlZF9vbmNlICYmICFjbGlja2VkX3R3aWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5jb2xvciA9IFwidmFyKC0tdGhlbWUtY29sb3VyLTQpXCI7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXRlbS5zdHlsZS5mb250U2l6ZSA9IFwiMS41cmVtXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5mb250U2l6ZSA9IFwiMTQwJVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWRfdHdpY2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmNvbG9yID0gXCJ2YXIoLS10aGVtZS1jb2xvdXItMSlcIjsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pdGVtLnN0eWxlLmZvbnRTaXplID0gXCIxLjNyZW1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2l0ZW0uc3R5bGUuZm9udFdlaWdodCA9IFwiOTAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5mb250U2l6ZSA9IFwiMTIwJVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWRfb25jZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsgXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIERlbGF5IGxvYWRpbmcgb2YgdGFnIGNsb3VkXHJcbiAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgMzEwMCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gaW1wb3J0KFwiLi9CdXNpbmVzc19Mb2dpYy9UYWdDbG91ZC5taW4uanNcIikpXHJcbiAgICAgICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnY2xvdWRfbG9hZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXRzIGFuZCByZXNpemVzIHRhZyBjbG91ZCBmb3IgZGlmZmVyZW50IHNjcmVlbiBzaXplc1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGRlYm91bmNlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdjbG91ZF9yZXNpemVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhZ2Nsb3VkXCIpKSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhZ2Nsb3VkXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdjbG91ZF9sb2FkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA1MDApKTsgXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gaW1wb3J0IFRhZ0Nsb3VkIG1vZHVsZTogXCIsIGVycikpO1xyXG4gICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gRGlzcGxheSBzdGFyIHJhdGluZyBmb3IgZWFjaCB0b29sIC8gdGVjaG5vbG9neSBiYXNlZCBvbiBza2lsbCBsZXZlbCBcclxuICAgICAgICAgICAgVUkucG9wdWxhdGVfc2tpbGxfcmF0aW5nKChuZXcgU2tpbGxfUmF0aW5nKSk7XHJcblxyXG4gICAgICAgICAgICAvKioqIFBST0pFQ1RTIFNFQ1RJT04gKioqL1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIFByb2plY3RzXHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50X3Byb2plY3QgPSB7fTtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdfaW5uZXJfaHRtbCA9IGBgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGV2X3Byb2plY3RfY2Fyb3VzZWwgPSBuZXcgYm9vdHN0cmFwLkNhcm91c2VsKFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsLCB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogNTAwMCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFkZHMgYW4gaW5kaWNhdG9yIGJ1dHRvbiwgYWxvbmcgd2l0aCBhdHRyaWJ1dGVzIHBlciBpbWFnZSBhbmQgc2V0cyBhY3RpdmUgY2xhc3MgdG8gZmlyc3Qgc2xpZGVcclxuICAgICAgICAgICAgICAgIC8vIEFjY2VwdHMgYSBzaW5nbGUgcGFyYW1ldGVyIHdpdGggdmFsdWVzIFwiZGV2XCIgb3IgXCJjbGllbnRcIlxyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdWxhdGVfY2Fyb3VzZWxfaW5kaWNhdG9ycyA9IGZ1bmN0aW9uKHByb2pfdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdC5jYXJvdXNlbF9pbWdfbGlzdC5zcmNzLmZvckVhY2goKGluZGljYXRvciwgaW5kZXgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImJ1dHRvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnNldEF0dHJpYnV0ZShcImRhdGEtYnMtdGFyZ2V0XCIsIFwiI2Rldi1wcm9qZWN0LWNhcm91c2VsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIGJ0bi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIsIFwiYnRuXCIpLCBidG4uc2V0QXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBidG4uY2xhc3NMaXN0LmFkZChcImJ0blwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnRuLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgYFNsaWRlICR7aW5kZXgrMX1gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0byBkZXYgb3IgY2xpZW50IHByb2plY3QgZGVwZW5kaW5nIG9uIHBhcmFtZXRlciBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2pfdHlwZSA9PT0gXCJkZXZcIi50b0xvd2VyQ2FzZSgpKSBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbi5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9qX3R5cGUgPT09IFwiY2xpZW50XCIudG9Mb3dlckNhc2UoKSkgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5kaWNhdG9yX3NlY3Rpb24uYXBwZW5kQ2hpbGQoYnRuKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkcyBlYWNoIGltYWdlIGFsb25nIHdpdGggYXR0cmlidXRlcywgdG8gdGhlIGNhcm91c2VsIHNsaWRlc2hvd1xyXG4gICAgICAgICAgICAgICAgLy8gQWNjZXB0cyBhIHNpbmdsZSBwYXJhbWV0ZXIgd2l0aCB2YWx1ZXMgXCJkZXZcIiBvciBcImNsaWVudFwiXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3B1bGF0ZV9jYXJvdXNlbF9pbWdfZGF0YSA9IGZ1bmN0aW9uKHByb2pfdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdC5jYXJvdXNlbF9pbWdfbGlzdC5zcmNzLmZvckVhY2goKHNyYywgaW5kZXgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSBkaXYuY2xhc3NMaXN0LmFkZChcImNhcm91c2VsLWl0ZW1cIiwgXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZGl2LmNsYXNzTGlzdC5hZGQoXCJjYXJvdXNlbC1pdGVtXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwibG9hZGluZ1wiLCBcImxhenlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5jbGFzc0xpc3QuYWRkKFwiZC1ibG9ja1wiLCBcInctMTAwXCIsIFwicC0zXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgKGN1cnJlbnRfcHJvamVjdC5jYXJvdXNlbF9pbWdfbGlzdC5hbHRzW2luZGV4XSB8fCBcIk15IHByb2plY3QgY2Fyb3VzZWwgaW1hZ2VcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCI2MjVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCI1MDBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbWcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRvIGRldiBvciBjbGllbnQgcHJvamVjdCBkZXBlbmRpbmcgb24gcGFyYW1ldGVyIHNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJval90eXBlID09PSBcImRldlwiLnRvTG93ZXJDYXNlKCkpIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb24uYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJval90eXBlID09PSBcImNsaWVudFwiLnRvTG93ZXJDYXNlKCkpIFVJLmNsaWVudF9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb24uYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkcyBub3RlcyB0byBwcm9qZWN0IG92ZXJ2aWV3XHJcbiAgICAgICAgICAgICAgICAvLyBBY2NlcHRzIGEgc2luZ2xlIHBhcmFtZXRlciB3aXRoIHZhbHVlcyBcImRldlwiIG9yIFwiY2xpZW50XCJcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVsYXRlX3Byb2plY3Rfbm90ZXMgPSBmdW5jdGlvbihwcm9qX3R5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3Byb2plY3Qubm90ZXMuZm9yRWFjaCgobm90ZSwgaW5kZXgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmlubmVySFRNTCA9IG5vdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gY3VycmVudF9wcm9qZWN0Lm5vdGVzLmxlbmd0aCAtIDEpIGxpc3QuY2xhc3NMaXN0LmFkZChcImZ3LWJvbGRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdG8gZGV2IG9yIGNsaWVudCBwcm9qZWN0IGRlcGVuZGluZyBvbiBwYXJhbWV0ZXIgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9qX3R5cGUgPT09IFwiZGV2XCIudG9Mb3dlckNhc2UoKSkgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfbm90ZV9zZWN0aW9uLmFwcGVuZENoaWxkKGxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9qX3R5cGUgPT09IFwiY2xpZW50XCIudG9Mb3dlckNhc2UoKSkgVUkuY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfbm90ZV9zZWN0aW9uLmFwcGVuZENoaWxkKGxpc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGRzIGVhY2ggdG9vbCAvIHRlY2hub2xvZ3kgaWNvbiB0byB0aGUgZW5kIG9mIHRoZSBwcm9qZWN0IG92ZXJ2aWV3XHJcbiAgICAgICAgICAgICAgICAvLyBBY2NlcHRzIGEgc2luZ2xlIHBhcmFtZXRlciB3aXRoIHZhbHVlcyBcImRldlwiIG9yIFwiY2xpZW50XCJcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVsYXRlX3Byb2plY3RfdG9vbF9pY29ucyA9IGZ1bmN0aW9uKHByb2pfdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdC50b29sX2ljb25fbGlzdC5zcmNzLmZvckVhY2goKHNyYywgaW5kZXgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcImxvYWRpbmdcIiwgXCJsYXp5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZChcImltZy1mbHVpZFwiLCBcImljb24tZGlzcC1pbWctbGdcIiwgXCJtLTNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5pZCA9IGN1cnJlbnRfcHJvamVjdC50b29sX2ljb25fbGlzdC5pZHNbaW5kZXhdIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcImFsdFwiLCAoY3VycmVudF9wcm9qZWN0LnRvb2xfaWNvbl9saXN0LmFsdHNbaW5kZXhdIHx8IFwiVG9vbCBhbmQgVGVjaG5vbG9neSBJY29uIEJhZGdlXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiODVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCI2NFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0byBkZXYgb3IgY2xpZW50IHByb2plY3QgZGVwZW5kaW5nIG9uIHBhcmFtZXRlciBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2pfdHlwZSA9PT0gXCJkZXZcIi50b0xvd2VyQ2FzZSgpKSBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pY29uX3NlY3Rpb24uYXBwZW5kQ2hpbGQoaW1nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJval90eXBlID09PSBcImNsaWVudFwiLnRvTG93ZXJDYXNlKCkpIFVJLmNsaWVudF9wcm9qZWN0X2Nhcm91c2VsX2ljb25fc2VjdGlvbi5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VfcHJvamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19pbm5lcl9odG1sID0gYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC1yb3cgcm93IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBjb2wteGwtNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJkZXYtcHJvamVjdC1jYXJvdXNlbFwiIGNsYXNzPVwiY2Fyb3VzZWwgc2xpZGVcIiBkYXRhLWJzLXJpZGU9XCJjYXJvdXNlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtaW5kaWNhdG9yc1wiIGlkPVwiZGV2LXByb2plY3QtY2Fyb3VzZWwtaW5kaWNhdG9yc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWlubmVyXCIgaWQ9XCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbm5lclwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2Fyb3VzZWwtY29udHJvbC1wcmV2IGJ0biBoLTUwIG0tYXV0b1wiIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRhcmdldD1cIiNkZXYtcHJvamVjdC1jYXJvdXNlbFwiIGRhdGEtYnMtc2xpZGU9XCJwcmV2XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2aXN1YWxseS1oaWRkZW5cIj5QcmV2aW91czwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhcm91c2VsLWNvbnRyb2wtbmV4dCBidG4gaC01MCBtLWF1dG9cIiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1icy10YXJnZXQ9XCIjZGV2LXByb2plY3QtY2Fyb3VzZWxcIiBkYXRhLWJzLXNsaWRlPVwibmV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJvdXNlbC1jb250cm9sLW5leHQtaWNvblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvc3Bhbj5cclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmlzdWFsbHktaGlkZGVuXCI+TmV4dDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWN1c3RvbS0yIG15LTUgZC1ibG9jayBteC1hdXRvIHctYXV0byBidG4tYW5pbVwiIGRhdGEtaWQ9XCJkZXYtcHJvamVjdC1nYWxsZXJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1hcnJvdy1hbHQtY2lyY2xlLXVwXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJ0bi10ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXR1cm4gdG8gR2FsbGVyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIGNvbC14bC02XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keSBweS01XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRleHQtY2VudGVyXCI+JHtjdXJyZW50X3Byb2plY3QubmFtZX08L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2N1cnJlbnRfcHJvamVjdC5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxicj48c3Ryb25nPlN0YXR1czogJHtjdXJyZW50X3Byb2plY3Quc3RhdHVzLm1zZ30gPHNwYW4gY2xhc3M9XCIke2N1cnJlbnRfcHJvamVjdC5zdGF0dXMuY2xhc3NfY29kZX0gc3RhdHVzLWNpcmNsZVwiPjwvc3Bhbj48L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0ke2N1cnJlbnRfcHJvamVjdC5saW5rfSBjbGFzcz1cImZzLTUgdGV4dC1yZXNldCB0ZXh0LWRlY29yYXRpb24tbm9uZSBhbmltLWxpbmstMiB3LWF1dG9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiPjxzdHJvbmcgY2xhc3M9XCJ0ZXh0LWN1c3RvbS0yXCI+PGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+ICR7Y3VycmVudF9wcm9qZWN0LmxpbmtfaGVhZGVyfTwvc3Ryb25nPiBOb3cgJHtjdXJyZW50X3Byb2plY3QubGlua19ub3RlfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxhIGhyZWY9JHtjdXJyZW50X3Byb2plY3QuZ2l0aHViX2xpbmt9IGNsYXNzPVwiZnMtNSB0ZXh0LXJlc2V0IHRleHQtZGVjb3JhdGlvbi1ub25lIGFuaW0tbGluay0yIHctYXV0b1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCI+PHN0cm9uZyBjbGFzcz1cInRleHQtY3VzdG9tLTFcIj48aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT4gUmV2aWV3PC9zdHJvbmc+IENvZGUgJHtjdXJyZW50X3Byb2plY3QuZ2l0aHViX3JlYWRtZX08L2E+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJzbWFsbCB0ZXh0LWxlZnQgbXQtM1wiPk5vdGVzOjwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInRleHQtd3JhcFwiIGlkPVwiZGV2LXByb2plY3QtY2Fyb3VzZWwtbm90ZXNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPiAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJzbWFsbCBtdC0zXCI+LSBCdWlsdCBVc2luZyAtPC9oMz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLXJvdy1zbSBtYi0zXCIgaWQ9XCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pY29uLXNlY3Rpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1jdXN0b20tMiBteS01IGQtYmxvY2sgbXgtYXV0byB3LWF1dG8gYnRuLWFuaW0gZC14bC1ub25lXCIgZGF0YS1pZD1cImRldi1wcm9qZWN0LWdhbGxlcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWFsdC1jaXJjbGUtdXBcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYnRuLXRleHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJldHVybiB0byBHYWxsZXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICBgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlaW5pdGlhbGl6ZV9lbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlLWRlY2xhcmUgKHVwZGF0ZSkgZG9jdW1lbnQgSURzIG9uIG5ldyBpbm5lciBodG1sXHJcbiAgICAgICAgICAgICAgICAgICAgVUkucmV0dXJuX3RvX2Rldl9nYWxsZXJ5X2J0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtaWQ9J2Rldi1wcm9qZWN0LWdhbGxlcnknXVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtY2Fyb3VzZWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5kaWNhdG9yX3NlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRldi1wcm9qZWN0LWNhcm91c2VsLWluZGljYXRvcnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtY2Fyb3VzZWwtaW5uZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfbm90ZV9zZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1ub3Rlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pY29uX3NlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRldi1wcm9qZWN0LWNhcm91c2VsLWljb24tc2VjdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZV9jYXJvdXNlbF9pbWdfZGF0YShcImRldlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZV9jYXJvdXNlbF9pbmRpY2F0b3JzKFwiZGV2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlX3Byb2plY3Rfbm90ZXMoXCJkZXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGVfcHJvamVjdF90b29sX2ljb25zKFwiZGV2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJuZXcgaW5kaWNhdG9yc1wiLCBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbiwgXCJuZXcgaW5uZXJcIiwgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXZfcHJvamVjdF9jYXJvdXNlbDtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnbG9hZCcpKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWxpZW4gTWF0aHZhc2lvbiBQcm9qZWN0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBBbGllbl9NYXRodmFzaW9uID0gbmV3IFByb2plY3QoXCJBbGllbiBNYXRodmFzaW9uIEdhbWVcIiwgMiwgXCJodHRwczovL2Rub2VsbWF0aGludmFzaW9uZ2FtZS5uZXRsaWZ5LmFwcC9odG1sL2dhbWVzY3JlZW4uaHRtbFwiLCBcIlBsYXlcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vRE5vZWwyNi9BbGllbl9NYXRodmFzaW9uXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgQWxpZW5fTWF0aHZhc2lvbi5kZXNjcmlwdGlvbiA9IGBUaGlzIHByb2plY3Qgd2FzIGRlc2lnbmVkIGZvciBjaGlsZHJlbiBhZ2VzIDgrIHdpdGggdGhlIGdvYWwgb2YgbWFraW5nIG1hdGggZnVuIGFuZCBlbmdhZ2luZy4gSXQgd2FzIGJ1aWx0IGZyb20gc2NyYXRjaCB3aXRob3V0IGFueSBmcmFtZXdvcmtzLCBsaWJyYXJpZXMgb3IgZGVwZW5kZW5jaWVzIHVzaW5nIE9PUCBhbmQgU09DIHByaW5jaXBsZXMsIGFuZCB3aXRoIHRoZSBcclxuICAgICAgICAgICAgICAgICAgICBpbnRlbnRpb24gb2YgbWFraW5nIGNvZGUgRFJZIGFuZCBlYXNpZXIgdG8gbWFpbnRhaW4uIFV0aWxpemVzIGhlYXZ5IEphdmFTY3JpcHQgYW5kIERPTSBtYW5pcHVsYXRpb24uIFVzZXMgcHJvbWlzZXMgaW5zdGVhZCBvZiB3aGlsZSBsb29wcyB0byB0cmFjayBwcm9ncmVzcy4gVmlzdWFsIGRlc2lnbiBpcyBiYXNlZCBvbiByZXRybyBhcmNhZGUgU2hvb3QtZW0gVXAgZ2FtZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgR29vZCBsdWNrIHN1cnZpdmluZyB0aGUgaGFyZGVzdCBkaWZmaWN1bHR5IVxyXG4gICAgICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgICAgIEFsaWVuX01hdGh2YXNpb24ubGlua19ub3RlID0gXCIoZXhwZWN0IGF1ZGlvIC0gZGVza3RvcCB2ZXJzaW9uIG9ubHkhKVwiO1xyXG4gICAgICAgICAgICAgICAgQWxpZW5fTWF0aHZhc2lvbi5ub3Rlcy5wdXNoKGBHYW1lcGxheSB3b3JrcyBjb21wbGV0ZWx5IGJ1dCB0aGVyZSBhcmUgc29tZSBtaW5vciBidWdzIHRvIGZpeCwgbWFpbmx5IGluIHRoZSBhcmVhcyBvZiBVSS9VWC4gVmVyeSByYXJlbHksIGdhbWUgZG9lcyBub3QgbG9hZCB3aGVuIGRpZmZpY3VsdHkgaXMgc2VsZWN0ZWQuIFNpbXBseSByZWZyZXNoIHRoZSBicm93c2VyIGFuZCB0cnkgYWdhaW4uYCk7XHJcbiAgICAgICAgICAgICAgICBBbGllbl9NYXRodmFzaW9uLm5vdGVzLnB1c2goYFNvbWUgZmVhdHVyZXMgYXJlIG1pc3Npbmcgc3VjaCBhcyBwbGF5ZXIgZW50ZXJlZCBkZXRhaWxzLCBkYXRhIHBlcnNpc3RlbmNlLCBzZXR0aW5nczsgdG8gYmUgaW1wbGVtZW50ZWQgYXQgYSBsYXRlciBkYXRlLmApO1xyXG4gICAgICAgICAgICAgICAgQWxpZW5fTWF0aHZhc2lvbi5ub3Rlcy5wdXNoKGBVc2UgR29vZ2xlIENocm9tZSBmb3IgdGhlIGJlc3QgZXhwZXJpZW5jZS4gTm90IHlldCBmdWxseSByZXNwb25zaXZlIG9uIHNtYWxsZXIgZGV2aWNlcyFgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWVuX21fY2Fyb3VzZWxfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxpZW5fbV9jYXJvdXNlbF9pbWdfc3JjcyA9IFtcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2FsaWVuLW1hdGh2YXNpb24tMS1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2FsaWVuLW1hdGh2YXNpb24tMi1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2FsaWVuLW1hdGh2YXNpb24tMy1taW4ud2VicFwiXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWVuX21fY2Fyb3VzZWxfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWVuX21fdG9vbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbGllbl9tX3Rvb2xfaW1nX3NyY3MgPSBbXCIuL2ltZy9sb2dvcy9odG1sNS1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvY3NzMy1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvamF2YXNjcmlwdC1iYWRnZS53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxpZW5fbV90b29sX2ltZ19hbHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBBbGllbl9NYXRodmFzaW9uLmFkZF9pbWdzKGFsaWVuX21fY2Fyb3VzZWxfaW1nX2lkcywgYWxpZW5fbV9jYXJvdXNlbF9pbWdfc3JjcywgYWxpZW5fbV9jYXJvdXNlbF9pbWdfYWx0cyk7XHJcbiAgICAgICAgICAgICAgICBBbGllbl9NYXRodmFzaW9uLmFkZF90b29sX2ljb25zKGFsaWVuX21fdG9vbF9pbWdfaWRzLCBhbGllbl9tX3Rvb2xfaW1nX3NyY3MsIGFsaWVuX21fdG9vbF9pbWdfYWx0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gV2l4IENsb25lIFByb2plY3RcclxuICAgICAgICAgICAgICAgIGNvbnN0IFdpeF9DbG9uZSA9IG5ldyBQcm9qZWN0KFwiV2l4IFNpdGUgQ2xvbmVcIiwgMSwgXCJodHRwczovL2Rub2VsbW90b3JjeWNsZXdpeGNsb25lLm5ldGxpZnkuYXBwL1wiLCBcIlZpZXdcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vRE5vZWwyNi9XaXhfTW90b3JjeWNsZV9UcmlhbFwiLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIFdpeF9DbG9uZS5kZXNjcmlwdGlvbiA9IGBUaGlzIHdhcyBteSBmaXJzdCBvZmZpY2lhbCBkZXZlbG9wbWVudCBwcm9qZWN0IGFuZCB3YXMgaW50ZW5kZWQgdG8gYmUgYSBwaXhlbCBmb3IgcGl4ZWwgY2xvbmUgb2ZcclxuICAgICAgICAgICAgICAgICAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cInRleHQtcmVzZXQgdGV4dC1kZWNvcmF0aW9uLW5vbmUgYW5pbS1saW5rLTNcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL3d3dy53aXguY29tL3dlYnNpdGUtdGVtcGxhdGUvdmlldy9odG1sLzc3Mz9zaXRlSWQ9MzI2NDdkODktMTQ2MC00MzI2LWIwODQtYTk1OGJmOTA3NjVkJm1ldGFTaXRlSWQ9MTI5OTA0YWQtMzA1MS04Yzg3LWY2OWYtMzFjZTc1MTY2ZjljJm9yaWdpblVybD1odHRwcyUzQSUyRiUyRnd3dy53aXguY29tJTJGd2Vic2l0ZSUyRnRlbXBsYXRlcyUzRmNyaXRlcmlhJTNEYXV0byZ0cENsaWNrPXZpZXdfYnV0dG9uXCI+YSBzZWxlY3RlZCwgb3JpZ2luYWwgV2l4IHNpdGU8L2E+LiBcclxuICAgICAgICAgICAgICAgICAgICBJdCB3YXMgYnVpbHQgdXNpbmcgSFRNTCwgQ1NTIGFuZCB3aXRob3V0IGFueSBKYXZhU2NyaXB0LiBcclxuICAgICAgICAgICAgICAgICAgICBTaG93Y2FzZXMgdGhlIGFiaWxpdHkgdG8gdGFrZSBhIGRlc2lnbiBhbmQgY29udmVydCBpdCBpbnRvIGEgZnVuY3Rpb25hbCB3ZWJwYWdlIG9yIHdlYnNpdGUuXHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgV2l4X0Nsb25lLmxpbmtfbm90ZSA9IFwiKHNlZSBsaW5rIHRvIGNsb25lZCBXaXggc2l0ZSBhYm92ZSlcIjtcclxuICAgICAgICAgICAgICAgIFdpeF9DbG9uZS5ub3Rlcy5wdXNoKGBPbmx5IDMgcGFnZXMgd2VyZSBjbG9uZWQgZm9yIHRoaXMgcHJvamVjdDogSG9tZSwgQWJvdXQgYW5kIENvbnRhY3QuYCk7XHJcbiAgICAgICAgICAgICAgICBXaXhfQ2xvbmUubm90ZXMucHVzaChgV2Vic2l0ZSBpcyBmdWxseSByZXNwb25zaXZlIGZvciBhbGwgZGV2aWNlcyFgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpeF9jX2Nhcm91c2VsX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpeF9jX2Nhcm91c2VsX2ltZ19zcmNzID0gW1wiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vd2l4LWNsb25lLTEtbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi93aXgtY2xvbmUtMi1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL3dpeC1jbG9uZS0zLW1pbi53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2l4X2NfY2Fyb3VzZWxfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpeF9jX3Rvb2xfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2l4X2NfdG9vbF9pbWdfc3JjcyA9IFtcIi4vaW1nL2xvZ29zL2h0bWw1LWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9jc3MzLWJhZGdlLndlYnBcIl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3aXhfY190b29sX2ltZ19hbHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBXaXhfQ2xvbmUuYWRkX2ltZ3Mod2l4X2NfY2Fyb3VzZWxfaW1nX2lkcywgd2l4X2NfY2Fyb3VzZWxfaW1nX3NyY3MsIHdpeF9jX2Nhcm91c2VsX2ltZ19hbHRzKTtcclxuICAgICAgICAgICAgICAgIFdpeF9DbG9uZS5hZGRfdG9vbF9pY29ucyh3aXhfY190b29sX2ltZ19pZHMsIHdpeF9jX3Rvb2xfaW1nX3NyY3MsIHdpeF9jX3Rvb2xfaW1nX2FsdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEN5YmVyZGlzZSBPbmxpbmUgU3RvcmUgUHJvamVjdFxyXG4gICAgICAgICAgICAgICAgY29uc3QgQ3liZXJkaXNlID0gbmV3IFByb2plY3QoXCJDeWJlcmRpc2UgT25saW5lIFN0b3JlXCIsIDIsIFwiaHR0cHM6Ly9kbm9lbGN5YmVyZGlzZS5oZXJva3VhcHAuY29tL1wiLCBcIkludGVyYWN0XCIsIFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL0ROb2VsMjYvQ3liZXJkaXNlLUR5bmFtaWMtXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgQ3liZXJkaXNlLmRlc2NyaXB0aW9uID0gYFRoaXMgcHJvamVjdCB3YXMgbXkgZmlyc3Qgb2ZmaWNpYWwgRnVsbCBTdGFjayBkZXZlbG9wbWVudCBwcm9qZWN0IGFuZCBlbmQtdG8tZW5kIEMuUi5VLkQuIGFwcGxpY2F0aW9uLCBhbmQgd2FzIGRlc2lnbmVkIHRvIHRlc3QgZXZlcnl0aGluZyBJIGhhZCBsZWFybmVkIChhbmQgbW9yZSkuIFRoaXMgb25saW5lIHN0b3JlIHdhcyBidWlsdCBmcm9tIHNjcmF0Y2ggdXNpbmcgTVZDIHByaW5jaXBsZXMgZm9yIHRoZSBCYWNrIEVuZCBjb2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIFRoZSBkYXRhYmFzZSB3YXMgZGVzaWduZWQsIG5vcm1hbGl6ZWQgYW5kIGNyZWF0ZWQgaW4gTXlTUUwuIFRoZXJlIGFyZSBib3RoIGN1c3RvbWVyIGFuZCBlbXBsb3llZSBmdW5jdGlvbmFsaXRpZXMgdG8gZXhwZXJpbWVudCB3aXRoLiBGZWF0dXJlcyBzdWNoIGFzIFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb24sIGF1dGhlbnRpY2F0aW9uLCBwYWdlIHByb3RlY3Rpb24sIHNlc3Npb24gc3RvcmFnZSwgcGFnaW5hdGlvbiwgbXVsdGlwbGUgcXVlcmllcyBwZXIgZGF0YWJhc2UgY2FsbCwgZGF0YWJhc2UgdHJhbnNhY3Rpb25zLCBwcm9kdWN0IHRyYWNraW5nLCBwcm9kdWN0IHJlc3RvY2tpbmcsIGFkZCB0byBjYXJ0LCBwYXltZW50IHByb2Nlc3NpbmcgdXNpbmcgYSBtb2RpZmllZCBQYXlQYWwgU0RLLCB0byBuYW1lIGEgZmV3LCB3ZXJlIGFsbCBidWlsdCBmcm9tIHRoZSBncm91bmQgdXAgYW5kIGltcGxlbWVudGVkIGluIHRoaXMgc2l0ZS5cclxuICAgICAgICAgICAgICAgICAgICBDaGVjayBpdCBvdXQgYW5kIGxldCBtZSBrbm93IHdoYXQgeW91IHRoaW5rISBQbGVhc2UgdXNlIG9ubHkgRkFLRSBDUkVERU5USUFMUyBpZiBjcmVhdGluZyBhIGN1c3RvbWVyIGFjY291bnQgdG8gbG9naW4uIFNlZSBteSBHaXRIdWIgcmVhZG1lIGZvciBpbnN0cnVjdGlvbnMgb24gaG93IHRvIGxvZyBpbiBhcyBhbiBlbXBsb3llZSB0byBzdG9jaywgcmUtc3RvY2sgYW5kL29yIG1vZGlmeSBwcm9kdWN0IGRhdGEgZXRjLiBcclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICBDeWJlcmRpc2UubGlua19ub3RlID0gXCIoZmFrZSBjcmVkZW50aWFscyBvbmx5IC0gZGVza3RvcCB2ZXJzaW9uIG9ubHkhKVwiO1xyXG4gICAgICAgICAgICAgICAgQ3liZXJkaXNlLm5vdGVzLnB1c2goYE1vc3Qgb3RoZXIgbWFqb3IgZmVhdHVyZXMgYXJlIHdvcmtpbmcgYXMgZXhwZWN0ZWQuIFNlYXJjaCBmdW5jdGlvbmFsaXR5IG5vdCBpbXBsZW1lbnRlZCBqdXN0IHlldC5gKTtcclxuICAgICAgICAgICAgICAgIEN5YmVyZGlzZS5ub3Rlcy5wdXNoKGBTb21lIFVJIGVsZW1lbnRzIGFyZSBpbmNvbXBsZXRlL21pc3NpbmcuYCk7XHJcbiAgICAgICAgICAgICAgICBDeWJlcmRpc2Uubm90ZXMucHVzaChgTm90IHlldCBmdWxseSByZXNwb25zaXZlIG9uIHNtYWxsZXIgZGV2aWNlcyFgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN5YmVyZGlzZV9jYXJvdXNlbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjeWJlcmRpc2VfY2Fyb3VzZWxfaW1nX3NyY3MgPSBbXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9jeWJlcmRpc2Utb25saW5lLXN0b3JlLTEtbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9jeWJlcmRpc2Utb25saW5lLXN0b3JlLTItbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9jeWJlcmRpc2Utb25saW5lLXN0b3JlLTMtbWluLndlYnBcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9jeWJlcmRpc2Utb25saW5lLXN0b3JlLTQtbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9jeWJlcmRpc2Utb25saW5lLXN0b3JlLTUtbWluLndlYnBcIlxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN5YmVyZGlzZV9jYXJvdXNlbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3liZXJkaXNlX3Rvb2xfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3liZXJkaXNlX3Rvb2xfaW1nX3NyY3MgPSBbXCIuL2ltZy9sb2dvcy9odG1sNS1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvY3NzMy1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvamF2YXNjcmlwdC1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvaGFuZGxlYmFycy1iYWRnZS53ZWJwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIvaW1nL2xvZ29zL215c3FsLWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9ub2RlanMtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL2V4cHJlc3MtbG9nby53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvcG9zdG1hbi1iYWRnZS53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3liZXJkaXNlX3Rvb2xfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIEN5YmVyZGlzZS5hZGRfaW1ncyhjeWJlcmRpc2VfY2Fyb3VzZWxfaW1nX2lkcywgY3liZXJkaXNlX2Nhcm91c2VsX2ltZ19zcmNzLCBjeWJlcmRpc2VfY2Fyb3VzZWxfaW1nX2FsdHMpO1xyXG4gICAgICAgICAgICAgICAgQ3liZXJkaXNlLmFkZF90b29sX2ljb25zKGN5YmVyZGlzZV90b29sX2ltZ19pZHMsIGN5YmVyZGlzZV90b29sX2ltZ19zcmNzLCBjeWJlcmRpc2VfdG9vbF9pbWdfYWx0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTW92aWUgRGF0YWJhc2UgUHJvamVjdFxyXG4gICAgICAgICAgICAgICAgY29uc3QgTW92aWVfRGF0YWJhc2UgPSBuZXcgUHJvamVjdChcIk1vdmllIERhdGFiYXNlXCIsIDIsIFwiaHR0cHM6Ly9kbm9lbG1vdmllYXBpZGF0YWJhc2UubmV0bGlmeS5hcHAvXCIsIFwiVmlld1wiLCBcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9ETm9lbDI2L01vdmllX0RhdGFiYXNlXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgTW92aWVfRGF0YWJhc2UuZGVzY3JpcHRpb24gPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgVGhpcyBwcm9qZWN0IHdhcyBidWlsdCBmcm9tIHNjcmF0Y2ggdG8gZHluYW1pY2FsbHkgZGlzcGxheSBcIk5vdyBTaG93aW5nXCIgbW92aWUgZGV0YWlscyBhbmQgdHJhaWxlcnMgdmlhIGNvbnN1bWluZyBtdWx0aXBsZSBBUElzOyBtZWFuaW5nIGFsbCBkYXRhIHNob3duIG9uIG15IHdlYnNpdGUgaXMgcmVxdWVzdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgYW5kIHB1bGxlZCBmcm9tIGFub3RoZXIgc2VydmVyLCBhbmQgbWFuaXB1bGF0ZWQgb24gbXkgd2Vic2l0ZSB1c2luZyBKYXZhU2NyaXB0LiBEZXNpZ24gaXMgYmFzZWQgb24gcmV0cm8gdGhlYXRyZXMuIENsaWNrIHRoZSBsaW5rIGFuZCB0YWtlIGEgbG9vayBhdCBhbGwgdGhlIHRyZW5kaW5nIG1vdmllcyBub3chXHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgTW92aWVfRGF0YWJhc2UubGlua19ub3RlID0gXCIoZGVza3RvcCB2ZXJzaW9uIG9ubHkhKVwiO1xyXG4gICAgICAgICAgICAgICAgTW92aWVfRGF0YWJhc2Uubm90ZXMucHVzaChgQWxsIG1ham9yIGZlYXR1cmVzIGFyZSB3b3JraW5nIGFzIGV4cGVjdGVkLiBQYWdpbmF0aW9uIHRvIGJlIGltcGxlbWVudGVkLmApO1xyXG4gICAgICAgICAgICAgICAgTW92aWVfRGF0YWJhc2Uubm90ZXMucHVzaChgTm90IHlldCBmdWxseSByZXNwb25zaXZlIG9uIHNtYWxsZXIgZGV2aWNlcyFgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmllX2RiX2Nhcm91c2VsX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmllX2RiX2Nhcm91c2VsX2ltZ19zcmNzID0gW1wiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vbW92aWUtZGItMS1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL21vdmllLWRiLTItbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9tb3ZpZS1kYi0zLW1pbi53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92aWVfZGJfY2Fyb3VzZWxfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmllX2RiX3Rvb2xzX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmllX2RiX3Rvb2xzX2ltZ19zcmNzID0gW1wiLi9pbWcvbG9nb3MvaHRtbDUtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL2NzczMtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL2phdmFzY3JpcHQtYmFkZ2Uud2VicFwiXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vdmllX2RiX3Rvb2xzX2ltZ19hbHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBNb3ZpZV9EYXRhYmFzZS5hZGRfaW1ncyhtb3ZpZV9kYl9jYXJvdXNlbF9pbWdfaWRzLCBtb3ZpZV9kYl9jYXJvdXNlbF9pbWdfc3JjcywgbW92aWVfZGJfY2Fyb3VzZWxfaW1nX2FsdHMpO1xyXG4gICAgICAgICAgICAgICAgTW92aWVfRGF0YWJhc2UuYWRkX3Rvb2xfaWNvbnMobW92aWVfZGJfdG9vbHNfaW1nX2lkcywgbW92aWVfZGJfdG9vbHNfaW1nX3NyY3MsIG1vdmllX2RiX3Rvb2xzX2ltZ19hbHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBbWF6b24gQ2xvbmUgUHJvamVjdFxyXG4gICAgICAgICAgICAgICAgY29uc3QgQW1hem9uX0Nsb25lID0gbmV3IFByb2plY3QoXCJBbWF6b24gQ2xvbmVcIiwgMiwgXCJodHRwczovL2Nsb25lLTkwNWE3LndlYi5hcHAvXCIsIFwiSW50ZXJhY3RcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vRE5vZWwyNi9BbWF6b25fUmVhY3RfQ2xvbmVcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBBbWF6b25fQ2xvbmUuZGVzY3JpcHRpb24gPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgVGhpcyBwcm9qZWN0IHdhcyBkb25lIGFzIG15IGhhbmRzIG9uIGludHJvZHVjdGlvbiB0byBSZWFjdC5qcyBhbmQgRmlyZWJhc2UuIEluIHRoaXMgcGFydGljdWxhciBjYXNlLCBJIGZvbGxvd2VkIGEgdHV0b3JpYWwgYW5kIG1hbmlwdWxhdGVkIG15IGNvZGUgcmF0aGVyIHRoYW4gYnVpbGRpbmcgZnJvbSBzY3JhdGNoLlxyXG4gICAgICAgICAgICAgICAgICAgIFRoZSBtYWluIHB1cnBvc2Ugd2FzIHRvIHVuZGVyc3RhbmQgdGhlIGNvbmNlcHRzIGJlaGluZCB0aGUgdmVyeSBwb3B1bGFyIFJlYWN0LmpzIGZyYW1ld29yaywgYXMgd2VsbCBhcyB0byBsZWFybiBuZXcgbWV0aG9kcyBmb3IgY29kaW5nLiBNYWluIHByb2plY3QgZmVhdHVyZXMgYXJlIGFjY291bnQgY3JlYXRpb24sIFxyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luLCBhZGQgdG8gY2FydCwgYW5kIHBheW1lbnQgcHJvY2Vzc2luZyB1c2luZyBTdHJpcGUgQVBJLiBQbGVhc2UgdXNlIG9ubHkgRkFLRSBDUkVERU5USUFMUyBpZiBjcmVhdGluZyBhbiBhY2NvdW50IHRvIGxvZ2luLiBTZWUgbXkgR2l0SHViIHJlYWRtZSBmb3IgZnVydGhlciBpbnN0cnVjdGlvbnMuIFxyXG4gICAgICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgICAgIEFtYXpvbl9DbG9uZS5saW5rX25vdGUgPSBcIihmYWtlIGNyZWRlbnRpYWxzIG9ubHkgLSBkZXNrdG9wIHZlcnNpb24gb25seSEpXCI7XHJcbiAgICAgICAgICAgICAgICBBbWF6b25fQ2xvbmUubm90ZXMucHVzaChgQWxsIG1ham9yIGZlYXR1cmVzIGFyZSB3b3JraW5nIGFzIGV4cGVjdGVkLmApO1xyXG4gICAgICAgICAgICAgICAgQW1hem9uX0Nsb25lLm5vdGVzLnB1c2goYE5vdCB5ZXQgZnVsbHkgcmVzcG9uc2l2ZSBvbiBzbWFsbGVyIGRldmljZXMhYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbWF6b25fY19jYXJvdXNlbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbWF6b25fY19jYXJvdXNlbF9pbWdfc3JjcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2FtYXpvbi1jbG9uZS0xLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vYW1hem9uLWNsb25lLTItbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9hbWF6b24tY2xvbmUtMy1taW4ud2VicFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vYW1hem9uLWNsb25lLTQtbWluLndlYnBcIlxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYXpvbl9jX2Nhcm91c2VsX2ltZ19hbHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbWF6b25fY190b29sX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYXpvbl9jX3Rvb2xfaW1nX3NyY3MgPSBbXCIuL2ltZy9sb2dvcy9odG1sNS1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvY3NzMy1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvamF2YXNjcmlwdC1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvcmVhY3QtYmFkZ2Uud2VicFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLi9pbWcvbG9nb3MvZmlyZWJhc2UtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL25vZGVqcy1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvZXhwcmVzcy1sb2dvLndlYnBcIlxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYXpvbl9jX3Rvb2xfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIEFtYXpvbl9DbG9uZS5hZGRfaW1ncyhhbWF6b25fY19jYXJvdXNlbF9pbWdfaWRzLCBhbWF6b25fY19jYXJvdXNlbF9pbWdfc3JjcywgYW1hem9uX2NfY2Fyb3VzZWxfaW1nX2FsdHMpO1xyXG4gICAgICAgICAgICAgICAgQW1hem9uX0Nsb25lLmFkZF90b29sX2ljb25zKGFtYXpvbl9jX3Rvb2xfaW1nX2lkcywgYW1hem9uX2NfdG9vbF9pbWdfc3JjcywgYW1hem9uX2NfdG9vbF9pbWdfYWx0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVhbCBFc3RhdGUgV2Vic2l0ZSBQcm9qZWN0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBSZWFsX0VzdGF0ZV9TaXRlID0gbmV3IFByb2plY3QoXCJSZWFsIEVzdGF0ZSBTaXRlXCIsIDMsIFwiaHR0cHM6Ly9wcmVzaWRlbnRpYWxyZWFsdG9ycy1kZXYtc3RhdGljLm5ldGxpZnkuYXBwL1wiLCBcIlZpZXdcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vRE5vZWwyNi9QcmVzaWRlbnRpYWwtUmVhbHRvcnMtU3RhdGljXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgUmVhbF9Fc3RhdGVfU2l0ZS5kZXNjcmlwdGlvbiA9IGBcclxuICAgICAgICAgICAgICAgICAgICBUaGUgZm9jdXMgb2YgdGhpcyBwcm9qZWN0IHdhcyBmb3IgbWUgdG8gbGVhcm4gYW5kIGltcGxlbWVudCBtb2Rlcm4gZGVzaWduLCB1c2VyIGludGVyZmFjZSAoVUkpIGFuZCB1c2VyIGV4cGVyaWVuY2UgKFVYKSBlbGVtZW50cy4gSXQgd2FzIGJ1aWx0IGZyb20gc2NyYXRjaCBhbmQgd2lsbCBldmVudHVhbGx5IGJlIGNvbnZlcnRlZFxyXG4gICAgICAgICAgICAgICAgICAgIHRvIGEgZnVsbHkgZnVuY3Rpb25hbCBzaW5nbGUgcGFnZSBhcHBsaWNhdGlvbiAoU1BBKSB1c2luZyBSZWFjdC5qcywgTW9uZ29EQiwgTm9kZS5qcyBhbmQgRXhwcmVzcy5qcy4gTGV0IG1lIGtub3cgd2hhdCB5b3UgdGhpbmshXHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgUmVhbF9Fc3RhdGVfU2l0ZS5saW5rX25vdGUgPSBcIihkZXNrdG9wIHZlcnNpb24gb25seSEpXCI7XHJcbiAgICAgICAgICAgICAgICBSZWFsX0VzdGF0ZV9TaXRlLm5vdGVzLnB1c2goYE1vc3QgY2xpZW50IHNpZGUgZmVhdHVyZXMgd29yayBhcyBleHBlY3RlZC4gRm9jdXMgb2YgdGhpcyBwcm9qZWN0IHdhcyBvbiBkZXNpZ24gZWxlbWVudHMgcmF0aGVyIHRoYW4gZnVuY3Rpb25hbGl0eS5gKTtcclxuICAgICAgICAgICAgICAgIFJlYWxfRXN0YXRlX1NpdGUubm90ZXMucHVzaChgUHJvamVjdCB0byBiZSByZWRvbmUgYXMgYW4gYXBwIChTUEEpIHdpdGggdGhlIHRoZSBmdW5jdGlvbmFsaXRpZXMgZXhwZWN0ZWQgb2YgYSByZWFsIGVzdGF0ZSB3ZWJzaXRlLmApO1xyXG4gICAgICAgICAgICAgICAgUmVhbF9Fc3RhdGVfU2l0ZS5ub3Rlcy5wdXNoKGBOb3QgeWV0IGZ1bGx5IHJlc3BvbnNpdmUgb24gc21hbGxlciBkZXZpY2VzIWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbF9lc3RhdGVfY2Fyb3VzZWxfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbF9lc3RhdGVfY2Fyb3VzZWxfaW1nX3NyY3MgPSBbXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9yZWFsLWVzdGF0ZS0xLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vcmVhbC1lc3RhdGUtMi1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL3JlYWwtZXN0YXRlLTMtbWluLndlYnBcIl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsX2VzdGF0ZV9jYXJvdXNlbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbF9lc3RhdGVfdG9vbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsX2VzdGF0ZV90b29sX2ltZ19zcmNzID0gW1wiLi9pbWcvbG9nb3MvaHRtbDUtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL2NzczMtYmFkZ2Uud2VicFwiXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxfZXN0YXRlX3Rvb2xfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIFJlYWxfRXN0YXRlX1NpdGUuYWRkX2ltZ3MocmVhbF9lc3RhdGVfY2Fyb3VzZWxfaW1nX2lkcywgcmVhbF9lc3RhdGVfY2Fyb3VzZWxfaW1nX3NyY3MsIHJlYWxfZXN0YXRlX2Nhcm91c2VsX2ltZ19hbHRzKTtcclxuICAgICAgICAgICAgICAgIFJlYWxfRXN0YXRlX1NpdGUuYWRkX3Rvb2xfaWNvbnMocmVhbF9lc3RhdGVfdG9vbF9pbWdfaWRzLCByZWFsX2VzdGF0ZV90b29sX2ltZ19zcmNzLCByZWFsX2VzdGF0ZV90b29sX2ltZ19hbHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXRyaWV2ZSBsYXN0IHByb2plY3Qgc3RvcmVkIGluIHNlc3Npb24gYW5kIGV4ZWN1dGUgY2hhbmdlIHByb2plY3QgaWYgY3VycmVudCBwcm9qZWN0IGlzIG5vdCBlbXB0eVxyXG4gICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0ID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudF9wcm9qZWN0XCIpKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50X3Byb2plY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VfcHJvamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLmRldl9wcm9qZWN0X292ZXJ2aWV3LmlubmVySFRNTCA9IG5ld19pbm5lcl9odG1sOyAgICBcclxuICAgICAgICAgICAgICAgICAgICByZWluaXRpYWxpemVfZWwoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3RfZ2FsbGVyeV9idG5zLmZvckVhY2goYnRuID0+IHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2dlcihidG4sIGJ0bi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWRldi1wcm9qZWN0XCIpLCBidG4uZGF0YXNldC5kZXZQcm9qZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidG4uZGF0YXNldC5kZXZQcm9qZWN0ID09PSBcIkFsaWVuIE1hdGh2YXNpb24gR2FtZVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0ID0gQWxpZW5fTWF0aHZhc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidG4uZGF0YXNldC5kZXZQcm9qZWN0ID09PSBcIldpeCBTaXRlIENsb25lXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3Byb2plY3QgPSBXaXhfQ2xvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnRuLmRhdGFzZXQuZGV2UHJvamVjdCA9PT0gXCJDeWJlcmRpc2UgT25saW5lIFN0b3JlXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3Byb2plY3QgPSBDeWJlcmRpc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnRuLmRhdGFzZXQuZGV2UHJvamVjdCA9PT0gXCJNb3ZpZSBEYXRhYmFzZVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0ID0gTW92aWVfRGF0YWJhc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnRuLmRhdGFzZXQuZGV2UHJvamVjdCA9PT0gXCJBbWF6b24gQ2xvbmVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdCA9IEFtYXpvbl9DbG9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidG4uZGF0YXNldC5kZXZQcm9qZWN0ID09PSBcIlJlYWwgRXN0YXRlIFNpdGVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdCA9IFJlYWxfRXN0YXRlX1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlcihcIlBST0pFQ1QgTk9UIExPQURFRCBDT1JSRUNUTFlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZHMgbmV3IHByb2plY3QgdG8gY2Fyb3VzZWwgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9nZ2VyKGN1cnJlbnRfcHJvamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZV9wcm9qZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGN1cnJlbnQgcHJvamVjdCBpbiBzZXNzaW9uIHN0b3JhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnRfcHJvamVjdFwiLCBKU09OLnN0cmluZ2lmeShjdXJyZW50X3Byb2plY3QpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm9sZCBpbmRpY2F0b3JzXCIsIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2luZGljYXRvcl9zZWN0aW9uLCBcIm9sZCBpbm5lclwiLCBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbm5lcl9zZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3Rfb3ZlcnZpZXcuaW5uZXJIVE1MID0gbmV3X2lubmVyX2h0bWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlaW5pdGlhbGl6ZV9lbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9vdmVydmlldy5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5yZXR1cm5fdG9fZGV2X2dhbGxlcnlfYnRucy5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9nYWxsZXJ5LnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBFeGVjdXRlcyBmdW5jdGlvbiBhbmQgcHJvdmlkZXMgY2xvc3VyZSBmb3IgZGV2ZWxvcG1lbnQgcHJvamVjdHNcclxuICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IHRoZSBub2RlIHRoYXQgd2lsbCBiZSBvYnNlcnZlZCBmb3IgbXV0YXRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0X25vZGUgPSBVSS5kZXZfcHJvamVjdF9vdmVydmlldztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW9ucyBmb3IgdGhlIG9ic2VydmVyICh3aGljaCBtdXRhdGlvbnMgdG8gb2JzZXJ2ZSlcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7IGF0dHJpYnV0ZXM6IGZhbHNlLCBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIG11dGF0aW9ucyBhcmUgb2JzZXJ2ZWRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGZ1bmN0aW9uKG11dGF0aW9uc0xpc3QsIG9ic2VydmVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdHJhZGl0aW9uYWwgJ2ZvciBsb29wcycgZm9yIElFIDExXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbnNMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdBIGNoaWxkIG5vZGUgaGFzIGJlZW4gYWRkZWQgb3IgcmVtb3ZlZC4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnVGhlICcgKyBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lICsgJyBhdHRyaWJ1dGUgd2FzIG1vZGlmaWVkLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtdXRhdGlvbi50eXBlID09PSAnc3VidHJlZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdUaGUgc3VidHJlZSBhdHRyaWJ1dGUgd2FzIG1vZGlmaWVkLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobXV0YXRpb24sIFwiYW5kIFwiLCBvYnNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgbGlua2VkIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCBvYnNlcnZpbmcgdGhlIHRhcmdldCBub2RlIGZvciBjb25maWd1cmVkIG11dGF0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0X25vZGUsIGNvbmZpZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExhdGVyLCB5b3UgY2FuIHN0b3Agb2JzZXJ2aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS5yZXR1cm5fdG9fZGV2X2dhbGxlcnlfYnRucy5mb3JFYWNoKGJ0biA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmRldl9wcm9qZWN0X2dhbGxlcnkuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAgICAgLyoqKiBDT05UQUNUIFNFQ1RJT04gKioqL1xyXG5cclxuICAgICAgICAgICAgLyoqIEZvcm1zcHJlZSB2YWxpZGF0aW9uICoqL1xyXG5cclxuICAgICAgICAgICAgLy8gRXhhbXBsZSBzdGFydGVyIEphdmFTY3JpcHQgZm9yIGRpc2FibGluZyBmb3JtIHN1Ym1pc3Npb25zIGlmIHRoZXJlIGFyZSBpbnZhbGlkIGZpZWxkc1xyXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7ICAgXHJcbiAgICAgICAgICAgICAgICAvLyBPYnNlcnZlcyBpZiBmb3JtIGlzIGluIHZpZXcgYW5kIHRoZW4gbWFrZXMgY291bnRyeSBBUEkgcmVxdWVzdCBpZiB0cnVlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogJzIwMHB4JyxcclxuICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RfY2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybV9hcGlfb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oZW50cmllcywgb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydChcIi4vQnVzaW5lc3NfTG9naWMvQVBJLmpzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQpIC8vIHVzZXMgdGhlIGRlZmF1bHQgZXhwb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoQVBJKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9wdWxhdGVzIGZvcm0gY291bnRyaWVzIHVzaW5nIEFQSVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IENvdW50cnlfQVBJID0gbmV3IEFQSShcImh0dHBzOi8vcmVzdGNvdW50cmllcy5ldS9yZXN0L3YyL2FsbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXNlcl90eXBlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9jaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJvcHRpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZHMgY291bnRyeSBmbGFnIGFuZCBwaG9uZSBjYWxsaW5nIGNvZGUgb24gY291bnRyeSBzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfb3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgob3B0aW9uLnZhbHVlICYmIG9wdGlvbi5zZWxlY3RlZCkgJiYgb3B0aW9uLnZhbHVlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IG9wdGlvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZsYWdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGluZ19jb2RlcyA9IG9wdGlvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNhbGxpbmctY29kZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwic3JjXCIsIGZsYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJhbHRcIiwgYENvdW50cnkgZmxhZyBmb3IgJHtvcHRpb24udmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiNDBweFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiYXV0b1wiKTsgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdXNlcl90eXBlZCkgVUkucGhvbmUudmFsdWUgPSBgKyR7Y2FsbGluZ19jb2Rlc30tYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmNoaWxkcmVuWzFdICYmIFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5jaGlsZHJlblsxXS50YWdOYW1lID09PSBcIklNR1wiKSBVSS5jb3VudHJ5X3NlbGVjdC5sYWJlbHNbMF0uY2hpbGRyZW5bMV0ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb24uc2VsZWN0ZWQgJiYgIW9wdGlvbi52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVSS5jb3VudHJ5X3NlbGVjdC5sYWJlbHNbMF0uY2hpbGRyZW5bMV0gJiYgVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmNoaWxkcmVuWzFdLnRhZ05hbWUgPT09IFwiSU1HXCIpIFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5jaGlsZHJlblsxXS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvdW50cnlfQVBJLmZldGNoX2FwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9wdWxhdGVzIHdpdGggQVBJIGRhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGRhdHVtID0+IHsgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld19vcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X29wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBkYXR1bS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19vcHRpb24uc2V0QXR0cmlidXRlKFwiZGF0YS1mbGFnXCIsIGRhdHVtLmZsYWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X29wdGlvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNhbGxpbmctY29kZXNcIiwgZGF0dW0uY2FsbGluZ0NvZGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19vcHRpb24uaW5uZXJIVE1MID0gbmV3X29wdGlvbi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLmNvdW50cnlfc2VsZWN0LmFwcGVuZENoaWxkKG5ld19vcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLnBob25lLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBkZWJvdW5jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX3R5cGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSS5jb3VudHJ5X3NlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGRlYm91bmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdF9jaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIsIGVycikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gZm9ybXNwcmVlKCkpOyAvLyBFeGVjdXRlcyBmb3Jtc3ByZWUgZnVuY3Rpb24gcmVnYXJkbGVzcyBvZiBwcm9taXNlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIGltcG9ydCBBUEkgbW9kdWxlOiBcIiwgZXJyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JtX2FwaV9vYnNlcnZlci5vYnNlcnZlKFVJLm15X2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3Jtc3ByZWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDb250YWN0IGZvcm0gdmFsaWRhdGlvbiByZXNwb25zZXMgb24gZmFpbCAoZm9yIGVhY2ggZm9ybSlcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uX21zZ3MgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVSS5kaXNwbGF5X2Zvcm1fdmFsaWRhdGlvbl9tc2coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZldGNoIGFsbCB0aGUgZm9ybXMgd2Ugd2FudCB0byBhcHBseSBjdXN0b20gQm9vdHN0cmFwIHZhbGlkYXRpb24gc3R5bGVzIHRvIHVzaW5nIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uZWVkcy12YWxpZGF0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICAvLyBMb29wIG92ZXIgdGhlbSBhbmQgcHJldmVudCBzdWJtaXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoVUkuZm9ybXNfbmVlZF92YWxpZGF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKGZvcm0sIGluZGV4KSB7ICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDeWNsZSB0aHJvdWdoIGVhY2ggZm9ybSBpbnB1dC9zZWxlY3QvdGV4dCBhcmVhIHRhZ3MgYW5kIHN0b3JlIG9yIHBvcHVsYXRlIHdpdGggc2Vzc2lvblN0b3JhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtLWRhdGFcIikuZm9yRWFjaChkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50YWdOYW1lID09PSBcIklOUFVUXCIpIGRhdGEudmFsdWUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGRhdGEubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSBkYXRhLnZhbHVlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShkYXRhLm5hbWUpOyAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudGFnTmFtZSA9PT0gXCJTRUxFQ1RcIikgZGF0YS52YWx1ZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oZGF0YS5uYW1lKSB8fCBcIlwiOyAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhLCBkYXRhLnRhZ05hbWUsIGRhdGEubmFtZSwgZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X2NoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgY29udGFjdCBmb3JtIGluZm8gaW4gY29va2llc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGRlYm91bmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShkYXRhLm5hbWUsIChkYXRhLnZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhlYXZpbHkgbW9kaWZpZWQgQm9vdHN0cmFwIHZhbGlkYXRpb24gYW5kIEZvcm1zcHJlZSBmdW5jdGlvbnMgKEFqYXggbWV0aG9kIC0gcHJldmVudHMgcmVkaXJlY3Rpb24gb24gZm9ybSBzdWJtaXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZlbnQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9wIG11bHRpcGxlIHN1Ym1pdHMgZnJvbSBvY2N1cnJpbmcgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCgnLi9CdXNpbmVzc19Mb2dpYy9Gb3Jtc3ByZWUuanMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4obW9kdWxlID0+IG1vZHVsZS5kZWZhdWx0KSAvLyB1c2VzIHRoZSBkZWZhdWx0IGV4cG9ydFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKEZvcm1zcHJlZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm9ybS5jaGVja1ZhbGlkaXR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PnsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrcyB2YWxpZGF0aW9uIG9uIHN1Ym1pdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKCd3YXMtdmFsaWRhdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHsgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXlzIHZhbGlkYXRpb24gbWVzc2FnZXMgaWYgZmFpbGVkIHRvIGVudGVyIGluZm8gY29ycmVjdGx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uX21zZ3NbaW5kZXhdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGFkZCBcIndhcy12YWxpZGF0ZWRcIiBjbGFzcyB0byBCb290c3RyYXAgZm9ybTogJHtlcnJ9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IE15X0Zvcm0gPSBuZXcgRm9ybXNwcmVlKFVJLm15X2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNeV9Gb3JtLm1ldGhvZCA9IFVJLm15X2Zvcm0ubWV0aG9kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNeV9Gb3JtLnVybCA9IFVJLm15X2Zvcm0uYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNeV9Gb3JtLmRhdGEgPSBuZXcgRm9ybURhdGEoTXlfRm9ybS5mb3JtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTXlfRm9ybS5zdWNjZXNzX21zZyA9IGBIaSAke015X0Zvcm0uZ2V0X2Zvcm1fZGF0YShcImZpcnN0X25hbWVcIikudHJpbSgpfSEgYCArIE15X0Zvcm0uc3VjY2Vzc19tc2c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE15X0Zvcm0uZXJyb3JfbXNnID0gYFNvcnJ5ICR7TXlfRm9ybS5nZXRfZm9ybV9kYXRhKFwiZmlyc3RfbmFtZVwiKS50cmltKCl9ISBgICsgTXlfRm9ybS5lcnJvcl9tc2c7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHdyYXBwZXJfbm9fZXhlYyhmb3JtX3N1Ym1pdF9zdWNjZXNzLCBNeV9Gb3JtLmZvcm0sIFVJLm15X2Zvcm1fYnV0dG9uLCBVSS5teV9mb3JtX3N0YXR1cywgTXlfRm9ybS5zdWNjZXNzX21zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gd3JhcHBlcl9ub19leGVjKGZvcm1fc3VibWl0X2Vycm9yLCBVSS5teV9mb3JtX3N0YXR1cywgTXlfRm9ybS5lcnJvcl9tc2cpO1xyXG4gIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhamF4KE15X0Zvcm0ubWV0aG9kLCBNeV9Gb3JtLnVybCwgTXlfRm9ybS5kYXRhLCBzdWNjZXNzLCBlcnJvciwgKHN0YXR1cykgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2sgZXhlY3V0ZWQgb25yZWFkeXN0YXRlY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNhcHRjaGFDYWxsYmFjaygoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiaW4gZ3JlY2FwdGNoYSBjYWxsYmFja1wiLCBncmVjYXB0Y2hhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QucmVtb3ZlKCd3YXMtdmFsaWRhdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVSS5jb3VudHJ5X3NlbGVjdC5sYWJlbHNbMF0uY2hpbGRyZW5bMV0gJiYgVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmNoaWxkcmVuWzFdLnRhZ05hbWUgPT09IFwiSU1HXCIpIFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5jaGlsZHJlblsxXS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGltcG9ydCBGb3Jtc3ByZWUgbW9kdWxlOiBcIiwgZXJyKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgfSk7IC8vIGVuZCBvZiBET01Db250ZW50TG9hZGVkIGV2ZW50IGxpc3RlbmVyXHJcbiAgICB9LCAvLyBlbmQgb2YgaW5pdCgpXHJcbn07IC8vIGVuZCBvZiBBcHBcclxuXHJcbkFwcC5pbml0KCk7XHJcblxyXG5cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvRGFybmVsbF9Ob2VsX0ZTRF9SZXN1bWVfRmViXzIwMjEucGRmXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9EYXJuZWxsX05vZWxfRlNEX1Jlc3VtZV9NYXJfMjAyMS5wZGZcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL015X0dvb2dsZV9EZXNrdG9wX0F1ZGl0LnBkZlwiOyIsInZhciBtYXAgPSB7XG5cdFwiLi9EYXJuZWxsX05vZWxfRlNEX1Jlc3VtZV9GZWJfMjAyMS5wZGZcIjogNTQ0LFxuXHRcIi4vRGFybmVsbF9Ob2VsX0ZTRF9SZXN1bWVfTWFyXzIwMjEucGRmXCI6IDQwMyxcblx0XCIuL015X0dvb2dsZV9EZXNrdG9wX0F1ZGl0LnBkZlwiOiA3MTZcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA0NzY7IiwidmFyIG1hcCA9IHtcblx0XCIuL2xhcHRvcC1rZXlib2FyZC12aWQtaHEubWluLm1wNFwiOiA5MjVcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMjU7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uYW1kTyA9IHt9OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuXCIgKyB7XCIzNTFcIjpcImViM2MwYmI3N2ExZjdhYWM0NTE3XCIsXCI0MTdcIjpcIjM0NzBkOTNlZGQ4YTIzYjUwMGEwXCIsXCI5MDVcIjpcIjI2ZTliMTk0ZjZkZmI4NTMxZmNmXCJ9W2NodW5rSWRdICsgXCIuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJzdHlsZXMvXCIgKyBjaHVua0lkICsgXCIuXCIgKyBcImYzMjcwYTFhOWNkYmUwMWQ5MzNjXCIgKyBcIi5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDgyNjogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRzW2ldXSA9IDA7XG5cdH1cblx0X193ZWJwYWNrX3JlcXVpcmVfXy5PKCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rTXlfRGV2X1BvcnRmb2xpb1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtNeV9EZXZfUG9ydGZvbGlvXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbODg3XSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNTcwKSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==