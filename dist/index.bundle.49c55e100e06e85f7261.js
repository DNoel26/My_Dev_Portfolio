(()=>{var e,t,n,o,i={610:(e,t,n)=>{"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>o})},991:(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}n.d(t,{Z:()=>i})},156:(e,t,n)=>{"use strict";function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>o})},544:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/Darnell_Noel_FSD_Resume_Feb_2021.pdf"},403:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/Darnell_Noel_FSD_Resume_Mar_2021.pdf"},716:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=n.p+"assets/My_Google_Desktop_Audit.pdf"},476:(e,t,n)=>{var o={"./Darnell_Noel_FSD_Resume_Feb_2021.pdf":544,"./Darnell_Noel_FSD_Resume_Mar_2021.pdf":403,"./My_Google_Desktop_Audit.pdf":716};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=476},533:(e,t,n)=>{"use strict";e.exports=n.p+"./assets/ed6766ead3a14d006a27.mp4"},225:(e,t,n)=>{var o={"./laptop-keyboard-vid-hq.mp4":533};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=a,e.exports=i,i.id=225}},a={};function r(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={id:e,loaded:!1,exports:{}};return i[e](n,n.exports,r),n.loaded=!0,n.exports}r.m=i,r.amdO={},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce(((t,n)=>(r.f[n](e,t),t)),[])),r.u=e=>e+".bundle."+{177:"3c67645b17d239be145c",351:"a10011837abffdfd0e77",398:"071c4f4ec616bc8d0d39",417:"86424274efb3caf6b912",905:"7f8c058ba13de7d82577"}[e]+".js",r.miniCssF=e=>"styles/"+e+"."+{177:"1d69ad802bf8ed5d1591",398:"36357f5e06bbfc749566"}[e]+".css",r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="My_Dev_Portfolio:",r.l=(n,o,i,a)=>{if(e[n])e[n].push(o);else{var s,c;if(void 0!==i)for(var l=document.getElementsByTagName("script"),d=0;d<l.length;d++){var u=l[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+i){s=u;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.setAttribute("data-webpack",t+i),s.src=n),e[n]=[o];var m=(t,o)=>{s.onerror=s.onload=null,clearTimeout(p);var i=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(o))),t)return t(o)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=m.bind(null,s.onerror),s.onload=m.bind(null,s.onload),c&&document.head.appendChild(s)}},r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.p="/",n=e=>new Promise(((t,n)=>{var o=r.miniCssF(e),i=r.p+o;if(((e,t)=>{for(var n=document.getElementsByTagName("link"),o=0;o<n.length;o++){var i=(r=n[o]).getAttribute("data-href")||r.getAttribute("href");if("stylesheet"===r.rel&&(i===e||i===t))return r}var a=document.getElementsByTagName("style");for(o=0;o<a.length;o++){var r;if((i=(r=a[o]).getAttribute("data-href"))===e||i===t)return r}})(o,i))return t();((e,t,n,o)=>{var i=document.createElement("link");i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=a=>{if(i.onerror=i.onload=null,"load"===a.type)n();else{var r=a&&("load"===a.type?"missing":a.type),s=a&&a.target&&a.target.href||t,c=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=r,c.request=s,i.parentNode.removeChild(i),o(c)}},i.href=t,document.head.appendChild(i)})(e,i,t,n)})),o={826:0},r.f.miniCss=(e,t)=>{o[e]?t.push(o[e]):0!==o[e]&&{177:1,398:1}[e]&&t.push(o[e]=n(e).then((()=>{o[e]=0}),(t=>{throw delete o[e],t})))},(()=>{var e={826:0};r.f.j=(t,n)=>{var o=r.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var i=new Promise(((n,i)=>o=e[t]=[n,i]));n.push(o[2]=i);var a=r.p+r.u(t),s=new Error;r.l(a,(n=>{if(r.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var i=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+i+": "+a+")",s.name="ChunkLoadError",s.type=i,s.request=a,o[1](s)}}),"chunk-"+t,t)}};var t=(t,n)=>{var o,i,[a,s,c]=n,l=0;for(o in s)r.o(s,o)&&(r.m[o]=s[o]);for(c&&c(r),t&&t(n);l<a.length;l++)i=a[l],r.o(e,i)&&e[i]&&e[i][0](),e[a[l]]=0},n=self.webpackChunkMy_Dev_Portfolio=self.webpackChunkMy_Dev_Portfolio||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";function e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return function(){return e.apply(void 0,n)}}function t(e,t){var n;return function(){var o=this,i=arguments;clearTimeout(n),n=setTimeout((function(){return e.apply(o,i)}),t)}}function n(e,t){var n,o=0;return function(){var i=this,a=arguments;return void 0!==n?void 0:new Promise((function(r,s){var c;n=setTimeout((function(){return n=void 0,r(o),e(i,a)}),null!==(c=o)&&void 0!==c?c:t)})).then((function(){0===o&&(o=void 0),setTimeout((function(){return o=0}),t)})).catch((function(e){return console.error(e)}))}}function o(e,t,n,o){e.reset(),t.setAttribute("disabled","disabled"),n.innerHTML=null!=o?o:"Submission Successful!"}function i(e,t){e.innerHTML=null!=t?t:"Submission Failed!"}function a(e,t,n){return e.matches?t():n?n():null}function s(){for(var e="#",t=0;t<3;t++)e+=("0"+Math.floor(Math.random()*Math.pow(16,2)/2).toString(16)).slice(-2);return e}var c={body:document.body,google_preview_modal_btn:document.querySelector("[data-bs-toggle='modal']"),google_preview_modal:document.querySelector(".resume"),lazy_imgs:document.querySelectorAll("img.lazy"),lazy_sources:document.querySelectorAll("source"),lazy_bgs:document.querySelectorAll(".lazy-bg"),header:document.querySelector("header"),header_vid:document.querySelector("header video"),header_vid_multi:document.querySelectorAll("video [data-src]"),header_btns:document.querySelectorAll("button"),header_links:document.querySelectorAll("a"),nav_container:document.querySelector(".nav-container"),top_nav:document.querySelector(".top-header-nav"),bot_nav:document.querySelector(".bot-header-nav"),body_placeholder:document.querySelector("body .placeholder-div"),header_empty_div:document.querySelector("header .empty-div"),scroll_indicator:document.querySelector("#my-bar"),active_lists:document.querySelectorAll(".bot-header-nav .nav-item"),active_link:document.querySelector("a.active"),anchor_links:document.querySelectorAll("a.anchor-link"),toggler_btn:document.querySelector(".navbar-toggler"),toggler_btn_icon:document.querySelector(".navbar-toggler-icon"),toggler_btn_word:document.querySelector(".navbar-toggler-word"),navbar_scroll:document.querySelector(".navbar-nav-scroll"),bot_nav_collapse:document.querySelector("#bot-header-nav"),intro_msg:document.querySelector(".intro"),welcome:document.querySelector(".welcome"),text_wrapper_ml13:document.querySelector(".ml13"),header_divider:document.querySelector(".custom-shape-divider-bottom-1612032701"),about_summary_wrapper:document.querySelector(".about-section .summary-wrapper"),my_age:document.querySelector("[data-age='my-age']"),summary_containers:document.querySelectorAll(".summary-container"),summary_btn:document.querySelector("[data-id='summary-btn']"),my_carousel_prev_btn:document.querySelector(".services-section .my-carousel-btn-prev"),my_carousel_next_btn:document.querySelector(".services-section .my-carousel-btn-next"),my_carousel_wrapper:document.querySelector(".my-carousel-wrapper"),my_carousel_content:document.querySelector(".my-carousel-content"),my_carousel_items:document.querySelectorAll(".my-carousel-item"),skill_ratings:document.querySelectorAll(".skill-rating"),skill_ratings_beginner:document.querySelectorAll(".skill-rating-beginner"),skill_ratings_novice:document.querySelectorAll(".skill-rating-novice"),skill_ratings_intermediate:document.querySelectorAll(".skill-rating-intermediate"),skill_ratings_advanced:document.querySelectorAll(".skill-rating-advanced"),skill_ratings_expert:document.querySelectorAll(".skill-rating-expert"),return_to_dev_gallery_btns:document.querySelectorAll("[data-id='dev-project-gallery']"),dev_project_gallery:document.getElementById("dev-project-gallery"),dev_project_overview:document.getElementById("dev-project-overview"),dev_project_gallery_btns:document.querySelectorAll("button[data-dev-project]"),dev_project_carousel:document.getElementById("dev-project-carousel"),dev_project_carousel_indicator_section:document.getElementById("dev-project-carousel-indicators"),dev_project_carousel_inner_section:document.getElementById("dev-project-carousel-inner"),dev_project_carousel_note_section:document.getElementById("dev-project-carousel-notes"),dev_project_carousel_icon_section:document.getElementById("dev-project-carousel-icon-section"),dev_project_carousel_next:document.querySelectorAll("#dev-project-overview .carousel-control-next"),dev_project_carousel_prev:document.querySelectorAll("#dev-project-overview .carousel-control-prev"),client_project_gallery:document.getElementById("client-project-gallery"),client_project_overview:document.getElementById("client-project-overview"),client_project_gallery_btns:document.querySelectorAll("button[data-client-project]"),client_project_carousel:document.getElementById("client-project-carousel"),client_project_carousel_indicator_section:document.getElementById("client-project-carousel-indicators"),client_project_carousel_inner_section:document.getElementById("client-project-carousel-inner"),client_project_carousel_note_section:document.getElementById("client-project-carousel-notes"),client_project_carousel_icon_section:document.getElementById("client-project-carousel-icon-section"),client_project_carousel_next:document.querySelectorAll("#client-project-overview .carousel-control-next"),client_project_carousel_prev:document.querySelectorAll("#client-project-overview .carousel-control-prev"),form_data:document.querySelectorAll(".form-data"),country_select:document.getElementById("country"),phone:document.getElementById("phone"),valid_feedback_fname:document.querySelector(".valid-feedback.valid-feedback-fname"),valid_feedback_lname:document.querySelector(".valid-feedback.valid-feedback-lname"),valid_feedback_email:document.querySelector(".valid-feedback.valid-feedback-email"),valid_feedback_country:document.querySelector(".valid-feedback.valid-feedback-country"),valid_feedback_message:document.querySelector(".valid-feedback.valid-feedback-message"),invalid_feedback_fname:document.querySelector(".invalid-feedback.invalid-feedback-fname"),invalid_feedback_lname:document.querySelector(".invalid-feedback.invalid-feedback-lname"),invalid_feedback_email:document.querySelector(".invalid-feedback.invalid-feedback-email"),invalid_feedback_country:document.querySelector(".invalid-feedback.invalid-feedback-country"),invalid_feedback_message:document.querySelector(".invalid-feedback.invalid-feedback-message"),forms_need_validation:document.querySelectorAll(".needs-validation"),my_form:document.getElementById("my-form"),my_form_button:document.getElementById("my-form-button"),my_form_status:document.getElementById("my-form-status"),grecaptchas:document.getElementsByClassName("g-recaptcha"),create_scripts:function(){for(var e=this,t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];n.forEach((function(t){var n=document.createElement("script");n.src=t,n.setAttribute("async","async"),e.body.appendChild(n)}))},load_bg_vid:function(){this.header_vid_multi.forEach((function(e){var t=e.getAttribute("data-src"),n=e.getAttribute("data-media");a(window.matchMedia(n),(function(){e.setAttribute("src",t),e.setAttribute("media",n),e.parentElement.load()}),(function(){return e.removeAttribute("src")}))}))},add_poster_img_sm:function(){var e=this;a(window.matchMedia("(max-width: 767.98px)"),(function(){e.header_vid.setAttribute("poster","./img/base/webp/think-different-700.webp")}),null)},toggler_menu_icon_switch:function(){var e=this;setInterval((function(){e.toggler_btn_word.classList.contains("d-none")&&e.toggler_btn_word?(e.toggler_btn_icon.classList.add("d-none"),e.toggler_btn_word.classList.remove("d-none")):e.toggler_btn_icon.classList.contains("d-none")&&e.toggler_btn_word&&(e.toggler_btn_icon.classList.remove("d-none"),e.toggler_btn_word.classList.add("d-none"))}),5e3)},side_menu_reveal:function(){c.bot_nav_collapse.classList.add("side-menu-reveal"),c.bot_nav_collapse.classList.remove("side-menu-hide")},side_menu_hide:function(){c.bot_nav_collapse.classList.remove("side-menu-reveal"),c.bot_nav_collapse.classList.add("side-menu-hide")},mobile_menu_reveal:function(){c.header.classList.add("mobile-menu-reveal"),c.header.classList.remove("mobile-menu-hide")},mobile_menu_hide:function(){c.header.classList.remove("mobile-menu-reveal"),c.header.classList.add("mobile-menu-hide")},no_menu:function(){c.bot_nav_collapse.classList.remove("side-menu-hide"),c.bot_nav_collapse.classList.remove("side-menu-reveal"),c.header.classList.remove("mobile-menu-hide"),c.header.classList.remove("mobile-menu-reveal"),c.bot_nav_collapse.classList.remove("show")},shrink_header:function(){this.body.classList.remove("will-change-height"),this.nav_container.classList.add("nav-container-sticky"),this.header.style.height="100px",this.header.style.boxShadow="0 0.1rem 5rem rgba(0,0,0,0.5)",this.header_vid.classList.add("d-none"),this.header_vid.pause(),this.header.style.background="linear-gradient(rgba(31,111,139,1), rgba(31,111,139,1)), url('./img/transparent-png-w10.png') no-repeat fixed 100% 100%",this.intro_msg.classList.add("h-0")},expand_placeholder_div:function(){this.body_placeholder.style.height="100vh",this.body_placeholder.classList.replace("invisible","visible"),this.body_placeholder.classList.replace("placeholder-div-reveal-start","placeholder-div-reveal-end")},expand_header:function(){var e=this;this.body.classList.add("will-change-height"),this.nav_container.classList.remove("nav-container-sticky");var t=[window.matchMedia("(min-width: 992px)"),window.matchMedia("(max-width: 991.98px)")];a(t[0],(function(){e.header.style.height="70vh"}),null),a(t[1],(function(){e.header.style.height="70vh"}),null),this.header.style.boxShadow="unset",this.header_vid.classList.remove("d-none"),this.header_vid.play(),this.intro_msg.classList.remove("h-0")},shrink_placeholder_div:function(){this.body_placeholder.style.height="0",this.body_placeholder.classList.replace("visible","invisible"),this.body_placeholder.classList.replace("placeholder-div-reveal-end","placeholder-div-reveal-start")},replace_vid_bg:function(){this.header.style.background="linear-gradient(rgba(31,111,139,0.8), rgba(0,0,0,0.6)), url('./img/base/webp/laptop-keyboard.webp') no-repeat fixed 20% 20%",this.header.style.backgroundSize="cover"},fixed_bottom_header:function(){var e=this;a(window.matchMedia("(max-width: 767.98px)"),(function(){e.header.classList.replace("sticky-top","fixed-bottom")}),(function(){e.header.classList.replace("fixed-bottom","sticky-top")}))},no_fixed_bottom_header:function(){this.header.classList.contains("fixed-bottom")&&this.header.classList.replace("fixed-bottom","sticky-top")},animate_letters:function(){this.text_wrapper_ml13.innerHTML=this.text_wrapper_ml13.textContent.replace(/\S/g,"<span class='letter'>$&</span>"),anime.timeline({loop:!0}).add({targets:".ml13 .letter",translateY:[100,0],translateZ:0,opacity:[0,1],easing:"easeOutExpo",duration:600,delay:function(e,t){return 300+30*t}}).add({targets:".ml13 .letter",translateY:[0,-100],opacity:[1,0],easing:"easeInExpo",duration:600,delay:function(e,t){return 6e3+30*t}})},change_about_info:function(){var e=this;this.summary_containers[1].classList.contains("d-none")?(this.about_summary_wrapper.classList.add("opacity-0"),setTimeout((function(){e.summary_containers[0].classList.add("d-none","opacity-0"),e.summary_containers[1].classList.remove("d-none","opacity-0"),e.summary_btn.innerHTML='\n                    <span class="circle" aria-hidden="true">\n                        <i class="fas fa-info-circle"></i>\n                    </span>\n\n                    <span class="btn-text">\n                        Learn More\n                    </span>\n                '}),205),setTimeout((function(){e.about_summary_wrapper.classList.remove("opacity-0")}),350)):this.summary_containers[0].classList.contains("d-none")&&(this.about_summary_wrapper.classList.add("opacity-0"),setTimeout((function(){e.summary_containers[1].classList.add("d-none","opacity-0"),e.summary_containers[0].classList.remove("d-none","opacity-0"),e.summary_btn.innerHTML='\n                    <span class="circle" aria-hidden="true">\n                        <i class="fas fa-info-circle"></i>\n                    </span>\n\n                    <span class="btn-text">\n                        Learn More\n                    </span>\n                '}),205),setTimeout((function(){e.about_summary_wrapper.classList.remove("opacity-0")}),350))},grow_btn_onclick:function(e,t,n){e.style.transform="scale(".concat(t,")"),setTimeout((function(){e.style.transform="initial"}),n)},scroll_horizontally:function(e,t){e.scrollLeft+=t},scroll_start:function(e,t){e.scrollLeft>=e.scrollWidth-e.clientWidth-t&&(e.scrollLeft=0)},scroll_end:function(e,t){e.scrollLeft<=t&&(e.scrollLeft=e.scrollWidth-e.clientWidth)},populate_skill_rating:function(e){this.skill_ratings_beginner.forEach((function(t){t.innerHTML=e.getRating("beginner")})),this.skill_ratings_novice.forEach((function(t){t.innerHTML=e.getRating("novice")})),this.skill_ratings_intermediate.forEach((function(t){t.innerHTML=e.getRating("intermediate")})),this.skill_ratings_advanced.forEach((function(t){t.innerHTML=e.getRating("advanced")})),this.skill_ratings_expert.forEach((function(t){t.innerHTML=e.getRating("expert")}))},display_form_validation_msg:function(){this.invalid_feedback_fname&&"none"!=window.getComputedStyle(this.invalid_feedback_fname).display&&(this.valid_feedback_fname.innerHTML="Nice! You remembered your first name!"),this.invalid_feedback_lname&&"none"!=window.getComputedStyle(this.invalid_feedback_lname).display&&(this.valid_feedback_lname.innerHTML="So you do have a last name..."),this.invalid_feedback_email&&"none"!=window.getComputedStyle(this.invalid_feedback_email).display&&(this.valid_feedback_email.innerHTML="Much better...please ensure that the spelling of your email is correct"),this.invalid_feedback_country&&"none"!=window.getComputedStyle(this.invalid_feedback_country).display&&(this.valid_feedback_country.innerHTML="Welcome to Earth 👽"),this.invalid_feedback_message&&"none"!=window.getComputedStyle(this.invalid_feedback_message).display&&(this.valid_feedback_message.innerHTML="How did you forget the most important part? Oh well, at least it's fine now...")}};const l=c;var d=r(610),u=r(991),m=r(156);const p=function(){function e(){(0,d.Z)(this,e),(0,m.Z)(this,"classification",""),(0,m.Z)(this,"filled_icon",'   \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">\n                        <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.283.95l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>\n                    </svg>\n                  '),(0,m.Z)(this,"half_icon",'                                       \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star-half" viewBox="0 0 16 16">\n                        <path d="M5.354 5.119L7.538.792A.516.516 0 0 1 8 .5c.183 0 .366.097.465.292l2.184 4.327 4.898.696A.537.537 0 0 1 16 6.32a.55.55 0 0 1-.17.445l-3.523 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256a.519.519 0 0 1-.146.05c-.341.06-.668-.254-.6-.642l.83-4.73L.173 6.765a.55.55 0 0 1-.171-.403.59.59 0 0 1 .084-.302.513.513 0 0 1 .37-.245l4.898-.696zM8 12.027c.08 0 .16.018.232.056l3.686 1.894-.694-3.957a.564.564 0 0 1 .163-.505l2.906-2.77-4.052-.576a.525.525 0 0 1-.393-.288L8.002 2.223 8 2.226v9.8z"/>\n                    </svg>\n                '),(0,m.Z)(this,"empty_icon",' \n                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="11" fill="currentColor" class="bi bi-star" viewBox="0 0 16 16">\n                        <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.523-3.356c.329-.314.158-.888-.283-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767l-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288l1.847-3.658 1.846 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.564.564 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"/>\n                    </svg>\n                ')}return(0,u.Z)(e,[{key:"getRating",value:function(e){return"beginner"===e?e=1:"novice"===e?e=2:"intermediate"===e?e=3:"advanced"===e?e=4:"expert"===e&&(e=5),this.classification=this.filled_icon.repeat(e)+this.empty_icon.repeat(5-e),this.classification}}]),e}();function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function f(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const _=function(){function e(t,n,o,i,a,r){(0,d.Z)(this,e),(0,m.Z)(this,"name",void 0),(0,m.Z)(this,"description",void 0),(0,m.Z)(this,"status",{msg:null,class_code:null}),(0,m.Z)(this,"link",void 0),(0,m.Z)(this,"link_header",void 0),(0,m.Z)(this,"link_note",void 0),(0,m.Z)(this,"github_link",void 0),(0,m.Z)(this,"github_readme",void 0),(0,m.Z)(this,"notes",[]),(0,m.Z)(this,"thumbnail",{btn_id:null,src:null,alt:null}),(0,m.Z)(this,"carousel_img_list",{ids:[],srcs:[],alts:[]}),(0,m.Z)(this,"tool_icon_list",{ids:[],srcs:[],alts:[]}),1===n?(n="Completed",this.status.class_code="status-complete"):2===n?(n="Work in Progress",this.status.class_code="status-in-progress"):3===n&&(n="On Hold",this.status.class_code="status-hold"),r=!0===r?"(GitHub - readme available)":"(GitHub)",this.name=t,this.status.msg=n,this.link=o,this.link_header=i,this.github_link=a,this.github_readme=r}return(0,u.Z)(e,[{key:"add_imgs",value:function(e,t,n){var o,i,a;(o=this.carousel_img_list.ids).push.apply(o,f(e)),(i=this.carousel_img_list.srcs).push.apply(i,f(t)),(a=this.carousel_img_list.alts).push.apply(a,f(n))}},{key:"add_tool_icons",value:function(e,t,n){var o,i,a;(o=this.tool_icon_list.ids).push.apply(o,f(e)),(i=this.tool_icon_list.srcs).push.apply(i,f(t)),(a=this.tool_icon_list.alts).push.apply(a,f(n))}}]),e}();function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}console.log("App.js Loaded Successfully");var g={};function b(e){e.keys().forEach((function(t){return g[t]=e(t)}))}function y(e){return e()}r.e(177).then(r.bind(r,177)).then((function(){r.e(398).then(r.bind(r,398))})).catch((function(e){return console.log("Failed to import CSS files: ",e)})),b(r(476)),b(r(225)),document.addEventListener("DOMContentLoaded",(function(){console.log("DOMContentLoaded Successfully"),function(){var e=[].slice.call(l.lazy_imgs),t=[].slice.call(l.lazy_sources),n=[].slice.call(l.lazy_bgs),o=[].slice.call(l.grecaptchas),i={root:null,rootMargin:"250px",threshold:0};if("IntersectionObserver"in window){var a=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){var t=e.target,n=t.getAttribute("data-src"),o=t.getAttribute("data-srcset");t.hasAttribute("data-src")&&(t.setAttribute("src",n),t.removeAttribute("data-src")),t.hasAttribute("data-srcset")&&(t.setAttribute("srcset",o),t.removeAttribute("data-srcset")),t.classList.remove("lazy"),a.unobserve(e.target)}}))}),i);e.forEach((function(e){a.observe(e)}));var r=new IntersectionObserver((function(e,t){e.forEach((function(e){if(e.isIntersecting){var t=e.target,n=t.getAttribute("data-srcset");t.hasAttribute("data-srcset")&&(t.setAttribute("srcset",n),t.removeAttribute("data-srcset")),r.unobserve(e.target)}}))}),i);t.forEach((function(e){r.observe(e)}));var s=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&(e.target.classList.add("load-now"),s.unobserve(e.target))}))}),i);n.forEach((function(e){s.observe(e)}));var c=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&new Promise((function(e,t){l.create_scripts("https://www.google.com/recaptcha/api.js?render=explicit"),setTimeout(e,2e3)})).then((function(){y((function(){!function t(){l.grecaptchas.length>0?(l.my_form_button.removeAttribute("disabled"),c.unobserve(e.target),grecaptcha.render("recaptcha",{sitekey:"6LfWHkgaAAAAAIKEcuqTQiy82YSpeWTdjebsfWZ3",callback:function(){}})):setTimeout((function(){t()}),15e3)}()}))})).catch((function(e){return console.log("Error in script delay promise: ",e)}))}))}),i);o.forEach((function(e){c.observe(e)}))}}(),l.body.classList.add("will-change-height"),l.header.classList.add("will-change-height"),l.my_form_button.setAttribute("disabled","disabled"),l.add_poster_img_sm(),l.load_bg_vid(),window.addEventListener("resize",t((function(){l.add_poster_img_sm(),l.load_bg_vid()}),500)),setTimeout((function(){a(window.matchMedia("(min-width: 768px)"),(function(){return l.create_scripts("https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js")}),(function(){}))}),2e3),setTimeout((function(){return l.create_scripts("https://code.tidio.co/edv8badlavwvekyo42tfkxyp6frut7yq.js","https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")}),1e4);var c=!1;l.google_preview_modal_btn.addEventListener("click",(function(){c||(l.google_preview_modal.setAttribute("src","https://drive.google.com/file/d/1dJLAdbOlVNz-btYv6Zl1IhrlHQKYNQlT/preview"),c=!0)})),new IntersectionObserver((function(e){e.forEach((function(e){e.intersectionRect.height>0?console.log(e):console.log("else entry",e)}))}),{rootMargin:"10px",threshold:0});var d,u=!0,m=!1,h=!1;l.anchor_links.forEach((function(e){e.addEventListener("click",(function(){(document.documentElement.scrollTop<=0||window.pageYOffset<=0)&&setTimeout((function(){e.click()}),750)}))}));var f,g,b,w,k,L,S,E=function(){return d=window.setTimeout((function(){u||(l.header.classList.add("hide-header"),l.header.classList.remove("show-header"))}),800)};f=function(){l.toggler_btn.classList.contains("collapsed")?l.side_menu_hide():l.side_menu_reveal()},g=function(){l.toggler_btn.classList.contains("collapsed")?l.mobile_menu_hide():l.mobile_menu_reveal()},l.toggler_btn.addEventListener("click",(function(){var e=[window.matchMedia("(max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)")];a(e[0],g,null),a(e[1],f,null)})),window.addEventListener("resize",t((function(){l.no_menu()}),500)),l.header_vid.addEventListener("ended",(function(){l.replace_vid_bg(),l.header_vid.remove(),h=!0})),l.header_vid.addEventListener("animationend",(function(){setTimeout((function(){l.replace_vid_bg(),l.header_vid.remove(),h=!0}),3e3)})),function(){var e=function(){if((document.documentElement.scrollTop>0||window.pageYOffset>0)&&!1===m)l.shrink_header(),l.expand_placeholder_div(),m=!0;else if((document.documentElement.scrollTop<=0||window.pageYOffset<=0)&&!0===m)l.expand_header(),l.shrink_placeholder_div(),m&&h&&l.replace_vid_bg(),m=!1;else if((document.documentElement.scrollTop>0||window.pageYOffset>0)&&!0===m)return};document.documentElement.scrollTop>0||window.pageYOffset,e();var o=t((function(){m=!1}),800),i=n((function(){e()}),100);window.addEventListener("resize",t((function(){e(),u=!0,clearTimeout(d)}),200)),l.header.addEventListener("mouseover",(function(){u=!0,clearTimeout(d)})),l.header.addEventListener("mousemove",(function(){u=!0,clearTimeout(d)})),l.header.addEventListener("touchstart",(function(){u=!0,clearTimeout(d)}),{passive:!0}),l.header.addEventListener("touchmove",(function(){u=!0,clearTimeout(d)}),{passive:!0}),l.header.addEventListener("mouseout",(function(){(document.documentElement.scrollTop>0||window.pageYOffset>0)&&!l.bot_nav_collapse.classList.contains("show")&&E()})),l.header_btns.forEach((function(e){e.addEventListener("focus",(function(){u=!0,clearTimeout(d)}))})),l.header_links.forEach((function(e){e.addEventListener("focus",(function(){u=!0,clearTimeout(d)}))})),document.addEventListener("scroll",n((function(){if(u=!(document.documentElement.scrollTop>0||window.pageYOffset>0),clearTimeout(d),u)l.header.classList.remove("hide-header"),l.header.classList.add("show-header");else{if(l.bot_nav_collapse.classList.contains("show"))return void(u=!0);l.header.classList.remove("hide-header"),l.header.classList.add("show-header"),E()}}),100),{passive:!0}),document.addEventListener("scroll",t((function(){var e,t;e=l.scroll_indicator,t=document.documentElement.scrollTop/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100,e.style.width=t+"%"}),200),{passive:!0}),document.addEventListener("scroll",o,{passive:!0}),document.addEventListener("touchmove",o,{passive:!0}),document.addEventListener("touchstart",o,{passive:!0}),document.addEventListener("scroll",i,{passive:!0}),document.addEventListener("touchmove",i,{passive:!0}),document.addEventListener("touchstart",i,{passive:!0})}(),l.animate_letters(),l.my_age.innerHTML=(b=Date.now()-new Date("26 March 1990"),w=new Date(b),Math.abs(w.getUTCFullYear()-1970)),l.summary_btn.addEventListener("click",(function(){l.change_about_info()})),k=360,L=[window.matchMedia("(max-width: 320.98px)"),window.matchMedia("(min-width: 321px) and (max-width: 575.98px)"),window.matchMedia("(min-width: 576px) and (max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)"),window.matchMedia("(min-width: 992px) and (max-width: 1199.98px)"),window.matchMedia("(min-width: 1200px) and (max-width: 1399.98px)"),window.matchMedia("(min-width: 1400px)")],(S=function(){a(L[0],(function(){return k=274}),null),a(L[1],(function(){return k=296}),null),a(L[2],(function(){return k=360}),null),a(L[3],(function(){return k=328}),null),a(L[4],(function(){return k=360}),null),a(L[5],(function(){return k=980/3}),null),a(L[6],(function(){return k=360}),null)})(),window.addEventListener("resize",t((function(){S(),l.my_carousel_content.scrollLeft=0}),500)),l.my_carousel_prev_btn.addEventListener("click",n((function(){l.grow_btn_onclick(l.my_carousel_prev_btn,1.25,250),l.scroll_horizontally(l.my_carousel_content,-k),l.scroll_end(l.my_carousel_content,20)}),700)),l.my_carousel_next_btn.addEventListener("click",n((function(){l.grow_btn_onclick(l.my_carousel_next_btn,1.25,250),l.scroll_horizontally(l.my_carousel_content,k),l.scroll_start(l.my_carousel_content,20)}),700)),function(){var e,n=[window.matchMedia("(max-width: 320.98px)"),window.matchMedia("(min-width: 321px) and (max-width: 575.98px)"),window.matchMedia("(min-width: 576px) and (max-width: 767.98px)"),window.matchMedia("(min-width: 768px) and (max-width: 991.98px)"),window.matchMedia("(min-width: 992px)")],o=function(){a(n[0],(function(){return e=140}),null),a(n[1],(function(){return e=150}),null),a(n[2],(function(){return e=250}),null),a(n[3],(function(){return e=300}),null),a(n[4],(function(){return e=void 0}),null)};o();var i=function(){var t;TagCloud(".tag-cloud-content",["OOP","SOC / MVC","REST-APIs","Data-Structures","Continuous-Integration","UI / UX","Testing","Version-Control","Debugging","Algorithms","App-Development","Responsive-Design","Security","Optimization","Customer-Service"],{radius:null!==(t=e)&&void 0!==t?t:340,maxSpeed:"fast",initSpeed:"slow",direction:135,keep:!1}),document.querySelector(".tagcloud"),document.querySelectorAll(".tagcloud--item").forEach((function(e){e.style.color=s();var t=!1,n=!1;e.addEventListener("click",(function(){t&&n?(e.style.fontSize="0",setTimeout((function(){e.style.color=s(),e.style.fontSize="initial",e.style.fontWeight="400",t=!1,n=!1}),5e3)):t&&!n?(e.style.color="var(--theme-colour-4)",e.style.fontSize="140%",n=!0):(e.style.color="var(--theme-colour-1)",e.style.fontSize="120%",t=!0)}))}))};new Promise((function(e,t){return setTimeout(e,3100)})).then((function(){return r.e(351).then(r.bind(r,351))})).then((function(e){return e.default})).then((function(){i(),window.addEventListener("resize",t((function(){o(),document.querySelector(".tagcloud")&&document.querySelector(".tagcloud").remove(),i()}),500))})).catch((function(e){return console.error("Failed to import TagCloud module: ",e)}))}(),l.populate_skill_rating(new p),function(){var e={},t="",n=(new bootstrap.Carousel(l.dev_project_carousel,{interval:5e3}),function(){t='\n                        <div class="flex-row row justify-content-between align-items-center">\n                            <div class="col-12 col-xl-6">\n                                <div id="dev-project-carousel" class="carousel slide" data-bs-ride="carousel">\n                                    <div class="carousel-indicators" id="dev-project-carousel-indicators">\n                                        \n                                    </div>\n\n                                    <div class="carousel-inner" id="dev-project-carousel-inner">\n\n                                    </div>\n\n                                    <button class="carousel-control-prev btn h-50 m-auto" type="button" data-bs-target="#dev-project-carousel" data-bs-slide="prev">\n                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>\n        \n                                        <span class="visually-hidden">Previous</span>\n                                    </button>\n    \n                                    <button class="carousel-control-next btn h-50 m-auto" type="button" data-bs-target="#dev-project-carousel" data-bs-slide="next">\n                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>\n        \n                                        <span class="visually-hidden">Next</span>\n                                    </button>\n                                </div>\n\n                                <button class="btn btn-custom-2 my-5 d-block mx-auto w-auto btn-anim" data-id="dev-project-gallery">\n                                    <span class="circle" aria-hidden="true">\n                                        <i class="fas fa-arrow-alt-circle-up"></i>\n                                    </span>\n\n                                    <span class="btn-text">\n                                        Return to Gallery\n                                    </span>\n                                </button>\n                            </div>\n\n                            <div class="col-12 col-xl-6">\n                                <div class="card-body py-5">\n                                    <h3 class="text-center">'.concat(e.name,"</h3>\n                                    \n                                    <p>\n                                        ").concat(e.description,"\n                                        <br><strong>Status: ").concat(e.status.msg,' <span class="').concat(e.status.class_code,' status-circle"></span></strong>\n                                    </p>\n                                    \n                                    <a href=').concat(e.link,' class="fs-5 text-reset text-decoration-none anim-link-2 w-auto" target="_blank" rel="noopener"><strong class="text-custom-2"><i class="fas fa-external-link-alt"></i> ').concat(e.link_header,"</strong> Now ").concat(e.link_note,"</a>\n                                    <br><a href=").concat(e.github_link,' class="fs-5 text-reset text-decoration-none anim-link-2 w-auto" target="_blank" rel="noopener"><strong class="text-custom-1"><i class="fas fa-external-link-alt"></i> Review</strong> Code ').concat(e.github_readme,'</a>\n\n                                    <h4 class="small text-left mt-3">Notes:</h4>\n                                    <ul class="text-wrap" id="dev-project-carousel-notes">\n                                        \n                                    </ul>  \n\n                                    <h3 class="small mt-3">- Built Using -</h3>\n\n                                    <div class="icon-row-sm mb-3" id="dev-project-carousel-icon-section">\n                                        \n                                    </div>\n                                </div>  \n\n                                <button class="btn btn-custom-2 my-5 d-block mx-auto w-auto btn-anim d-xl-none" data-id="dev-project-gallery">\n                                    <span class="circle" aria-hidden="true">\n                                        <i class="fas fa-arrow-alt-circle-up"></i>\n                                    </span>\n\n                                    <span class="btn-text">\n                                        Return to Gallery\n                                    </span>\n                                </button>\n                            </div>\n                        </div>\n                    ')}),o=function(){l.return_to_dev_gallery_btns=document.querySelectorAll("[data-id='dev-project-gallery']"),l.dev_project_carousel=document.getElementById("dev-project-carousel"),l.dev_project_carousel_indicator_section=document.getElementById("dev-project-carousel-indicators"),l.dev_project_carousel_inner_section=document.getElementById("dev-project-carousel-inner"),l.dev_project_carousel_note_section=document.getElementById("dev-project-carousel-notes"),l.dev_project_carousel_icon_section=document.getElementById("dev-project-carousel-icon-section"),e.carousel_img_list.srcs.forEach((function(t,n){var o=document.createElement("div");0===n?o.classList.add("carousel-item","active"):o.classList.add("carousel-item");var i=document.createElement("img");i.setAttribute("loading","lazy"),i.classList.add("d-block","w-100","p-3"),i.setAttribute("src",t),i.setAttribute("alt",e.carousel_img_list.alts[n]||"My project carousel image"),i.setAttribute("width","625"),i.setAttribute("height","500"),o.appendChild(i),"dev"==="dev".toLowerCase()?l.dev_project_carousel_inner_section.appendChild(o):"dev"==="client".toLowerCase()&&l.client_project_carousel_inner_section.appendChild(o)})),e.carousel_img_list.srcs.forEach((function(e,t){var n=document.createElement("button");n.setAttribute("type","button"),n.setAttribute("data-bs-target","#dev-project-carousel"),0===t?(n.classList.add("active","btn"),n.setAttribute("aria-current","true")):n.classList.add("btn"),n.setAttribute("aria-label","Slide ".concat(t+1)),("dev"==="dev".toLowerCase()||"dev"==="client".toLowerCase())&&l.dev_project_carousel_indicator_section.appendChild(n)})),e.notes.forEach((function(t,n){var o=document.createElement("li");o.innerHTML=t,n===e.notes.length-1&&o.classList.add("fw-bold"),"dev"==="dev".toLowerCase()?l.dev_project_carousel_note_section.appendChild(o):"dev"==="client".toLowerCase()&&l.client_project_carousel_note_section.appendChild(o)})),e.tool_icon_list.srcs.forEach((function(t,n){var o=document.createElement("img");o.setAttribute("loading","lazy"),o.classList.add("img-fluid","icon-disp-img-lg","m-3"),o.id=e.tool_icon_list.ids[n]||null,o.setAttribute("src",t),o.setAttribute("alt",e.tool_icon_list.alts[n]||"Tool and Technology Icon Badge"),o.setAttribute("width","85"),o.setAttribute("height","64"),"dev"==="dev".toLowerCase()?l.dev_project_carousel_icon_section.appendChild(o):"dev"==="client".toLowerCase()&&l.client_project_carousel_icon_section.appendChild(o)})),dispatchEvent(new Event("load"))},i=new _("Alien Mathvasion Game",2,"https://dnoelmathinvasiongame.netlify.app/html/gamescreen.html","Play","https://github.com/DNoel26/Alien_Mathvasion",!0);i.description="This project was designed for children ages 8+ with the goal of making math fun and engaging. It was built from scratch without any frameworks, libraries or dependencies using OOP and SOC principles, and with the \n                    intention of making code DRY and easier to maintain. Utilizes heavy JavaScript and DOM manipulation. Uses promises instead of while loops to track progress. Visual design is based on retro arcade Shoot-em Up games.\n                    Good luck surviving the hardest difficulty!\n                ",i.link_note="(expect audio - desktop version only!)",i.notes.push("Gameplay works completely but there are some minor bugs to fix, mainly in the areas of UI/UX. Very rarely, game does not load when difficulty is selected. Simply refresh the browser and try again."),i.notes.push("Some features are missing such as player entered details, data persistence, settings; to be implemented at a later date."),i.notes.push("Use Google Chrome for the best experience. Not yet fully responsive on smaller devices!"),i.add_imgs([],["./img/projects/webp/min/alien-mathvasion-1-min.webp","./img/projects/webp/min/alien-mathvasion-2-min.webp","./img/projects/webp/min/alien-mathvasion-3-min.webp"],[]),i.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp"],[]);var a=new _("Wix Site Clone",1,"https://dnoelmotorcyclewixclone.netlify.app/","View","https://github.com/DNoel26/Wix_Motorcycle_Trial",!0);a.description='This was my first official development project and was intended to be a pixel for pixel clone of\n                    <a target="_blank" class="text-reset text-decoration-none anim-link-3" rel="noopener" href="https://www.wix.com/website-template/view/html/773?siteId=32647d89-1460-4326-b084-a958bf90765d&metaSiteId=129904ad-3051-8c87-f69f-31ce75166f9c&originUrl=https%3A%2F%2Fwww.wix.com%2Fwebsite%2Ftemplates%3Fcriteria%3Dauto&tpClick=view_button">a selected, original Wix site</a>. \n                    It was built using HTML, CSS and without any JavaScript. \n                    Showcases the ability to take a design and convert it into a functional webpage or website.\n                ',a.link_note="(see link to cloned Wix site above)",a.notes.push("Only 3 pages were cloned for this project: Home, About and Contact."),a.notes.push("Website is fully responsive for all devices!"),a.add_imgs([],["./img/projects/webp/min/wix-clone-1-min.webp","./img/projects/webp/min/wix-clone-2-min.webp","./img/projects/webp/min/wix-clone-3-min.webp"],[]),a.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp"],[]);var r=new _("Cyberdise Online Store",2,"https://dnoelcyberdise.herokuapp.com/","Interact","https://github.com/DNoel26/Cyberdise-Dynamic-",!0);r.description="This project was my first official Full Stack development project and end-to-end C.R.U.D. application, and was designed to test everything I had learned (and more). This online store was built from scratch using MVC principles for the Back End code.\n                    The database was designed, normalized and created in MySQL. There are both customer and employee functionalities to experiment with. Features such as \n                    authorization, authentication, page protection, session storage, pagination, multiple queries per database call, database transactions, product tracking, product restocking, add to cart, payment processing using a modified PayPal SDK, to name a few, were all built from the ground up and implemented in this site.\n                    Check it out and let me know what you think! Please use only FAKE CREDENTIALS if creating a customer account to login. See my GitHub readme for instructions on how to log in as an employee to stock, re-stock and/or modify product data etc. \n                ",r.link_note="(fake credentials only - desktop version only!)",r.notes.push("Most other major features are working as expected. Search functionality not implemented just yet."),r.notes.push("Some UI elements are incomplete/missing."),r.notes.push("Not yet fully responsive on smaller devices!"),r.add_imgs([],["./img/projects/webp/min/cyberdise-online-store-1-min.webp","./img/projects/webp/min/cyberdise-online-store-2-min.webp","./img/projects/webp/min/cyberdise-online-store-3-min.webp","./img/projects/webp/min/cyberdise-online-store-4-min.webp","./img/projects/webp/min/cyberdise-online-store-5-min.webp"],[]),r.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp","./img/logos/handlebars-badge.webp","/img/logos/mysql-badge.webp","./img/logos/nodejs-badge.webp","./img/logos/express-logo.webp","./img/logos/postman-badge.webp"],[]);var s=new _("Movie Database",2,"https://dnoelmovieapidatabase.netlify.app/","View","https://github.com/DNoel26/Movie_Database",!0);s.description='\n                    This project was built from scratch to dynamically display "Now Showing" movie details and trailers via consuming multiple APIs; meaning all data shown on my website is requested\n                    and pulled from another server, and manipulated on my website using JavaScript. Design is based on retro theatres. Click the link and take a look at all the trending movies now!\n                ',s.link_note="(desktop version only!)",s.notes.push("All major features are working as expected. Pagination to be implemented."),s.notes.push("Not yet fully responsive on smaller devices!"),s.add_imgs([],["./img/projects/webp/min/movie-db-1-min.webp","./img/projects/webp/min/movie-db-2-min.webp","./img/projects/webp/min/movie-db-3-min.webp"],[]),s.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp"],[]);var c=new _("Amazon Clone",2,"https://clone-905a7.web.app/","Interact","https://github.com/DNoel26/Amazon_React_Clone",!0);c.description="\n                    This project was done as my hands on introduction to React.js and Firebase. In this particular case, I followed a tutorial and manipulated my code rather than building from scratch.\n                    The main purpose was to understand the concepts behind the very popular React.js framework, as well as to learn new methods for coding. Main project features are account creation, \n                    login, add to cart, and payment processing using Stripe API. Please use only FAKE CREDENTIALS if creating an account to login. See my GitHub readme for further instructions. \n                ",c.link_note="(fake credentials only - desktop version only!)",c.notes.push("All major features are working as expected."),c.notes.push("Not yet fully responsive on smaller devices!"),c.add_imgs([],["./img/projects/webp/min/amazon-clone-1-min.webp","./img/projects/webp/min/amazon-clone-2-min.webp","./img/projects/webp/min/amazon-clone-3-min.webp","./img/projects/webp/min/amazon-clone-4-min.webp"],[]),c.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp","./img/logos/javascript-badge.webp","./img/logos/react-badge.webp","./img/logos/firebase-badge.webp","./img/logos/nodejs-badge.webp","./img/logos/express-logo.webp"],[]);var d,u=new _("Real Estate Site",3,"https://presidentialrealtors-dev-static.netlify.app/","View","https://github.com/DNoel26/Presidential-Realtors-Static",!0);u.description="\n                    The focus of this project was for me to learn and implement modern design, user interface (UI) and user experience (UX) elements. It was built from scratch and will eventually be converted\n                    to a fully functional single page application (SPA) using React.js, MongoDB, Node.js and Express.js. Let me know what you think!\n                ",u.link_note="(desktop version only!)",u.notes.push("Most client side features work as expected. Focus of this project was on design elements rather than functionality."),u.notes.push("Project to be redone as an app (SPA) with the the functionalities expected of a real estate website."),u.notes.push("Not yet fully responsive on smaller devices!"),u.add_imgs([],["./img/projects/webp/min/real-estate-1-min.webp","./img/projects/webp/min/real-estate-2-min.webp","./img/projects/webp/min/real-estate-3-min.webp"],[]),u.add_tool_icons([],["./img/logos/html5-badge.webp","./img/logos/css3-badge.webp"],[]),(e=JSON.parse(sessionStorage.getItem("current_project")))&&(n(),l.dev_project_overview.innerHTML=t,o()),l.dev_project_gallery_btns.forEach((function(d){d.addEventListener("click",(function(){if("Alien Mathvasion Game"===d.dataset.devProject)e=i;else if("Wix Site Clone"===d.dataset.devProject)e=a;else if("Cyberdise Online Store"===d.dataset.devProject)e=r;else if("Movie Database"===d.dataset.devProject)e=s;else if("Amazon Clone"===d.dataset.devProject)e=c;else{if("Real Estate Site"!==d.dataset.devProject)return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e,t){return console.trace("Logged Values[".concat(t,"]: "),e)}))}("PROJECT NOT LOADED CORRECTLY");e=u}n(),sessionStorage.setItem("current_project",JSON.stringify(e)),l.dev_project_overview.innerHTML=t,o(),l.dev_project_overview.scrollIntoView(),l.return_to_dev_gallery_btns.forEach((function(e){e.addEventListener("click",(function(){l.dev_project_gallery.scrollIntoView()}))}))}))})),d=l.dev_project_overview,new MutationObserver((function(e,t){var n,o=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,i=function(){};return{s:i,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,r=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return r=e.done,e},e:function(e){s=!0,a=e},f:function(){try{r||null==n.return||n.return()}finally{if(s)throw a}}}}(e);try{for(o.s();!(n=o.n()).done;){var i=n.value;"childList"===i.type||"attributes"===i.type||i.type}}catch(e){o.e(e)}finally{o.f()}})).observe(d,{attributes:!1,childList:!0,subtree:!0}),l.return_to_dev_gallery_btns.forEach((function(e){e.addEventListener("click",(function(){l.dev_project_gallery.scrollIntoView()}))}))}(),function(){var n;new IntersectionObserver((function(e,o){e.forEach((function(e){e.isIntersecting&&r.e(905).then(r.bind(r,905)).then((function(e){return e.default})).then((function(e){var o=new e("https://restcountries.eu/rest/v2/all"),i=!1;n=function(){document.querySelectorAll("option").forEach((function(e){if(e.value&&e.selected&&""!==e.value){var t=e.getAttribute("data-flag"),n=e.getAttribute("data-calling-codes"),o=document.createElement("img");o.setAttribute("src",t),o.setAttribute("alt","Country flag for ".concat(e.value)),o.setAttribute("width","40px"),o.setAttribute("height","auto"),i||(l.phone.value="+".concat(n,"-")),l.country_select.labels[0].children[1]&&"IMG"===l.country_select.labels[0].children[1].tagName&&l.country_select.labels[0].children[1].remove(),l.country_select.labels[0].appendChild(o)}else e.selected&&!e.value&&l.country_select.labels[0].children[1]&&"IMG"===l.country_select.labels[0].children[1].tagName&&l.country_select.labels[0].children[1].remove()}))},o.fetch_api().then((function(e){e.forEach((function(e){var t=document.createElement("option");t.setAttribute("value",e.name),t.setAttribute("data-flag",e.flag),t.setAttribute("data-calling-codes",e.callingCodes),t.innerHTML=t.value,l.country_select.appendChild(t)})),l.phone.addEventListener("keyup",t((function(){i=!0}),500)),l.country_select.addEventListener("change",t((function(){n()}),300))})).catch((function(e){return console.error("Error: ",e)})).then((function(){return a()}))})).catch((function(e){return console.log("Failed to import API module: ",e)}))}))}),{root:null,rootMargin:"200px",threshold:0}).observe(l.my_form);var a=function(){var a=[function(){return l.display_form_validation_msg()}];Array.prototype.slice.call(l.forms_need_validation).forEach((function(s,c){s.querySelectorAll(".form-data").forEach((function(e){"INPUT"===e.tagName&&(e.value=sessionStorage.getItem(e.name)),"TEXTAREA"===e.tagName&&(e.value=sessionStorage.getItem(e.name)),"SELECT"===e.tagName&&(e.value=sessionStorage.getItem(e.name)||""),n(),e.addEventListener("input",t((function(){sessionStorage.setItem(e.name,e.value)}),500))})),s.addEventListener("submit",(function(t){t.preventDefault(),t.stopImmediatePropagation(),r.e(417).then(r.bind(r,417)).then((function(e){return e.default})).then((function(t){if(!s.checkValidity())return new Promise((function(e,t){s.classList.add("was-validated"),e()})).then((function(){a[c]()})).catch((function(e){console.error('Failed to add "was-validated" class to Bootstrap form: '.concat(e))}));var n=new t(l.my_form);n.method=l.my_form.method,n.url=l.my_form.action,n.data=new FormData(n.form),n.success_msg="Hi ".concat(n.get_form_data("first_name").trim(),"! ")+n.success_msg,n.error_msg="Sorry ".concat(n.get_form_data("first_name").trim(),"! ")+n.error_msg;var r=e(o,n.form,l.my_form_button,l.my_form_status,n.success_msg),d=e(i,l.my_form_status,n.error_msg);!function(e,t,n,o,i,a){var r=new XMLHttpRequest;r.open(e,t),r.setRequestHeader("Accept","application/json"),r.onreadystatechange=function(){r.readyState===XMLHttpRequest.DONE&&(200===r.status?(o(),a(r.status)):(i(),a(r.status)))},r.send(n)}(n.method,n.url,n.data,r,d,(function(e){200===e&&y((function(){s.classList.remove("was-validated"),sessionStorage.clear(),l.country_select.labels[0].children[1]&&"IMG"===l.country_select.labels[0].children[1].tagName&&l.country_select.labels[0].children[1].remove()}))}))})).catch((function(e){return console.error("Failed to import Formspree module: ",e)}))}),!1)}))}}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9jc3MgbG9hZGluZyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2Fzc2V0cy9EYXJuZWxsX05vZWxfRlNEX1Jlc3VtZV9GZWJfMjAyMS5wZGYiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL3NyYy9hc3NldHMvRGFybmVsbF9Ob2VsX0ZTRF9SZXN1bWVfTWFyXzIwMjEucGRmIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9zcmMvYXNzZXRzL015X0dvb2dsZV9EZXNrdG9wX0F1ZGl0LnBkZiIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2Fzc2V0c3xzeW5jfC8ucGRmJCIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL21lZGlhfHN5bmN8Ly5tcDQkIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvYW1kIG9wdGlvbnMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL3NyYy9qcy9CdXNpbmVzc19Mb2dpYy9GdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL3NyYy9qcy9VSV9Mb2dpYy9VSS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2pzL0J1c2luZXNzX0xvZ2ljL1NraWxsUmF0aW5nLmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vTXlfRGV2X1BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzIiwid2VicGFjazovL015X0Rldl9Qb3J0Zm9saW8vLi9zcmMvanMvQnVzaW5lc3NfTG9naWMvUHJvamVjdC5qcyIsIndlYnBhY2s6Ly9NeV9EZXZfUG9ydGZvbGlvLy4vc3JjL2pzL2FwcC5qcyJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJsb2FkU3R5bGVzaGVldCIsImluc3RhbGxlZENzc0NodW5rcyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsInZhbHVlIiwibWFwIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJpZCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJvIiwiZSIsIkVycm9yIiwiY29kZSIsImtleXMiLCJyZXNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJhbWRPIiwiZCIsImRlZmluaXRpb24iLCJnZXQiLCJmIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJtaW5pQ3NzRiIsImhtZCIsImNyZWF0ZSIsImNoaWxkcmVuIiwic2V0IiwicHJvcCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImwiLCJ1cmwiLCJkb25lIiwicHVzaCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInRpbWVvdXQiLCJuYyIsInNldEF0dHJpYnV0ZSIsInNyYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJwcmV2IiwiZXZlbnQiLCJvbmVycm9yIiwib25sb2FkIiwiY2xlYXJUaW1lb3V0IiwiZG9uZUZucyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImZvckVhY2giLCJmbiIsInNldFRpbWVvdXQiLCJiaW5kIiwidHlwZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInAiLCJyZWplY3QiLCJocmVmIiwiZnVsbGhyZWYiLCJleGlzdGluZ0xpbmtUYWdzIiwiZGF0YUhyZWYiLCJ0YWciLCJyZWwiLCJleGlzdGluZ1N0eWxlVGFncyIsImZpbmRTdHlsZXNoZWV0IiwibGlua1RhZyIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiZXJyIiwicmVxdWVzdCIsImNyZWF0ZVN0eWxlc2hlZXQiLCI4MjYiLCJtaW5pQ3NzIiwidGhlbiIsImluc3RhbGxlZENodW5rcyIsImoiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwiZXJyb3IiLCJyZWFsU3JjIiwibWVzc2FnZSIsIm5hbWUiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsIndyYXBwZXJfbm9fZXhlYyIsImZ1bmMiLCJhcmdzIiwiZGVib3VuY2UiLCJ0aW1lciIsImluX2RlYm91bmNlIiwiY29udGV4dCIsInRoaXMiLCJhcmd1bWVudHMiLCJhcHBseSIsInRocm90dGxlIiwiaW5fdGhyb3R0bGUiLCJpbml0aWFsIiwiY29uc29sZSIsImZvcm1fc3VibWl0X3N1Y2Nlc3MiLCJmb3JtIiwiYnV0dG9uIiwic3RhdHVzIiwibXNnIiwicmVzZXQiLCJpbm5lckhUTUwiLCJmb3JtX3N1Ym1pdF9lcnJvciIsIm1lZGlhX3F1ZXJpZXMiLCJtcSIsImZ1bmNfdHJ1ZSIsImZ1bmNfZmFsc2UiLCJtYXRjaGVzIiwiZ2VuZXJhdGVfZGFya19jb2xvcl9oZXgiLCJjb2xvciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBvdyIsInRvU3RyaW5nIiwic2xpY2UiLCJVSSIsImJvZHkiLCJnb29nbGVfcHJldmlld19tb2RhbF9idG4iLCJxdWVyeVNlbGVjdG9yIiwiZ29vZ2xlX3ByZXZpZXdfbW9kYWwiLCJsYXp5X2ltZ3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGF6eV9zb3VyY2VzIiwibGF6eV9iZ3MiLCJoZWFkZXIiLCJoZWFkZXJfdmlkIiwiaGVhZGVyX3ZpZF9tdWx0aSIsImhlYWRlcl9idG5zIiwiaGVhZGVyX2xpbmtzIiwibmF2X2NvbnRhaW5lciIsInRvcF9uYXYiLCJib3RfbmF2IiwiYm9keV9wbGFjZWhvbGRlciIsImhlYWRlcl9lbXB0eV9kaXYiLCJzY3JvbGxfaW5kaWNhdG9yIiwiYWN0aXZlX2xpc3RzIiwiYWN0aXZlX2xpbmsiLCJhbmNob3JfbGlua3MiLCJ0b2dnbGVyX2J0biIsInRvZ2dsZXJfYnRuX2ljb24iLCJ0b2dnbGVyX2J0bl93b3JkIiwibmF2YmFyX3Njcm9sbCIsImJvdF9uYXZfY29sbGFwc2UiLCJpbnRyb19tc2ciLCJ3ZWxjb21lIiwidGV4dF93cmFwcGVyX21sMTMiLCJoZWFkZXJfZGl2aWRlciIsImFib3V0X3N1bW1hcnlfd3JhcHBlciIsIm15X2FnZSIsInN1bW1hcnlfY29udGFpbmVycyIsInN1bW1hcnlfYnRuIiwibXlfY2Fyb3VzZWxfcHJldl9idG4iLCJteV9jYXJvdXNlbF9uZXh0X2J0biIsIm15X2Nhcm91c2VsX3dyYXBwZXIiLCJteV9jYXJvdXNlbF9jb250ZW50IiwibXlfY2Fyb3VzZWxfaXRlbXMiLCJza2lsbF9yYXRpbmdzIiwic2tpbGxfcmF0aW5nc19iZWdpbm5lciIsInNraWxsX3JhdGluZ3Nfbm92aWNlIiwic2tpbGxfcmF0aW5nc19pbnRlcm1lZGlhdGUiLCJza2lsbF9yYXRpbmdzX2FkdmFuY2VkIiwic2tpbGxfcmF0aW5nc19leHBlcnQiLCJyZXR1cm5fdG9fZGV2X2dhbGxlcnlfYnRucyIsImRldl9wcm9qZWN0X2dhbGxlcnkiLCJnZXRFbGVtZW50QnlJZCIsImRldl9wcm9qZWN0X292ZXJ2aWV3IiwiZGV2X3Byb2plY3RfZ2FsbGVyeV9idG5zIiwiZGV2X3Byb2plY3RfY2Fyb3VzZWwiLCJkZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbiIsImRldl9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb24iLCJkZXZfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb24iLCJkZXZfcHJvamVjdF9jYXJvdXNlbF9pY29uX3NlY3Rpb24iLCJkZXZfcHJvamVjdF9jYXJvdXNlbF9uZXh0IiwiZGV2X3Byb2plY3RfY2Fyb3VzZWxfcHJldiIsImNsaWVudF9wcm9qZWN0X2dhbGxlcnkiLCJjbGllbnRfcHJvamVjdF9vdmVydmlldyIsImNsaWVudF9wcm9qZWN0X2dhbGxlcnlfYnRucyIsImNsaWVudF9wcm9qZWN0X2Nhcm91c2VsIiwiY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfaW5kaWNhdG9yX3NlY3Rpb24iLCJjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9pbm5lcl9zZWN0aW9uIiwiY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfbm90ZV9zZWN0aW9uIiwiY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfaWNvbl9zZWN0aW9uIiwiY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfbmV4dCIsImNsaWVudF9wcm9qZWN0X2Nhcm91c2VsX3ByZXYiLCJmb3JtX2RhdGEiLCJjb3VudHJ5X3NlbGVjdCIsInBob25lIiwidmFsaWRfZmVlZGJhY2tfZm5hbWUiLCJ2YWxpZF9mZWVkYmFja19sbmFtZSIsInZhbGlkX2ZlZWRiYWNrX2VtYWlsIiwidmFsaWRfZmVlZGJhY2tfY291bnRyeSIsInZhbGlkX2ZlZWRiYWNrX21lc3NhZ2UiLCJpbnZhbGlkX2ZlZWRiYWNrX2ZuYW1lIiwiaW52YWxpZF9mZWVkYmFja19sbmFtZSIsImludmFsaWRfZmVlZGJhY2tfZW1haWwiLCJpbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnkiLCJpbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2UiLCJmb3Jtc19uZWVkX3ZhbGlkYXRpb24iLCJteV9mb3JtIiwibXlfZm9ybV9idXR0b24iLCJteV9mb3JtX3N0YXR1cyIsImdyZWNhcHRjaGFzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNyZWF0ZV9zY3JpcHRzIiwic3JjcyIsImxvYWRfYmdfdmlkIiwidmlkIiwiZGF0YV9zcmMiLCJkYXRhX21lZGlhIiwid2luZG93IiwibWF0Y2hNZWRpYSIsInBhcmVudEVsZW1lbnQiLCJsb2FkIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkX3Bvc3Rlcl9pbWdfc20iLCJ0b2dnbGVyX21lbnVfaWNvbl9zd2l0Y2giLCJzZXRJbnRlcnZhbCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiYWRkIiwicmVtb3ZlIiwic2lkZV9tZW51X3JldmVhbCIsInNpZGVfbWVudV9oaWRlIiwibW9iaWxlX21lbnVfcmV2ZWFsIiwibW9iaWxlX21lbnVfaGlkZSIsIm5vX21lbnUiLCJzaHJpbmtfaGVhZGVyIiwic3R5bGUiLCJoZWlnaHQiLCJib3hTaGFkb3ciLCJwYXVzZSIsImJhY2tncm91bmQiLCJleHBhbmRfcGxhY2Vob2xkZXJfZGl2IiwicmVwbGFjZSIsImV4cGFuZF9oZWFkZXIiLCJtcV9saW1pdHMiLCJwbGF5Iiwic2hyaW5rX3BsYWNlaG9sZGVyX2RpdiIsInJlcGxhY2VfdmlkX2JnIiwiYmFja2dyb3VuZFNpemUiLCJmaXhlZF9ib3R0b21faGVhZGVyIiwibm9fZml4ZWRfYm90dG9tX2hlYWRlciIsImFuaW1hdGVfbGV0dGVycyIsInRleHRDb250ZW50IiwiYW5pbWUiLCJ0aW1lbGluZSIsImxvb3AiLCJ0YXJnZXRzIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJvcGFjaXR5IiwiZWFzaW5nIiwiZHVyYXRpb24iLCJkZWxheSIsImVsIiwiY2hhbmdlX2Fib3V0X2luZm8iLCJncm93X2J0bl9vbmNsaWNrIiwiYnRuIiwic2l6ZSIsInRpbWUiLCJ0cmFuc2Zvcm0iLCJzY3JvbGxfaG9yaXpvbnRhbGx5IiwicHgiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsX3N0YXJ0IiwicHhfbGltaXQiLCJzY3JvbGxXaWR0aCIsImNsaWVudFdpZHRoIiwic2Nyb2xsX2VuZCIsInBvcHVsYXRlX3NraWxsX3JhdGluZyIsIlNraWxsIiwicmF0aW5nX2RpdiIsImdldFJhdGluZyIsImRpc3BsYXlfZm9ybV92YWxpZGF0aW9uX21zZyIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwicmFuayIsImNsYXNzaWZpY2F0aW9uIiwiZmlsbGVkX2ljb24iLCJyZXBlYXQiLCJlbXB0eV9pY29uIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpc0FycmF5IiwiaXRlciIsIml0ZXJhdG9yIiwiZnJvbSIsIm1pbkxlbiIsIm4iLCJjb25zdHJ1Y3RvciIsInRlc3QiLCJzdGF0dXNfbXNnIiwibGluayIsImxpbmtfaGVhZGVyIiwiZ2l0aHViX2xpbmsiLCJnaXRodWJfcmVhZG1lIiwiY2xhc3NfY29kZSIsImJ0bl9pZCIsImFsdCIsImlkcyIsImFsdHMiLCJjYXJvdXNlbF9pbWdfbGlzdCIsInRvb2xfaWNvbl9saXN0IiwibG9nIiwiY2FjaGUiLCJpbXBvcnRBbGwiLCJyZWNhcHRjaGFDYWxsYmFjayIsInJlcXVpcmUiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdF9sYXp5X2ltZ3MiLCJpbml0X2xhenlfc291cmNlcyIsImluaXRfbGF6eV9iZ3MiLCJpbml0X2dyZWNhcHRjaGFzIiwib3B0aW9ucyIsInJvb3QiLCJyb290TWFyZ2luIiwidGhyZXNob2xkIiwibGF6eV9pbWdfb2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJvYnNlcnZlciIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJsYXp5X2ltYWdlIiwibGF6eV9kYXRhX3NyYyIsImxhenlfZGF0YV9zcmNzZXQiLCJoYXNBdHRyaWJ1dGUiLCJ1bm9ic2VydmUiLCJsYXp5X2ltZyIsIm9ic2VydmUiLCJsYXp5X3NvdXJjZV9vYnNlcnZlciIsImxhenlfc291cmNlIiwibGF6eV9iZ19vYnNlcnZlciIsImxhenlfYmciLCJncmVjYXB0Y2hhX29ic2VydmVyIiwiZ3JlY2FwdGNoYV9jaGVjayIsImdyZWNhcHRjaGEiLCJyZW5kZXIiLCJzaXRla2V5IiwiY2FsbGJhY2siLCJlbGVtZW50IiwiZ29vZ2xlX3ByZXZpZXdfYnRuX2lzX2NsaWNrZWQiLCJpbnRlcnNlY3Rpb25SZWN0Iiwic2Nyb2xsX3RpbWVyIiwic2hvd19oZWFkZXIiLCJzY3JvbGxfbW92ZWQiLCJoZWFkZXJfdmlkX2VuZGVkIiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJjbGljayIsInNpZGVfbWVudV90b2dnbGVyIiwibW9iaWxlX21lbnVfdG9nZ2xlciIsImRpZmZfbXMiLCJhZ2VfZHQiLCJzY3JvbGxfYW10Iiwic2Nyb2xsX2FtdF9tb2RpZmllciIsImhlYWRlcl90aW1lciIsImhlYWRlcl90cmFuc2Zvcm0iLCJzY3JvbGxfbW92ZWRfZGVib3VuY2Vfd3JhcHBlciIsInN0aWNreV9oZWFkZXJfdGhyb3R0bGVfd3JhcHBlciIsInBhc3NpdmUiLCJpbmRpY2F0b3IiLCJzY3JvbGxlZCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIndpZHRoIiwiRGF0ZSIsIm5vdyIsImFicyIsImdldFVUQ0Z1bGxZZWFyIiwidGFnY2xvdWRfcmFkaXVzIiwidGFnY2xvdWRfcmVzaXplciIsInRhZ2Nsb3VkX2xvYWRlciIsIlRhZ0Nsb3VkIiwicmFkaXVzIiwibWF4U3BlZWQiLCJpbml0U3BlZWQiLCJkaXJlY3Rpb24iLCJrZWVwIiwiaXRlbSIsImNsaWNrZWRfb25jZSIsImNsaWNrZWRfdHdpY2UiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJTa2lsbF9SYXRpbmciLCJjdXJyZW50X3Byb2plY3QiLCJuZXdfaW5uZXJfaHRtbCIsImNoYW5nZV9wcm9qZWN0IiwiYm9vdHN0cmFwIiwiQ2Fyb3VzZWwiLCJpbnRlcnZhbCIsImRlc2NyaXB0aW9uIiwibGlua19ub3RlIiwicmVpbml0aWFsaXplX2VsIiwiaW5kZXgiLCJkaXYiLCJpbWciLCJ0b0xvd2VyQ2FzZSIsIm5vdGVzIiwibm90ZSIsImxpc3QiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJBbGllbl9NYXRodmFzaW9uIiwiUHJvamVjdCIsImFkZF9pbWdzIiwiYWRkX3Rvb2xfaWNvbnMiLCJXaXhfQ2xvbmUiLCJDeWJlcmRpc2UiLCJNb3ZpZV9EYXRhYmFzZSIsIkFtYXpvbl9DbG9uZSIsInRhcmdldF9ub2RlIiwiUmVhbF9Fc3RhdGVfU2l0ZSIsIkpTT04iLCJwYXJzZSIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImRhdGFzZXQiLCJkZXZQcm9qZWN0IiwiZGF0dW0iLCJ0cmFjZSIsImxvZ2dlciIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zTGlzdCIsIm11dGF0aW9uIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJzZWxlY3RfY2hhbmdlIiwiQVBJIiwiQ291bnRyeV9BUEkiLCJ1c2VyX3R5cGVkIiwib3B0aW9uIiwic2VsZWN0ZWQiLCJmbGFnIiwiY2FsbGluZ19jb2RlcyIsImZldGNoX2FwaSIsIm5ld19vcHRpb24iLCJjYWxsaW5nQ29kZXMiLCJmb3Jtc3ByZWUiLCJ2YWxpZGF0aW9uX21zZ3MiLCJ0YWdOYW1lIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJGb3Jtc3ByZWUiLCJjaGVja1ZhbGlkaXR5IiwiTXlfRm9ybSIsIm1ldGhvZCIsIkZvcm1EYXRhIiwic3VjY2Vzc19tc2ciLCJnZXRfZm9ybV9kYXRhIiwidHJpbSIsImVycm9yX21zZyIsInN1Y2Nlc3MiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIkRPTkUiLCJzZW5kIiwiYWpheCIsImNsZWFyIl0sIm1hcHBpbmdzIjoiVUFBSUEsRUFDQUMsRUN3Q0FDLEVBU0FDLEUsOEJDbERXLFNBQVNDLEVBQWdCQyxFQUFVQyxHQUNoRCxLQUFNRCxhQUFvQkMsR0FDeEIsTUFBTSxJQUFJQyxVQUFVLHFDLDZDQ0Z4QixTQUFTQyxFQUFrQkMsRUFBUUMsR0FDakMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlELEVBQU1FLE9BQVFELElBQUssQ0FDckMsSUFBSUUsRUFBYUgsRUFBTUMsR0FDdkJFLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFDakRELEVBQVdFLGNBQWUsRUFDdEIsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUNqREMsT0FB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T21SLEdBQ3BELElBQU1zSCxFQUFNLElBQUlDLGVBQ2hCRCxFQUFJRSxLQUFLVCxFQUFRNWIsR0FDakJtYyxFQUFJRyxpQkFBaUIsU0FBVSxvQkFDL0JILEVBQUlJLG1CQUFxQixXQUNqQkosRUFBSUssYUFBZUosZUFBZUssT0FDbkIsTUFBZk4sRUFBSTVXLFFBRUoyVyxJQUNBckgsRUFBU3NILEVBQUk1VyxVQUdiN0IsSUFDQW1SLEVBQVNzSCxFQUFJNVcsV0FHZDRXLEVBQUlPLEtBQUsxWSxHVTRrQ2dCMlksQ0FBS2hCLEVBQVFDLE9BQVFELEVBQVEzYixJQUFLMmIsRUFBUTNYLEtBQU1rWSxFQUFTeFksR0FBTyxTQUFDNkIsR0FFOUMsTUFBWEEsR0FDQXFOLEdBQWtCLFdBRWR2TixFQUFLMEgsVUFBVUcsT0FBTyxpQkFDdEJ3TSxlQUFla0QsUUFDWG5XLHdDQUErRixRQUFwREEsZ0RBQTJEQSx5REFsQzlILE9BeUNPLFNBQUF6RCxHQUFHLE9BQUltQyxRQUFRekIsTUFBTSxzQ0FBdUNWLFNBQ3BFLE9BbEpmLE8iLCJmaWxlIjoiaW5kZXguYnVuZGxlLjYyNTliZDFmMjY0N2M3YjczNTVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiTXlfRGV2X1BvcnRmb2xpbzpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpID0+IHtcblx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0dmFyIHJlYWxIcmVmID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5ocmVmIHx8IGZ1bGxocmVmO1xuXHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZWFsSHJlZiArIFwiKVwiKTtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBDU1MgY2h1bmtzXG52YXIgaW5zdGFsbGVkQ3NzQ2h1bmtzID0ge1xuXHQ4MjY6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5taW5pQ3NzID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdHZhciBjc3NDaHVua3MgPSB7XCIxNzdcIjoxLFwiMzk4XCI6MX07XG5cdGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSkgcHJvbWlzZXMucHVzaChpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0pO1xuXHRlbHNlIGlmKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSAhPT0gMCAmJiBjc3NDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSA9IGxvYWRTdHlsZXNoZWV0KGNodW5rSWQpLnRoZW4oKCkgPT4ge1xuXHRcdFx0aW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHR9LCAoZSkgPT4ge1xuXHRcdFx0ZGVsZXRlIGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXTtcblx0XHRcdHRocm93IGU7XG5cdFx0fSkpO1xuXHR9XG59O1xuXG4vLyBubyBobXIiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufSIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL0Rhcm5lbGxfTm9lbF9GU0RfUmVzdW1lX0ZlYl8yMDIxLnBkZlwiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvRGFybmVsbF9Ob2VsX0ZTRF9SZXN1bWVfTWFyXzIwMjEucGRmXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9NeV9Hb29nbGVfRGVza3RvcF9BdWRpdC5wZGZcIjsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vRGFybmVsbF9Ob2VsX0ZTRF9SZXN1bWVfRmViXzIwMjEucGRmXCI6IDU0NCxcblx0XCIuL0Rhcm5lbGxfTm9lbF9GU0RfUmVzdW1lX01hcl8yMDIxLnBkZlwiOiA0MDMsXG5cdFwiLi9NeV9Hb29nbGVfRGVza3RvcF9BdWRpdC5wZGZcIjogNzE2XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNDc2OyIsInZhciBtYXAgPSB7XG5cdFwiLi9sYXB0b3Ata2V5Ym9hcmQtdmlkLWhxLm1wNFwiOiA1MzNcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMjU7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uYW1kTyA9IHt9OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuXCIgKyB7XCIxNzdcIjpcImIwMWE0MTQ4ZDFhMGNhNDZmZDI2XCIsXCIzNTFcIjpcImViM2MwYmI3N2ExZjdhYWM0NTE3XCIsXCIzOThcIjpcIjU5YmQxZjAzZDNmM2E3ZTkxZjgwXCIsXCI0MTdcIjpcIjM0NzBkOTNlZGQ4YTIzYjUwMGEwXCIsXCI5MDVcIjpcIjI2ZTliMTk0ZjZkZmI4NTMxZmNmXCJ9W2NodW5rSWRdICsgXCIuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRiA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJzdHlsZXMvXCIgKyBjaHVua0lkICsgXCIuXCIgKyB7XCIxNzdcIjpcImJkNDI5M2I3OGM1ZmIwMDA1MGJlXCIsXCIzOThcIjpcImU3NjQzNmUwNWJmMzdhODY5YmI5XCJ9W2NodW5rSWRdICsgXCIuY3NzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6ICgpID0+IHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ4MjY6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHNbaV1dID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rTXlfRGV2X1BvcnRmb2xpb1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtNeV9EZXZfUG9ydGZvbGlvXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2VyKC4uLmRhdGEpIHsgIFxyXG4gICAgZGF0YS5mb3JFYWNoKChkYXR1bSwgaW5kZXgpID0+IHtcclxuICAgICAgICByZXR1cm4gY29uc29sZS50cmFjZShgTG9nZ2VkIFZhbHVlc1ske2luZGV4fV06IGAsIGRhdHVtKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBwZXJfbm9fZXhlYyhmdW5jLCAuLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZnVuYyguLi5hcmdzKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBwZXJfZXhlYyhmdW5jLCAuLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gZnVuYyguLi5hcmdzKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB0aW1lcikge1xyXG4gICAgbGV0IGluX2RlYm91bmNlO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcywgYXJndW1lbnRzLCBmdW5jKTtcclxuXHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KGluX2RlYm91bmNlKTtcclxuICAgICAgICBpbl9kZWJvdW5jZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKVxyXG4gICAgICAgIH0sICh0aW1lcikpO1xyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB0aW1lcikge1xyXG4gICAgbGV0IGluX3Rocm90dGxlO1xyXG4gICAgbGV0IGluaXRpYWwgPSAwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgLy9sb2dnZXIoaW5fdGhyb3R0bGUsIGluaXRpYWwpXHJcblxyXG4gICAgICAgIGlmKGluX3Rocm90dGxlICE9PSB1bmRlZmluZWQpIHsgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIGluX3Rocm90dGxlID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coaW5fdGhyb3R0bGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluX3Rocm90dGxlID0gdW5kZWZpbmVkOyBcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGluaXRpYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKGNvbnRleHQsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSwgKGluaXRpYWwgPz8gdGltZXIpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYoaW5pdGlhbCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsID0gMDtcclxuICAgICAgICAgICAgICAgIH0sICh0aW1lcikpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybV9zdWJtaXRfc3VjY2Vzcyhmb3JtLCBidXR0b24sIHN0YXR1cywgbXNnKSB7XHJcbiAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcclxuICAgIHN0YXR1cy5pbm5lckhUTUwgPSBtc2cgPz8gXCJTdWJtaXNzaW9uIFN1Y2Nlc3NmdWwhXCI7IFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1fc3VibWl0X2Vycm9yKHN0YXR1cywgbXNnKSB7XHJcbiAgICBzdGF0dXMuaW5uZXJIVE1MID0gbXNnID8/IFwiU3VibWlzc2lvbiBGYWlsZWQhXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWpheChtZXRob2QsIHVybCwgZGF0YSwgc3VjY2VzcywgZXJyb3IsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcclxuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcclxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHJldHVybjtcclxuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIC8vbG9nZ2VyKHhoci5zdGF0dXMsIHhoci5yZXNwb25zZSwgeGhyLnJlc3BvbnNlVHlwZSk7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3MoKTtcclxuICAgICAgICAgICAgY2FsbGJhY2soeGhyLnN0YXR1cyk7XHJcbiAgICAgICAgfSBlbHNlIHsgXHJcbiAgICAgICAgICAgIC8vbG9nZ2VyKHhoci5zdGF0dXMsIHhoci5yZXNwb25zZSwgeGhyLnJlc3BvbnNlVHlwZSk7XHJcbiAgICAgICAgICAgIGVycm9yKCk7IFxyXG4gICAgICAgICAgICBjYWxsYmFjayh4aHIuc3RhdHVzKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiB4aHIuc2VuZChkYXRhKTtcclxufTtcclxuXHJcbi8vIEluY2x1ZGUgZm9yIHNjcmVlbiBzaXplIGNoYW5nZXMgXHJcbmV4cG9ydCBmdW5jdGlvbiBtZWRpYV9xdWVyaWVzKG1xLCBmdW5jX3RydWUsIGZ1bmNfZmFsc2UpIHtcclxuICAgIGlmIChtcS5tYXRjaGVzKSB7IC8vIElmIG1lZGlhIHF1ZXJ5IG1hdGNoZXNcclxuICAgICAgICByZXR1cm4gZnVuY190cnVlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAoZnVuY19mYWxzZSA/IGZ1bmNfZmFsc2UoKSA6IG51bGwpO1xyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxfcHJvZ3Jlc3MoaW5kaWNhdG9yKSB7XHJcbiAgICBjb25zdCB3aW5fc2Nyb2xsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgIGNvbnN0IGhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gICAgY29uc3Qgc2Nyb2xsZWQgPSAod2luX3Njcm9sbCAvIGhlaWdodCkgKiAxMDA7XHJcbiAgICByZXR1cm4gaW5kaWNhdG9yLnN0eWxlLndpZHRoID0gc2Nyb2xsZWQgKyBcIiVcIjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVfYWdlKCkgeyBcclxuICAgIGNvbnN0IGRpZmZfbXMgPSBEYXRlLm5vdygpIC0gbmV3IERhdGUoXCIyNiBNYXJjaCAxOTkwXCIpO1xyXG4gICAgY29uc3QgYWdlX2R0ID0gbmV3IERhdGUoZGlmZl9tcyk7IFxyXG4gICAgcmV0dXJuIE1hdGguYWJzKGFnZV9kdC5nZXRVVENGdWxsWWVhcigpIC0gMTk3MCk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVfZGFya19jb2xvcl9oZXgoKSB7XHJcbiAgICBsZXQgY29sb3IgPSBcIiNcIjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XHJcbiAgICAgICAgY29sb3IgKz0gKFwiMFwiICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTYsIDIpIC8gMikudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sb3I7XHJcbn07IiwiaW1wb3J0IHsgZGVib3VuY2UsIG1lZGlhX3F1ZXJpZXMgfSBmcm9tIFwiLi4vQnVzaW5lc3NfTG9naWMvRnVuY3Rpb25zLmpzXCI7XHJcbmltcG9ydCBTa2lsbF9SYXRpbmcgZnJvbSBcIi4uL0J1c2luZXNzX0xvZ2ljL1NraWxsUmF0aW5nLmpzXCI7XHJcblxyXG5jb25zdCBVSSA9IHtcclxuXHJcbiAgICAvKioqIEdFTkVSQUwgKioqL1xyXG5cclxuICAgIGJvZHk6IGRvY3VtZW50LmJvZHksXHJcbiAgICBnb29nbGVfcHJldmlld19tb2RhbF9idG46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1icy10b2dnbGU9J21vZGFsJ11cIiksXHJcbiAgICBnb29nbGVfcHJldmlld19tb2RhbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZXN1bWVcIiksXHJcbiAgICBsYXp5X2ltZ3M6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWcubGF6eVwiKSxcclxuICAgIGxhenlfc291cmNlczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNvdXJjZVwiKSxcclxuICAgIGxhenlfYmdzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxhenktYmdcIiksXHJcblxyXG4gICAgLyoqKiBIRUFERVIgKioqL1xyXG5cclxuICAgIC8vIEhlYWRlciBWaWRlbyBcclxuICAgIGhlYWRlcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhlYWRlclwiKSxcclxuICAgIGhlYWRlcl92aWQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkZXIgdmlkZW9cIiksXHJcbiAgICBoZWFkZXJfdmlkX211bHRpOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidmlkZW8gW2RhdGEtc3JjXVwiKSxcclxuICAgIGhlYWRlcl9idG5zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uXCIpLFxyXG4gICAgaGVhZGVyX2xpbmtzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKSxcclxuICAgIG5hdl9jb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2LWNvbnRhaW5lclwiKSxcclxuICAgIHRvcF9uYXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9wLWhlYWRlci1uYXZcIiksXHJcbiAgICBib3RfbmF2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJvdC1oZWFkZXItbmF2XCIpLFxyXG4gICAgYm9keV9wbGFjZWhvbGRlcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHkgLnBsYWNlaG9sZGVyLWRpdlwiKSxcclxuICAgIGhlYWRlcl9lbXB0eV9kaXY6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkZXIgLmVtcHR5LWRpdlwiKSxcclxuICAgIHNjcm9sbF9pbmRpY2F0b3I6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbXktYmFyXCIpLFxyXG4gICAgYWN0aXZlX2xpc3RzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJvdC1oZWFkZXItbmF2IC5uYXYtaXRlbVwiKSxcclxuICAgIGFjdGl2ZV9saW5rOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYS5hY3RpdmVcIiksXHJcbiAgICBhbmNob3JfbGlua3M6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJhLmFuY2hvci1saW5rXCIpLFxyXG5cclxuICAgIC8vIEhhbWJ1cmdlciBtZW51IGJ1dHRvbiBpbiBoZWFkZXJcclxuICAgIHRvZ2dsZXJfYnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hdmJhci10b2dnbGVyXCIpLFxyXG4gICAgdG9nZ2xlcl9idG5faWNvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItdG9nZ2xlci1pY29uXCIpLFxyXG4gICAgdG9nZ2xlcl9idG5fd29yZDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItdG9nZ2xlci13b3JkXCIpLFxyXG4gICAgbmF2YmFyX3Njcm9sbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYXZiYXItbmF2LXNjcm9sbFwiKSxcclxuICAgIGJvdF9uYXZfY29sbGFwc2U6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYm90LWhlYWRlci1uYXZcIiksXHJcblxyXG4gICAgLyoqKiBIT01FIFNFQ1RJT04gKioqL1xyXG5cclxuICAgIGludHJvX21zZzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnRyb1wiKSxcclxuICAgIHdlbGNvbWU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2VsY29tZVwiKSxcclxuICAgIHRleHRfd3JhcHBlcl9tbDEzOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWwxMycpLFxyXG4gICAgXHJcbiAgICAvLyBHZW5lcmF0ZWQgYnkgdGhlIHNoYXBlIGRpdmlkZXIgYXBwIChyZW1lbWJlciB0byBjaGFuZ2UgY2xhc3MgbmFtZSBpZiBjaGFuZ2luZyBkaXZpZGVyIHVzaW5nIGFwcClcclxuICAgIGhlYWRlcl9kaXZpZGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmN1c3RvbS1zaGFwZS1kaXZpZGVyLWJvdHRvbS0xNjEyMDMyNzAxXCIpLFxyXG5cclxuICAgIC8qKiogQUJPVVQgU0VDVElPTiAqKiovXHJcblxyXG4gICAgYWJvdXRfc3VtbWFyeV93cmFwcGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFib3V0LXNlY3Rpb24gLnN1bW1hcnktd3JhcHBlclwiKSxcclxuICAgIG15X2FnZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWFnZT0nbXktYWdlJ11cIiksXHJcbiAgICBzdW1tYXJ5X2NvbnRhaW5lcnM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3VtbWFyeS1jb250YWluZXJcIiksXHJcbiAgICBzdW1tYXJ5X2J0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWlkPSdzdW1tYXJ5LWJ0biddXCIpLFxyXG5cclxuICAgIC8qKiogU0VSVklDRVMgU0VDVElPTiAqKiovXHJcblxyXG4gICAgbXlfY2Fyb3VzZWxfcHJldl9idG46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VydmljZXMtc2VjdGlvbiAubXktY2Fyb3VzZWwtYnRuLXByZXZcIiksXHJcbiAgICBteV9jYXJvdXNlbF9uZXh0X2J0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZXJ2aWNlcy1zZWN0aW9uIC5teS1jYXJvdXNlbC1idG4tbmV4dFwiKSxcclxuICAgIG15X2Nhcm91c2VsX3dyYXBwZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubXktY2Fyb3VzZWwtd3JhcHBlclwiKSxcclxuICAgIG15X2Nhcm91c2VsX2NvbnRlbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubXktY2Fyb3VzZWwtY29udGVudFwiKSxcclxuICAgIG15X2Nhcm91c2VsX2l0ZW1zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm15LWNhcm91c2VsLWl0ZW1cIiksXHJcblxyXG4gICAgLyoqKiBUT09MUyAmIFRFQ0hOT0xPR0lFUyBTRUNUSU9OICoqKi8gXHJcblxyXG4gICAgc2tpbGxfcmF0aW5nczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmdcIiksXHJcbiAgICBza2lsbF9yYXRpbmdzX2JlZ2lubmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNraWxsLXJhdGluZy1iZWdpbm5lclwiKSxcclxuICAgIHNraWxsX3JhdGluZ3Nfbm92aWNlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNraWxsLXJhdGluZy1ub3ZpY2VcIiksXHJcbiAgICBza2lsbF9yYXRpbmdzX2ludGVybWVkaWF0ZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmctaW50ZXJtZWRpYXRlXCIpLFxyXG4gICAgc2tpbGxfcmF0aW5nc19hZHZhbmNlZDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmctYWR2YW5jZWRcIiksXHJcbiAgICBza2lsbF9yYXRpbmdzX2V4cGVydDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5za2lsbC1yYXRpbmctZXhwZXJ0XCIpLFxyXG5cclxuICAgIC8qKiogUFJPSkVDVCBTRUNUSU9OICoqKi8gXHJcblxyXG4gICAgLy8gRGV2ZWxvcG1lbnQgUHJvamVjdHNcclxuICAgIHJldHVybl90b19kZXZfZ2FsbGVyeV9idG5zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtaWQ9J2Rldi1wcm9qZWN0LWdhbGxlcnknXVwiKSxcclxuICAgIGRldl9wcm9qZWN0X2dhbGxlcnk6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtZ2FsbGVyeVwiKSxcclxuICAgIGRldl9wcm9qZWN0X292ZXJ2aWV3OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRldi1wcm9qZWN0LW92ZXJ2aWV3XCIpLFxyXG4gICAgZGV2X3Byb2plY3RfZ2FsbGVyeV9idG5zOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uW2RhdGEtZGV2LXByb2plY3RdXCIpLFxyXG4gICAgZGV2X3Byb2plY3RfY2Fyb3VzZWw6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtY2Fyb3VzZWxcIiksXHJcbiAgICBkZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbmRpY2F0b3JzXCIpLFxyXG4gICAgZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbm5lclwiKSxcclxuICAgIGRldl9wcm9qZWN0X2Nhcm91c2VsX25vdGVfc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1ub3Rlc1wiKSxcclxuICAgIGRldl9wcm9qZWN0X2Nhcm91c2VsX2ljb25fc2VjdGlvbjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pY29uLXNlY3Rpb25cIiksXHJcbiAgICBkZXZfcHJvamVjdF9jYXJvdXNlbF9uZXh0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI2Rldi1wcm9qZWN0LW92ZXJ2aWV3IC5jYXJvdXNlbC1jb250cm9sLW5leHRcIiksXHJcbiAgICBkZXZfcHJvamVjdF9jYXJvdXNlbF9wcmV2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI2Rldi1wcm9qZWN0LW92ZXJ2aWV3IC5jYXJvdXNlbC1jb250cm9sLXByZXZcIiksXHJcblxyXG4gICAgLy8gQ2xpZW50IFByb2plY3RzXHJcbiAgICBjbGllbnRfcHJvamVjdF9nYWxsZXJ5OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsaWVudC1wcm9qZWN0LWdhbGxlcnlcIiksXHJcbiAgICBjbGllbnRfcHJvamVjdF9vdmVydmlldzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbGllbnQtcHJvamVjdC1vdmVydmlld1wiKSxcclxuICAgIGNsaWVudF9wcm9qZWN0X2dhbGxlcnlfYnRuczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvbltkYXRhLWNsaWVudC1wcm9qZWN0XVwiKSxcclxuICAgIGNsaWVudF9wcm9qZWN0X2Nhcm91c2VsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsaWVudC1wcm9qZWN0LWNhcm91c2VsXCIpLFxyXG4gICAgY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfaW5kaWNhdG9yX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtaW5kaWNhdG9yc1wiKSxcclxuICAgIGNsaWVudF9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtaW5uZXJcIiksXHJcbiAgICBjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtbm90ZXNcIiksXHJcbiAgICBjbGllbnRfcHJvamVjdF9jYXJvdXNlbF9pY29uX3NlY3Rpb246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xpZW50LXByb2plY3QtY2Fyb3VzZWwtaWNvbi1zZWN0aW9uXCIpLFxyXG4gICAgY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfbmV4dDogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNjbGllbnQtcHJvamVjdC1vdmVydmlldyAuY2Fyb3VzZWwtY29udHJvbC1uZXh0XCIpLFxyXG4gICAgY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfcHJldjogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNjbGllbnQtcHJvamVjdC1vdmVydmlldyAuY2Fyb3VzZWwtY29udHJvbC1wcmV2XCIpLFxyXG5cclxuICAgIC8qKiogQ09OVEFDVCBNRSBTRUNUSU9OICoqKi9cclxuICAgIFxyXG4gICAgZm9ybV9kYXRhOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm0tZGF0YVwiKSxcclxuICAgIGNvdW50cnlfc2VsZWN0OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvdW50cnlcIiksXHJcbiAgICBwaG9uZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaG9uZVwiKSxcclxuXHJcbiAgICAvKiBGb3Jtc3ByZWUgKi9cclxuXHJcbiAgICB2YWxpZF9mZWVkYmFja19mbmFtZTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi52YWxpZC1mZWVkYmFjay52YWxpZC1mZWVkYmFjay1mbmFtZVwiKSxcclxuICAgIHZhbGlkX2ZlZWRiYWNrX2xuYW1lOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkLWZlZWRiYWNrLnZhbGlkLWZlZWRiYWNrLWxuYW1lXCIpLFxyXG4gICAgdmFsaWRfZmVlZGJhY2tfZW1haWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmFsaWQtZmVlZGJhY2sudmFsaWQtZmVlZGJhY2stZW1haWxcIiksXHJcbiAgICB2YWxpZF9mZWVkYmFja19jb3VudHJ5OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkLWZlZWRiYWNrLnZhbGlkLWZlZWRiYWNrLWNvdW50cnlcIiksXHJcbiAgICB2YWxpZF9mZWVkYmFja19tZXNzYWdlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkLWZlZWRiYWNrLnZhbGlkLWZlZWRiYWNrLW1lc3NhZ2VcIiksXHJcbiAgICBpbnZhbGlkX2ZlZWRiYWNrX2ZuYW1lOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmludmFsaWQtZmVlZGJhY2suaW52YWxpZC1mZWVkYmFjay1mbmFtZVwiKSxcclxuICAgIGludmFsaWRfZmVlZGJhY2tfbG5hbWU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW52YWxpZC1mZWVkYmFjay5pbnZhbGlkLWZlZWRiYWNrLWxuYW1lXCIpLFxyXG4gICAgaW52YWxpZF9mZWVkYmFja19lbWFpbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbnZhbGlkLWZlZWRiYWNrLmludmFsaWQtZmVlZGJhY2stZW1haWxcIiksXHJcbiAgICBpbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnk6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW52YWxpZC1mZWVkYmFjay5pbnZhbGlkLWZlZWRiYWNrLWNvdW50cnlcIiksXHJcbiAgICBpbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2U6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW52YWxpZC1mZWVkYmFjay5pbnZhbGlkLWZlZWRiYWNrLW1lc3NhZ2VcIiksXHJcblxyXG4gICAgLy8gRmV0Y2ggYWxsIHRoZSBmb3JtcyB3ZSB3YW50IHRvIGFwcGx5IGN1c3RvbSBCb290c3RyYXAgdmFsaWRhdGlvbiBzdHlsZXMgdG9cclxuICAgIGZvcm1zX25lZWRfdmFsaWRhdGlvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5lZWRzLXZhbGlkYXRpb24nKSxcclxuXHJcbiAgICAvLyBHZXQgdGhlIGZvcm0gZWxlbWVudHMgZGVmaW5lZCBpbiB5b3VyIGZvcm0gSFRNTFxyXG4gICAgbXlfZm9ybTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteS1mb3JtXCIpLFxyXG4gICAgbXlfZm9ybV9idXR0b246IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXktZm9ybS1idXR0b25cIiksXHJcbiAgICBteV9mb3JtX3N0YXR1czogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteS1mb3JtLXN0YXR1c1wiKSxcclxuICAgIGdyZWNhcHRjaGFzOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZy1yZWNhcHRjaGFcIiksXHJcblxyXG4gICAgY3JlYXRlX3NjcmlwdHMoLi4uc3Jjcykge1xyXG4gICAgICAgIHNyY3MuZm9yRWFjaChzcmMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgICAgICAgICBzY3JpcHQuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKFwiYXN5bmNcIiwgXCJhc3luY1wiKTtcclxuICAgICAgICAgICAgdGhpcy5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7ICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBsb2FkX2JnX3ZpZCgpIHsgICAgICAgIFxyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5oZWFkZXJfdmlkX211bHRpKTtcclxuICAgICAgICB0aGlzLmhlYWRlcl92aWRfbXVsdGkuZm9yRWFjaCh2aWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhX3NyYyA9IHZpZC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNyY1wiKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YV9tZWRpYSA9IHZpZC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1lZGlhXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBtcV9saW1pdCA9IHdpbmRvdy5tYXRjaE1lZGlhKGRhdGFfbWVkaWEpO1xyXG5cclxuICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdCwgKCkgPT4geyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZpZC5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgZGF0YV9zcmMpO1xyXG4gICAgICAgICAgICAgICAgdmlkLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIGRhdGFfbWVkaWEpO1xyXG4gICAgICAgICAgICAgICAgdmlkLnBhcmVudEVsZW1lbnQubG9hZCgpO1xyXG4gICAgICAgICAgICB9LCAoKSA9PiB2aWQucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgYWRkX3Bvc3Rlcl9pbWdfc20oKSB7XHJcbiAgICAgICAgY29uc3QgbXFfbGltaXQgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKTtcclxuXHJcbiAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdCwgKCkgPT4geyBcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJfdmlkLnNldEF0dHJpYnV0ZShcInBvc3RlclwiLCBcIi4vaW1nL2Jhc2Uvd2VicC90aGluay1kaWZmZXJlbnQtNzAwLndlYnBcIik7XHJcbiAgICAgICAgfSwgbnVsbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRvZ2dsZXJfbWVudV9pY29uX3N3aXRjaCgpIHtcclxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvZ2dsZXJfYnRuX3dvcmQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpICYmIHRoaXMudG9nZ2xlcl9idG5fd29yZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVyX2J0bl9pY29uLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXJfYnRuX3dvcmQuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZXJfYnRuX2ljb24uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpICYmIHRoaXMudG9nZ2xlcl9idG5fd29yZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVyX2J0bl9pY29uLmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZXJfYnRuX3dvcmQuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9LCA1MDAwKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2lkZV9tZW51X3JldmVhbCgpIHtcclxuICAgICAgICBVSS5ib3RfbmF2X2NvbGxhcHNlLmNsYXNzTGlzdC5hZGQoXCJzaWRlLW1lbnUtcmV2ZWFsXCIpO1xyXG4gICAgICAgIFVJLmJvdF9uYXZfY29sbGFwc2UuY2xhc3NMaXN0LnJlbW92ZShcInNpZGUtbWVudS1oaWRlXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzaWRlX21lbnVfaGlkZSgpIHtcclxuICAgICAgICBVSS5ib3RfbmF2X2NvbGxhcHNlLmNsYXNzTGlzdC5yZW1vdmUoXCJzaWRlLW1lbnUtcmV2ZWFsXCIpO1xyXG4gICAgICAgIFVJLmJvdF9uYXZfY29sbGFwc2UuY2xhc3NMaXN0LmFkZChcInNpZGUtbWVudS1oaWRlXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb2JpbGVfbWVudV9yZXZlYWwoKSB7XHJcbiAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJtb2JpbGUtbWVudS1yZXZlYWxcIik7XHJcbiAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2JpbGUtbWVudS1oaWRlXCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBtb2JpbGVfbWVudV9oaWRlKCkge1xyXG4gICAgICAgIFVJLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwibW9iaWxlLW1lbnUtcmV2ZWFsXCIpO1xyXG4gICAgICAgIFVJLmhlYWRlci5jbGFzc0xpc3QuYWRkKFwibW9iaWxlLW1lbnUtaGlkZVwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgbm9fbWVudSgpIHsgICAgXHJcbiAgICAgICAgVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKFwic2lkZS1tZW51LWhpZGVcIik7XHJcbiAgICAgICAgVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKFwic2lkZS1tZW51LXJldmVhbFwiKTtcclxuICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcIm1vYmlsZS1tZW51LWhpZGVcIik7XHJcbiAgICAgICAgVUkuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2JpbGUtbWVudS1yZXZlYWxcIik7XHJcbiAgICAgICAgVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKTtcclxuICAgIH0sXHJcblxyXG4gICAgc2hyaW5rX2hlYWRlcigpIHsgICAgICAgXHJcbiAgICAgICAgLy8gT24gc2Nyb2xsLCBzaHJpbmtzIGhlYWRlciBhbmQgZXhwYW5kcyBib2R5LCBwYXVzZXMgdmlkZW8sIGNoYW5nZXMgdG8gc3RhdGljIGJnIGFuZCBhZGp1c3RzIGhlaWdodCBvZiBwbGFjZWhvbGRlciBlbGVtZW50cyBmb3Igc21vb3RoIHRyYW5zaXRpb25cclxuICAgICAgICB0aGlzLmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIndpbGwtY2hhbmdlLWhlaWdodFwiKTtcclxuICAgICAgICB0aGlzLm5hdl9jb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5hdi1jb250YWluZXItc3RpY2t5XCIpO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmhlaWdodCA9IFwiMTAwcHhcIjtcclxuICAgICAgICB0aGlzLmhlYWRlci5zdHlsZS5ib3hTaGFkb3cgPSBcIjAgMC4xcmVtIDVyZW0gcmdiYSgwLDAsMCwwLjUpXCI7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJfdmlkLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJfdmlkLnBhdXNlKCk7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMzEsMTExLDEzOSwxKSwgcmdiYSgzMSwxMTEsMTM5LDEpKSwgdXJsKCcuL2ltZy90cmFuc3BhcmVudC1wbmctdzEwLnBuZycpIG5vLXJlcGVhdCBmaXhlZCAxMDAlIDEwMCVcIjtcclxuICAgICAgICBcclxuICAgICAgICAvLyBPbiBzY3JvbGwsIGhpZGVzIGludHJvZHVjdGlvbiBtc2cgYW5kIHJlbW92ZXMgdG9wIHBhZGRpbmcgZnJvbSB3ZWxjb21lIHNlY3Rpb24gYmVsb3dcclxuICAgICAgICB0aGlzLmludHJvX21zZy5jbGFzc0xpc3QuYWRkKFwiaC0wXCIpOyAgIFxyXG4gICAgfSxcclxuXHJcbiAgICBleHBhbmRfcGxhY2Vob2xkZXJfZGl2KCkge1xyXG4gICAgICAgIHRoaXMuYm9keV9wbGFjZWhvbGRlci5zdHlsZS5oZWlnaHQgPSBcIjEwMHZoXCI7IC8vIDQ2Ljg3NXJlbSBmb3IgbGFyZ2UsIDUyMHB4IGZvciBzbWFsbGVyXHJcbiAgICAgICAgdGhpcy5ib2R5X3BsYWNlaG9sZGVyLmNsYXNzTGlzdC5yZXBsYWNlKFwiaW52aXNpYmxlXCIsIFwidmlzaWJsZVwiKTtcclxuICAgICAgICB0aGlzLmJvZHlfcGxhY2Vob2xkZXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJwbGFjZWhvbGRlci1kaXYtcmV2ZWFsLXN0YXJ0XCIsIFwicGxhY2Vob2xkZXItZGl2LXJldmVhbC1lbmRcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIGV4cGFuZF9oZWFkZXIoKSB7XHJcbiAgICAgICAgLy8gUmV0dXJucyBoZWFkZXIgYW5kIGJvZHkgdG8gaW5pdGlhbCBzdGF0ZXMgd2hlbiBzY3JvbGxlZCB0byB0aGUgdG9wXHJcbiAgICAgICAgdGhpcy5ib2R5LmNsYXNzTGlzdC5hZGQoXCJ3aWxsLWNoYW5nZS1oZWlnaHRcIik7XHJcbiAgICAgICAgdGhpcy5uYXZfY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJuYXYtY29udGFpbmVyLXN0aWNreVwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgbXFfbGltaXRzID0gW1xyXG4gICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDk5MnB4KVwiKSxcclxuICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWF4LXdpZHRoOiA5OTEuOThweClcIiksXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMF0sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuaGVpZ2h0ID0gXCI3MHZoXCI7XHJcbiAgICAgICAgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzFdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmhlaWdodCA9IFwiNzB2aFwiOyAgXHJcbiAgICAgICAgfSwgbnVsbCk7XHJcblxyXG4gICAgICAgIHRoaXMuaGVhZGVyLnN0eWxlLmJveFNoYWRvdyA9IFwidW5zZXRcIjtcclxuICAgICAgICB0aGlzLmhlYWRlcl92aWQuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKTtcclxuICAgICAgICB0aGlzLmhlYWRlcl92aWQucGxheSgpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm5zIGludHJvZHVjdGlvbiBtc2cgYW5kIHdlbGNvbWUgc2VjdGlvbiB0byBpbml0aWFsIHN0YXRlIHdoZW4gc2Nyb2xsZWQgdG8gdGhlIHRvcFxyXG4gICAgICAgIHRoaXMuaW50cm9fbXNnLmNsYXNzTGlzdC5yZW1vdmUoXCJoLTBcIik7ICAgXHJcbiAgICB9LFxyXG5cclxuICAgIHNocmlua19wbGFjZWhvbGRlcl9kaXYoKSB7XHJcbiAgICAgICAgdGhpcy5ib2R5X3BsYWNlaG9sZGVyLnN0eWxlLmhlaWdodCA9IFwiMFwiO1xyXG4gICAgICAgIHRoaXMuYm9keV9wbGFjZWhvbGRlci5jbGFzc0xpc3QucmVwbGFjZShcInZpc2libGVcIiwgXCJpbnZpc2libGVcIik7XHJcbiAgICAgICAgdGhpcy5ib2R5X3BsYWNlaG9sZGVyLmNsYXNzTGlzdC5yZXBsYWNlKFwicGxhY2Vob2xkZXItZGl2LXJldmVhbC1lbmRcIiwgXCJwbGFjZWhvbGRlci1kaXYtcmV2ZWFsLXN0YXJ0XCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXBsYWNlX3ZpZF9iZygpIHtcclxuICAgICAgICAvLyBUbyByZXBsYWNlIHRoZSBoZWFkZXIgdmlkZW8gYmcgd2hlbiBpdCBlbmRzXHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwibGluZWFyLWdyYWRpZW50KHJnYmEoMzEsMTExLDEzOSwwLjgpLCByZ2JhKDAsMCwwLDAuNikpLCB1cmwoJy4vaW1nL2Jhc2Uvd2VicC9sYXB0b3Ata2V5Ym9hcmQud2VicCcpIG5vLXJlcGVhdCBmaXhlZCAyMCUgMjAlXCI7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc3R5bGUuYmFja2dyb3VuZFNpemUgPSBcImNvdmVyXCI7XHJcbiAgICB9LFxyXG5cclxuICAgIGZpeGVkX2JvdHRvbV9oZWFkZXIoKSB7XHJcbiAgICAgICAgY29uc3QgbXFfbGltaXQgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKVxyXG4gICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXQsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJzdGlja3ktdG9wXCIsIFwiZml4ZWQtYm90dG9tXCIpO1xyXG4gICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXIuY2xhc3NMaXN0LnJlcGxhY2UoXCJmaXhlZC1ib3R0b21cIiwgXCJzdGlja3ktdG9wXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBub19maXhlZF9ib3R0b21faGVhZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhlYWRlci5jbGFzc0xpc3QuY29udGFpbnMoXCJmaXhlZC1ib3R0b21cIikpIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZXBsYWNlKFwiZml4ZWQtYm90dG9tXCIsIFwic3RpY2t5LXRvcFwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgYW5pbWF0ZV9sZXR0ZXJzKCkge1xyXG4gICAgICAgIC8vIFdyYXAgZXZlcnkgbGV0dGVyIGluIGEgc3BhblxyXG4gICAgICAgIHRoaXMudGV4dF93cmFwcGVyX21sMTMuaW5uZXJIVE1MID0gdGhpcy50ZXh0X3dyYXBwZXJfbWwxMy50ZXh0Q29udGVudC5yZXBsYWNlKC9cXFMvZywgXCI8c3BhbiBjbGFzcz0nbGV0dGVyJz4kJjwvc3Bhbj5cIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYW5pbWUudGltZWxpbmUoe2xvb3A6IHRydWV9KVxyXG4gICAgICAgIC5hZGQoe1xyXG4gICAgICAgICAgICB0YXJnZXRzOiAnLm1sMTMgLmxldHRlcicsXHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVk6IFsxMDAsMF0sXHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZVo6IDAsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFswLDFdLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiZWFzZU91dEV4cG9cIixcclxuICAgICAgICAgICAgZHVyYXRpb246IDYwMCxcclxuICAgICAgICAgICAgZGVsYXk6IChlbCwgaSkgPT4gMzAwICsgMzAgKiBpLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmFkZCh7XHJcbiAgICAgICAgICAgIHRhcmdldHM6ICcubWwxMyAubGV0dGVyJyxcclxuICAgICAgICAgICAgdHJhbnNsYXRlWTogWzAsLTEwMF0sXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFsxLDBdLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiZWFzZUluRXhwb1wiLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogNjAwLFxyXG4gICAgICAgICAgICBkZWxheTogKGVsLCBpKSA9PiA2MDAwICsgMzAgKiBpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBjaGFuZ2VfYWJvdXRfaW5mbygpIHtcclxuICAgICAgICBpZiAodGhpcy5zdW1tYXJ5X2NvbnRhaW5lcnNbMV0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJvdXRfc3VtbWFyeV93cmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJvcGFjaXR5LTBcIik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeV9jb250YWluZXJzWzBdLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIiwgXCJvcGFjaXR5LTBcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1bW1hcnlfY29udGFpbmVyc1sxXS5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIsIFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJ5X2J0bi5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtaW5mby1jaXJjbGVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJ0bi10ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExlYXJuIE1vcmVcclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICB9LCAyMDUpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFib3V0X3N1bW1hcnlfd3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICAgICAgICB9LCAzNTApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdW1tYXJ5X2NvbnRhaW5lcnNbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZC1ub25lXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWJvdXRfc3VtbWFyeV93cmFwcGVyLmNsYXNzTGlzdC5hZGQoXCJvcGFjaXR5LTBcIik7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1bW1hcnlfY29udGFpbmVyc1sxXS5jbGFzc0xpc3QuYWRkKFwiZC1ub25lXCIsIFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJ5X2NvbnRhaW5lcnNbMF0uY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiLCBcIm9wYWNpdHktMFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeV9idG4uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2lyY2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWluZm8tY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJidG4tdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMZWFybiBNb3JlXHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgfSwgMjA1KTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hYm91dF9zdW1tYXJ5X3dyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShcIm9wYWNpdHktMFwiKTtcclxuICAgICAgICAgICAgfSwgMzUwKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBncm93X2J0bl9vbmNsaWNrKGJ0biwgc2l6ZSwgdGltZSkge1xyXG4gICAgICAgIGJ0bi5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHtzaXplfSlgO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgYnRuLnN0eWxlLnRyYW5zZm9ybSA9IFwiaW5pdGlhbFwiO1xyXG4gICAgICAgIH0sIHRpbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzY3JvbGxfaG9yaXpvbnRhbGx5KGVsLCBweCkge1xyXG4gICAgICAgIGVsLnNjcm9sbExlZnQgKz0gcHg7XHJcbiAgICB9LFxyXG5cclxuICAgIHNjcm9sbF9zdGFydChlbCwgcHhfbGltaXQpIHtcclxuICAgICAgICBpZiAoZWwuc2Nyb2xsTGVmdCA+PSAoZWwuc2Nyb2xsV2lkdGggLSBlbC5jbGllbnRXaWR0aCAtIHB4X2xpbWl0KSkge1xyXG4gICAgICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBzY3JvbGxfZW5kKGVsLCBweF9saW1pdCkge1xyXG4gICAgICAgIGlmKGVsLnNjcm9sbExlZnQgPD0gcHhfbGltaXQpIHtcclxuICAgICAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IChlbC5zY3JvbGxXaWR0aCAtIGVsLmNsaWVudFdpZHRoKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBwb3B1bGF0ZV9za2lsbF9yYXRpbmcoU2tpbGwpIHtcclxuICAgICAgICB0aGlzLnNraWxsX3JhdGluZ3NfYmVnaW5uZXIuZm9yRWFjaChyYXRpbmdfZGl2ID0+IHtcclxuICAgICAgICAgICAgcmF0aW5nX2Rpdi5pbm5lckhUTUwgPSBTa2lsbC5nZXRSYXRpbmcoXCJiZWdpbm5lclwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNraWxsX3JhdGluZ3Nfbm92aWNlLmZvckVhY2gocmF0aW5nX2RpdiA9PiB7ICAgICBcclxuICAgICAgICAgICAgcmF0aW5nX2Rpdi5pbm5lckhUTUwgPSBTa2lsbC5nZXRSYXRpbmcoXCJub3ZpY2VcIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5za2lsbF9yYXRpbmdzX2ludGVybWVkaWF0ZS5mb3JFYWNoKHJhdGluZ19kaXYgPT4ge1xyXG4gICAgICAgICAgICByYXRpbmdfZGl2LmlubmVySFRNTCA9IFNraWxsLmdldFJhdGluZyhcImludGVybWVkaWF0ZVwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNraWxsX3JhdGluZ3NfYWR2YW5jZWQuZm9yRWFjaChyYXRpbmdfZGl2ID0+IHtcclxuICAgICAgICAgICAgcmF0aW5nX2Rpdi5pbm5lckhUTUwgPSBTa2lsbC5nZXRSYXRpbmcoXCJhZHZhbmNlZFwiKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5za2lsbF9yYXRpbmdzX2V4cGVydC5mb3JFYWNoKHJhdGluZ19kaXYgPT4ge1xyXG4gICAgICAgICAgICByYXRpbmdfZGl2LmlubmVySFRNTCA9IFNraWxsLmdldFJhdGluZyhcImV4cGVydFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgZGlzcGxheV9mb3JtX3ZhbGlkYXRpb25fbXNnKCkge1xyXG4gICAgICAgIC8vIFVwZGF0ZXMgVUkgd2l0aCBkaWZmZXJlbnQgc3VjY2VzcyB2YWxpZGF0aW9uIG1lc3NhZ2VzIGFmdGVyIGZhaWx1cmUgdG8gc3VibWl0IGNvcnJlY3RseVxyXG4gICAgICAgIGlmICh0aGlzLmludmFsaWRfZmVlZGJhY2tfZm5hbWUgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX2ZuYW1lKS5kaXNwbGF5ICE9IFwibm9uZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRfZmVlZGJhY2tfZm5hbWUuaW5uZXJIVE1MID0gXCJOaWNlISBZb3UgcmVtZW1iZXJlZCB5b3VyIGZpcnN0IG5hbWUhXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW52YWxpZF9mZWVkYmFja19sbmFtZSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmludmFsaWRfZmVlZGJhY2tfbG5hbWUpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZF9mZWVkYmFja19sbmFtZS5pbm5lckhUTUwgPSBcIlNvIHlvdSBkbyBoYXZlIGEgbGFzdCBuYW1lLi4uXCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW52YWxpZF9mZWVkYmFja19lbWFpbCAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmludmFsaWRfZmVlZGJhY2tfZW1haWwpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRfZmVlZGJhY2tfZW1haWwuaW5uZXJIVE1MID0gXCJNdWNoIGJldHRlci4uLnBsZWFzZSBlbnN1cmUgdGhhdCB0aGUgc3BlbGxpbmcgb2YgeW91ciBlbWFpbCBpcyBjb3JyZWN0XCI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnkgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX2NvdW50cnkpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZF9mZWVkYmFja19jb3VudHJ5LmlubmVySFRNTCA9IFwiV2VsY29tZSB0byBFYXJ0aCBcIiArIGDwn5G9YDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2UgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5pbnZhbGlkX2ZlZWRiYWNrX21lc3NhZ2UpLmRpc3BsYXkgIT0gXCJub25lXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZF9mZWVkYmFja19tZXNzYWdlLmlubmVySFRNTCA9IFwiSG93IGRpZCB5b3UgZm9yZ2V0IHRoZSBtb3N0IGltcG9ydGFudCBwYXJ0PyBPaCB3ZWxsLCBhdCBsZWFzdCBpdCdzIGZpbmUgbm93Li4uXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVUk7IiwiLy9HZW5lcmF0ZXMgc2tpbGwgcmF0aW5nIGRpdnMgYW5kIGljb25zIGJhc2VkIG9uIGNsYXNzIG5hbWVcclxuXHJcbi8qIFNWRyBwYXRoIGZvciBmaWxsZWQgc3RhciBpY29uXHJcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyLWZpbGxcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XHJcbiAgICAgICAgPHBhdGggZD1cIk0zLjYxMiAxNS40NDNjLS4zODYuMTk4LS44MjQtLjE0OS0uNzQ2LS41OTJsLjgzLTQuNzNMLjE3MyA2Ljc2NWMtLjMyOS0uMzE0LS4xNTgtLjg4OC4yODMtLjk1bDQuODk4LS42OTZMNy41MzguNzkyYy4xOTctLjM5LjczLS4zOS45MjcgMGwyLjE4NCA0LjMyNyA0Ljg5OC42OTZjLjQ0MS4wNjIuNjEyLjYzNi4yODMuOTVsLTMuNTIzIDMuMzU2LjgzIDQuNzNjLjA3OC40NDMtLjM2Ljc5LS43NDYuNTkyTDggMTMuMTg3bC00LjM4OSAyLjI1NnpcIi8+XHJcbiAgICA8L3N2Zz5cclxuKi9cclxuXHJcbi8qIFNWRyBwYXRoIGZvciBoYWxmLWZpbGxlZCBzdGFyIGljb25cclxuICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cImJpIGJpLXN0YXItaGFsZlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cclxuICAgICAgICA8cGF0aCBkPVwiTTUuMzU0IDUuMTE5TDcuNTM4Ljc5MkEuNTE2LjUxNiAwIDAgMSA4IC41Yy4xODMgMCAuMzY2LjA5Ny40NjUuMjkybDIuMTg0IDQuMzI3IDQuODk4LjY5NkEuNTM3LjUzNyAwIDAgMSAxNiA2LjMyYS41NS41NSAwIDAgMS0uMTcuNDQ1bC0zLjUyMyAzLjM1Ni44MyA0LjczYy4wNzguNDQzLS4zNi43OS0uNzQ2LjU5Mkw4IDEzLjE4N2wtNC4zODkgMi4yNTZhLjUxOS41MTkgMCAwIDEtLjE0Ni4wNWMtLjM0MS4wNi0uNjY4LS4yNTQtLjYtLjY0MmwuODMtNC43M0wuMTczIDYuNzY1YS41NS41NSAwIDAgMS0uMTcxLS40MDMuNTkuNTkgMCAwIDEgLjA4NC0uMzAyLjUxMy41MTMgMCAwIDEgLjM3LS4yNDVsNC44OTgtLjY5NnpNOCAxMi4wMjdjLjA4IDAgLjE2LjAxOC4yMzIuMDU2bDMuNjg2IDEuODk0LS42OTQtMy45NTdhLjU2NC41NjQgMCAwIDEgLjE2My0uNTA1bDIuOTA2LTIuNzctNC4wNTItLjU3NmEuNTI1LjUyNSAwIDAgMS0uMzkzLS4yODhMOC4wMDIgMi4yMjMgOCAyLjIyNnY5Ljh6XCIvPlxyXG4gICAgPC9zdmc+XHJcbiovXHJcblxyXG4vKiBTVkcgcGF0aCBmb3IgZW1wdHkgc3RhciBpY29uXHJcbiAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxyXG4gICAgICAgIDxwYXRoIGQ9XCJNMi44NjYgMTQuODVjLS4wNzguNDQ0LjM2Ljc5MS43NDYuNTkzbDQuMzktMi4yNTYgNC4zODkgMi4yNTZjLjM4Ni4xOTguODI0LS4xNDkuNzQ2LS41OTJsLS44My00LjczIDMuNTIzLTMuMzU2Yy4zMjktLjMxNC4xNTgtLjg4OC0uMjgzLS45NWwtNC44OTgtLjY5Nkw4LjQ2NS43OTJhLjUxMy41MTMgMCAwIDAtLjkyNyAwTDUuMzU0IDUuMTJsLTQuODk4LjY5NmMtLjQ0MS4wNjItLjYxMi42MzYtLjI4My45NWwzLjUyMyAzLjM1Ni0uODMgNC43M3ptNC45MDUtMi43NjdsLTMuNjg2IDEuODk0LjY5NC0zLjk1N2EuNTY1LjU2NSAwIDAgMC0uMTYzLS41MDVMMS43MSA2Ljc0NWw0LjA1Mi0uNTc2YS41MjUuNTI1IDAgMCAwIC4zOTMtLjI4OGwxLjg0Ny0zLjY1OCAxLjg0NiAzLjY1OGEuNTI1LjUyNSAwIDAgMCAuMzkzLjI4OGw0LjA1Mi41NzUtMi45MDYgMi43N2EuNTY0LjU2NCAwIDAgMC0uMTYzLjUwNmwuNjk0IDMuOTU3LTMuNjg2LTEuODk0YS41MDMuNTAzIDAgMCAwLS40NjEgMHpcIi8+XHJcbiAgICA8L3N2Zz5cclxuKi9cclxuXHJcbmNsYXNzIFNraWxsX1JhdGluZyB7XHJcblxyXG4gICAgY2xhc3NpZmljYXRpb24gPSBcIlwiOyAvLyBSZXByZXNlbnRlZCBieSBzdGFyIGljb25zIGluIFVJXHJcbiAgICBmaWxsZWRfaWNvbiA9IGAgICBcclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjExXCIgaGVpZ2h0PVwiMTFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyLWZpbGxcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMy42MTIgMTUuNDQzYy0uMzg2LjE5OC0uODI0LS4xNDktLjc0Ni0uNTkybC44My00LjczTC4xNzMgNi43NjVjLS4zMjktLjMxNC0uMTU4LS44ODguMjgzLS45NWw0Ljg5OC0uNjk2TDcuNTM4Ljc5MmMuMTk3LS4zOS43My0uMzkuOTI3IDBsMi4xODQgNC4zMjcgNC44OTguNjk2Yy40NDEuMDYyLjYxMi42MzYuMjgzLjk1bC0zLjUyMyAzLjM1Ni44MyA0LjczYy4wNzguNDQzLS4zNi43OS0uNzQ2LjU5Mkw4IDEzLjE4N2wtNC4zODkgMi4yNTZ6XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgICBgO1xyXG4gICAgaGFsZl9pY29uID0gYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTFcIiBoZWlnaHQ9XCIxMVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cImJpIGJpLXN0YXItaGFsZlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZD1cIk01LjM1NCA1LjExOUw3LjUzOC43OTJBLjUxNi41MTYgMCAwIDEgOCAuNWMuMTgzIDAgLjM2Ni4wOTcuNDY1LjI5MmwyLjE4NCA0LjMyNyA0Ljg5OC42OTZBLjUzNy41MzcgMCAwIDEgMTYgNi4zMmEuNTUuNTUgMCAwIDEtLjE3LjQ0NWwtMy41MjMgMy4zNTYuODMgNC43M2MuMDc4LjQ0My0uMzYuNzktLjc0Ni41OTJMOCAxMy4xODdsLTQuMzg5IDIuMjU2YS41MTkuNTE5IDAgMCAxLS4xNDYuMDVjLS4zNDEuMDYtLjY2OC0uMjU0LS42LS42NDJsLjgzLTQuNzNMLjE3MyA2Ljc2NWEuNTUuNTUgMCAwIDEtLjE3MS0uNDAzLjU5LjU5IDAgMCAxIC4wODQtLjMwMi41MTMuNTEzIDAgMCAxIC4zNy0uMjQ1bDQuODk4LS42OTZ6TTggMTIuMDI3Yy4wOCAwIC4xNi4wMTguMjMyLjA1NmwzLjY4NiAxLjg5NC0uNjk0LTMuOTU3YS41NjQuNTY0IDAgMCAxIC4xNjMtLjUwNWwyLjkwNi0yLjc3LTQuMDUyLS41NzZhLjUyNS41MjUgMCAwIDEtLjM5My0uMjg4TDguMDAyIDIuMjIzIDggMi4yMjZ2OS44elwiLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICBlbXB0eV9pY29uID0gYCBcclxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjExXCIgaGVpZ2h0PVwiMTFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgY2xhc3M9XCJiaSBiaS1zdGFyXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPVwiTTIuODY2IDE0Ljg1Yy0uMDc4LjQ0NC4zNi43OTEuNzQ2LjU5M2w0LjM5LTIuMjU2IDQuMzg5IDIuMjU2Yy4zODYuMTk4LjgyNC0uMTQ5Ljc0Ni0uNTkybC0uODMtNC43MyAzLjUyMy0zLjM1NmMuMzI5LS4zMTQuMTU4LS44ODgtLjI4My0uOTVsLTQuODk4LS42OTZMOC40NjUuNzkyYS41MTMuNTEzIDAgMCAwLS45MjcgMEw1LjM1NCA1LjEybC00Ljg5OC42OTZjLS40NDEuMDYyLS42MTIuNjM2LS4yODMuOTVsMy41MjMgMy4zNTYtLjgzIDQuNzN6bTQuOTA1LTIuNzY3bC0zLjY4NiAxLjg5NC42OTQtMy45NTdhLjU2NS41NjUgMCAwIDAtLjE2My0uNTA1TDEuNzEgNi43NDVsNC4wNTItLjU3NmEuNTI1LjUyNSAwIDAgMCAuMzkzLS4yODhsMS44NDctMy42NTggMS44NDYgMy42NThhLjUyNS41MjUgMCAwIDAgLjM5My4yODhsNC4wNTIuNTc1LTIuOTA2IDIuNzdhLjU2NC41NjQgMCAwIDAtLjE2My41MDZsLjY5NCAzLjk1Ny0zLjY4Ni0xLjg5NGEuNTAzLjUwMyAwIDAgMC0uNDYxIDB6XCIvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgYDtcclxuXHJcbiAgICBnZXRSYXRpbmcocmFuaykge1xyXG5cclxuICAgICAgICBpZiAocmFuayA9PT0gXCJiZWdpbm5lclwiKSB7XHJcbiAgICAgICAgICAgIHJhbmsgPSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmFuayA9PT0gXCJub3ZpY2VcIikge1xyXG4gICAgICAgICAgICByYW5rID0gMjtcclxuICAgICAgICB9IGVsc2UgaWYgKHJhbmsgPT09IFwiaW50ZXJtZWRpYXRlXCIpIHtcclxuICAgICAgICAgICAgcmFuayA9IDM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyYW5rID09PSBcImFkdmFuY2VkXCIpIHtcclxuICAgICAgICAgICAgcmFuayA9IDQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyYW5rID09PSBcImV4cGVydFwiKSB7XHJcbiAgICAgICAgICAgIHJhbmsgPSA1O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qZm9yKGxldCBpPTA7IGk8NTsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuayA+IGkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzaWZpY2F0aW9uICs9IHRoaXMuZmlsbGVkX2ljb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc2lmaWNhdGlvbiArPSB0aGlzLmVtcHR5X2ljb247XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTsqL1xyXG5cclxuICAgICAgICB0aGlzLmNsYXNzaWZpY2F0aW9uID0gdGhpcy5maWxsZWRfaWNvbi5yZXBlYXQocmFuaykgKyB0aGlzLmVtcHR5X2ljb24ucmVwZWF0KDUgLSByYW5rKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGFzc2lmaWNhdGlvbjtcclxuICAgIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTa2lsbF9SYXRpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuXG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJjbGFzcyBQcm9qZWN0IHtcclxuXHJcbiAgICBuYW1lO1xyXG4gICAgZGVzY3JpcHRpb247IFxyXG4gICAgc3RhdHVzID0ge1xyXG5cclxuICAgICAgICBtc2c6IG51bGwsIC8vIENvbXBsZXRlZCwgV29yayBpbiBQcm9ncmVzcywgT24gSG9sZFxyXG4gICAgICAgIGNsYXNzX2NvZGU6IG51bGwsXHJcbiAgICB9O1xyXG4gICAgbGluazsgLy8gaHJlZiB0byBwcm9qZWN0IGhvc3RlZCBzaXRlXHJcbiAgICBsaW5rX2hlYWRlcjsgLy8gZS5nLiBcIlBsYXlcIiBvciBcIlZpZXdcIiBOb3dcclxuICAgIGxpbmtfbm90ZTsgLy8gZS5nLiAoZXhwZWN0IGF1ZGlvKVxyXG4gICAgZ2l0aHViX2xpbms7IC8vIGhyZWYgdG8gcHJvamVjdCBnaXRodWIgcmVwb1xyXG4gICAgZ2l0aHViX3JlYWRtZTsgLy8gYm9vbGVhblxyXG4gICAgbm90ZXMgPSBbXTsgLy8gZGlzcGxheWVkIGFzIGFuIHVub3JkZXJlZCBsaXN0XHJcbiAgICB0aHVtYm5haWwgPSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYnRuX2lkOiBudWxsLFxyXG4gICAgICAgIHNyYzogbnVsbCxcclxuICAgICAgICBhbHQ6IG51bGwsXHJcbiAgICB9OyAvLyBtYWluIGJ1dHRvbiBpbWFnZSBkaXNwbGF5ZWQgaW4gZ2FsbGVyeSBhYm92ZSBwcm9qZWN0IG92ZXJ2aWV3XHJcbiAgICBjYXJvdXNlbF9pbWdfbGlzdCA9IHtcclxuXHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBzcmNzOiBbXSxcclxuICAgICAgICBhbHRzOiBbXSxcclxuICAgIH07IC8vIGltYWdlcyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGNhcm91c2VsXHJcbiAgICB0b29sX2ljb25fbGlzdCA9IHtcclxuXHJcbiAgICAgICAgaWRzOiBbXSxcclxuICAgICAgICBzcmNzOiBbXSxcclxuICAgICAgICBhbHRzOiBbXSxcclxuICAgIH07IC8vIGkuZS4gdG8gYmUgYWRkZWQgdG8gdGhlIFwiLSBCdWlsdCBVc2luZyAtXCIgaWNvbiBzZWN0aW9uXHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSwgc3RhdHVzX21zZywgbGluaywgbGlua19oZWFkZXIsIGdpdGh1Yl9saW5rLCBnaXRodWJfcmVhZG1lKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChzdGF0dXNfbXNnID09PSAxKSB7XHJcbiAgICAgICAgICAgIHN0YXR1c19tc2cgPSBcIkNvbXBsZXRlZFwiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5jbGFzc19jb2RlID0gXCJzdGF0dXMtY29tcGxldGVcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c19tc2cgPT09IDIpIHtcclxuICAgICAgICAgICAgc3RhdHVzX21zZyA9IFwiV29yayBpbiBQcm9ncmVzc1wiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5jbGFzc19jb2RlID0gXCJzdGF0dXMtaW4tcHJvZ3Jlc3NcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c19tc2cgPT09IDMpIHtcclxuICAgICAgICAgICAgc3RhdHVzX21zZyA9IFwiT24gSG9sZFwiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cy5jbGFzc19jb2RlID0gXCJzdGF0dXMtaG9sZFwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGdpdGh1Yl9yZWFkbWUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgZ2l0aHViX3JlYWRtZSA9IFwiKEdpdEh1YiAtIHJlYWRtZSBhdmFpbGFibGUpXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2l0aHViX3JlYWRtZSA9IFwiKEdpdEh1YilcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMubXNnID0gc3RhdHVzX21zZztcclxuICAgICAgICB0aGlzLmxpbmsgPSBsaW5rO1xyXG4gICAgICAgIHRoaXMubGlua19oZWFkZXIgPSBsaW5rX2hlYWRlcjtcclxuICAgICAgICB0aGlzLmdpdGh1Yl9saW5rID0gZ2l0aHViX2xpbms7XHJcbiAgICAgICAgdGhpcy5naXRodWJfcmVhZG1lID0gZ2l0aHViX3JlYWRtZTtcclxuICAgIH07XHJcblxyXG4gICAgYWRkX2ltZ3MoaWRzLCBzcmNzLCBhbHRzKSB7XHJcbiAgICAgICAgdGhpcy5jYXJvdXNlbF9pbWdfbGlzdC5pZHMucHVzaCguLi5pZHMpO1xyXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxfaW1nX2xpc3Quc3Jjcy5wdXNoKC4uLnNyY3MpO1xyXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxfaW1nX2xpc3QuYWx0cy5wdXNoKC4uLmFsdHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhZGRfdG9vbF9pY29ucyhpZHMsIHNyY3MsIGFsdHMpIHtcclxuICAgICAgICB0aGlzLnRvb2xfaWNvbl9saXN0Lmlkcy5wdXNoKC4uLmlkcyk7XHJcbiAgICAgICAgdGhpcy50b29sX2ljb25fbGlzdC5zcmNzLnB1c2goLi4uc3Jjcyk7XHJcbiAgICAgICAgdGhpcy50b29sX2ljb25fbGlzdC5hbHRzLnB1c2goLi4uYWx0cyk7XHJcbiAgICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdDsiLCIndXNlIHN0cmljdCc7XHJcblxyXG5jb25zb2xlLmxvZyhcIkFwcC5qcyBMb2FkZWQgU3VjY2Vzc2Z1bGx5XCIpO1xyXG5cclxuY29uc3QgY2FjaGUgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGltcG9ydEFsbChyKSB7XHJcbiAgICByLmtleXMoKS5mb3JFYWNoKChrZXkpID0+IChjYWNoZVtrZXldID0gcihrZXkpKSk7XHJcbn07XHJcblxyXG5pbXBvcnQoXCIuLi9jc3Mvc3R5bGUuY3NzXCIpXHJcbi50aGVuKCgpID0+IHtcclxuICAgIGltcG9ydChcIi4uL2Nzcy9tcS5jc3NcIilcclxufSlcclxuLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBpbXBvcnQgQ1NTIGZpbGVzOiBcIiwgZXJyKSk7XHJcblxyXG4vL3JlcXVpcmUoXCIuLi9jc3Mvc3R5bGUuY3NzXCIpO1xyXG4vL3JlcXVpcmUoXCIuLi9jc3MvbXEuY3NzXCIpO1xyXG4vL2ltcG9ydEFsbChyZXF1aXJlLmNvbnRleHQoJy4vanMvJywgdHJ1ZSwgL1xcLmpzJC8pKTtcclxuLy9pbXBvcnRBbGwocmVxdWlyZS5jb250ZXh0KCcuLi9jc3MvJywgdHJ1ZSwgL1xcLmNzcyQvKSk7XHJcbi8vaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi9pbWcvJywgdHJ1ZSwgL1xcLihwbmd8c3ZnfGpwZ3xqcGVnfGdpZnx3ZWJwKSQvKSk7XHJcbi8vaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi9odG1sLycsIHRydWUsIC9cXC5odG1sJC8pKTtcclxuaW1wb3J0QWxsKHJlcXVpcmUuY29udGV4dCgnLi4vYXNzZXRzLycsIHRydWUsIC9cXC5wZGYkLykpO1xyXG5pbXBvcnRBbGwocmVxdWlyZS5jb250ZXh0KCcuLi9tZWRpYS8nLCB0cnVlLCAvXFwubXA0JC8pKTtcclxuXHJcbmltcG9ydCBVSSBmcm9tIFwiLi9VSV9Mb2dpYy9VSS5qc1wiO1xyXG5pbXBvcnQgeyBsb2dnZXIsIGNhbGN1bGF0ZV9hZ2UsIHdyYXBwZXJfZXhlYywgd3JhcHBlcl9ub19leGVjLCBkZWJvdW5jZSwgdGhyb3R0bGUsIHNjcm9sbF9wcm9ncmVzcyxcclxuICAgIGdlbmVyYXRlX2RhcmtfY29sb3JfaGV4LCBmb3JtX3N1Ym1pdF9zdWNjZXNzLCBmb3JtX3N1Ym1pdF9lcnJvciwgYWpheCwgbWVkaWFfcXVlcmllc30gZnJvbSBcIi4vQnVzaW5lc3NfTG9naWMvRnVuY3Rpb25zLmpzXCI7XHJcbmltcG9ydCBTa2lsbF9SYXRpbmcgZnJvbSBcIi4vQnVzaW5lc3NfTG9naWMvU2tpbGxSYXRpbmcuanNcIjtcclxuaW1wb3J0IFByb2plY3QgZnJvbSBcIi4vQnVzaW5lc3NfTG9naWMvUHJvamVjdC5qc1wiO1xyXG4vL2ltcG9ydCBGb3Jtc3ByZWUgZnJvbSBcIi4vQnVzaW5lc3NfTG9naWMvRm9ybXNwcmVlLmpzXCI7XHJcbi8vaW1wb3J0IEFQSSBmcm9tIFwiLi9CdXNpbmVzc19Mb2dpYy9BUEkuanNcIjtcclxuXHJcbi8vIEdvb2dsZSByZWNhcHRjaGEgZGF0YSBmdW5jdGlvbiAoZnVuY3Rpb24gbmFtZSBtdXN0IGJlIHNhbWUgYXMgZGF0YS1jYWxsYmFjayBhdHRyaWJ1dGUgdmFsdWUpXHJcbmZ1bmN0aW9uIHJlY2FwdGNoYUNhbGxiYWNrKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgLy9jb25zb2xlLmxvZyhcIkluIHJlY2FwdGNoYVwiKTtcclxuICAgIHJldHVybiBmdW5jKCk7XHJcbn07XHJcblxyXG5jb25zdCBBcHAgPSB7XHJcbiAgICBpbml0KCkge1xyXG5cclxuICAgICAgICAvKioqIE1haW4gRG9jdW1lbnQgKioqL1xyXG5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKT0+e1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJET01Db250ZW50TG9hZGVkIFN1Y2Nlc3NmdWxseVwiKTsgICAgXHJcblxyXG4gICAgICAgICAgICAvL1VJLnRvZ2dsZXJfbWVudV9pY29uX3N3aXRjaCgpO1xyXG5cclxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gTGF6eSBsb2FkIGltYWdlc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdF9sYXp5X2ltZ3MgPSBbXS5zbGljZS5jYWxsKFVJLmxhenlfaW1ncyk7XHJcbiAgICAgICAgICAgICAgICAvLyBMYXp5IGxvYWQgaW1hZ2Ugc291cmNlcyAocGljdHVyZSB0YWcpXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0X2xhenlfc291cmNlcyA9IFtdLnNsaWNlLmNhbGwoVUkubGF6eV9zb3VyY2VzKTtcclxuICAgICAgICAgICAgICAgIC8vIExhenkgbG9hZCBiYWNrZ3JvdW5kIGltYWdlcyBpbiBDU1NcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRfbGF6eV9iZ3MgPSBbXS5zbGljZS5jYWxsKFVJLmxhenlfYmdzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRfZ3JlY2FwdGNoYXMgPSBbXS5zbGljZS5jYWxsKFVJLmdyZWNhcHRjaGFzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICByb290TWFyZ2luOiAnMjUwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcIkludGVyc2VjdGlvbk9ic2VydmVyXCIgaW4gd2luZG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTGF6eSBJbWFnZXNcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXp5X2ltZ19vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbihlbnRyaWVzLCBvYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhenlfaW1hZ2UgPSBlbnRyeS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF6eV9kYXRhX3NyYyA9IGxhenlfaW1hZ2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF6eV9kYXRhX3NyY3NldCA9IGxhenlfaW1hZ2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNzZXRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXp5X2ltYWdlLmhhc0F0dHJpYnV0ZShcImRhdGEtc3JjXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfaW1hZ2Uuc2V0QXR0cmlidXRlKFwic3JjXCIsIGxhenlfZGF0YV9zcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2ltYWdlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3JjXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXp5X2ltYWdlLmhhc0F0dHJpYnV0ZShcImRhdGEtc3Jjc2V0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfaW1hZ2Uuc2V0QXR0cmlidXRlKFwic3Jjc2V0XCIsIGxhenlfZGF0YV9zcmNzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2ltYWdlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3Jjc2V0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9pbWFnZS5jbGFzc0xpc3QucmVtb3ZlKFwibGF6eVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X2ltZ19vYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbml0X2xhenlfaW1ncy5mb3JFYWNoKGZ1bmN0aW9uKGxhenlfaW1nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfaW1nX29ic2VydmVyLm9ic2VydmUobGF6eV9pbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgLy8gTGF6eSBJbWFnZSBTb3VyY2VzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF6eV9zb3VyY2Vfb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oZW50cmllcywgb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXp5X3NvdXJjZSA9IGVudHJ5LnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXp5X2RhdGFfc3Jjc2V0ID0gbGF6eV9zb3VyY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1zcmNzZXRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXp5X3NvdXJjZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXNyY3NldFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5X3NvdXJjZS5zZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiwgbGF6eV9kYXRhX3NyY3NldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfc291cmNlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtc3Jjc2V0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9zb3VyY2Vfb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdF9sYXp5X3NvdXJjZXMuZm9yRWFjaChmdW5jdGlvbihsYXp5X3NvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXp5X3NvdXJjZV9vYnNlcnZlci5vYnNlcnZlKGxhenlfc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTGF6eSBCZ1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhenlfYmdfb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oZW50cmllcywgb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmFkZChcImxvYWQtbm93XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlfYmdfb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdF9sYXp5X2Jncy5mb3JFYWNoKGZ1bmN0aW9uKGxhenlfYmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF6eV9iZ19vYnNlcnZlci5vYnNlcnZlKGxhenlfYmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBncmVjYXB0Y2hhX29ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uKGVudHJpZXMsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLmNyZWF0ZV9zY3JpcHRzKFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzP3JlbmRlcj1leHBsaWNpdFwiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2tzIHRvIHNlZSBpZiByZWNhcHRjaGEgaGFzIGxvYWRlZCBjb3JyZWN0bHkgYW5kICppZiBub3QsIG1ha2VzIHVwIHRvIDEwIGF0dGVtcHRzIHRvIHJlbG9hZCpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjYXB0Y2hhQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ3JlY2FwdGNoYV9jaGVjayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVSS5ncmVjYXB0Y2hhcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLm15X2Zvcm1fYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmVjYXB0Y2hhX29ic2VydmVyLnVub2JzZXJ2ZShlbnRyeS50YXJnZXQpOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhncmVjYXB0Y2hhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlY2FwdGNoYS5yZW5kZXIoXCJyZWNhcHRjaGFcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZWtleTogXCI2TGZXSGtnYUFBQUFBSUtFY3VxVFFpeTgyWVNwZVdUZGplYnNmV1ozXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlY2FwdGNoYV9jaGVjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxNTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JlY2FwdGNoYV9jaGVjaygpOyAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coXCJFcnJvciBpbiBzY3JpcHQgZGVsYXkgcHJvbWlzZTogXCIsIGVycikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRfZ3JlY2FwdGNoYXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JlY2FwdGNoYV9vYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSkoKTsgICAgXHJcblxyXG4gICAgICAgICAgICAvKioqIEdFTkVSQUwgKioqL1xyXG5cclxuICAgICAgICAgICAgVUkuYm9keS5jbGFzc0xpc3QuYWRkKFwid2lsbC1jaGFuZ2UtaGVpZ2h0XCIpO1xyXG4gICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LmFkZChcIndpbGwtY2hhbmdlLWhlaWdodFwiKTtcclxuICAgICAgICAgICAgVUkubXlfZm9ybV9idXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCBuZXcgcG9zdGVyIGltYWdlIGlmIG9uIG1vYmlsZSBkZXZpY2VcclxuICAgICAgICAgICAgLy8gTG9hZCBCRyB2aWRlbyBmcm9tIHNlbGVjdGlvblxyXG4gICAgICAgICAgICBVSS5hZGRfcG9zdGVyX2ltZ19zbSgpO1xyXG4gICAgICAgICAgICBVSS5sb2FkX2JnX3ZpZCgpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBkZWJvdW5jZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFVJLmFkZF9wb3N0ZXJfaW1nX3NtKCk7XHJcbiAgICAgICAgICAgICAgICBVSS5sb2FkX2JnX3ZpZCgpO1xyXG4gICAgICAgICAgICB9LCA1MDApKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIERlbGF5IGxvYWQgb2Ygbm9uLWVzc2VudGlhbCBzY3JpcHRzXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyh3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDc2OHB4KVwiKSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBVSS5jcmVhdGVfc2NyaXB0cyhcImh0dHBzOi8vdW5wa2cuY29tL0Bsb3R0aWVmaWxlcy9sb3R0aWUtcGxheWVyQGxhdGVzdC9kaXN0L2xvdHRpZS1wbGF5ZXIuanNcIik7XHJcbiAgICAgICAgICAgICAgICB9LCAoKSA9PiB7cmV0dXJufSlcclxuICAgICAgICAgICAgfSwgMjAwMCk7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVJLmNyZWF0ZV9zY3JpcHRzKFwiaHR0cHM6Ly9jb2RlLnRpZGlvLmNvL2VkdjhiYWRsYXZ3dmVreW80MnRma3h5cDZmcnV0N3lxLmpzXCIsIFwiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9heGlvcy9kaXN0L2F4aW9zLm1pbi5qc1wiKTtcclxuICAgICAgICAgICAgfSwgMTAwMDApO1xyXG5cclxuICAgICAgICAgICAgLy9jb25zdCBzY3JpcHRfZGVsYXkgPSBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIExvYWRzIEdvb2dsZSBQcmV2aWV3IG9uIGNsaWNrIG9ubHlcclxuICAgICAgICAgICAgbGV0IGdvb2dsZV9wcmV2aWV3X2J0bl9pc19jbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIFVJLmdvb2dsZV9wcmV2aWV3X21vZGFsX2J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZ29vZ2xlX3ByZXZpZXdfYnRuX2lzX2NsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuZ29vZ2xlX3ByZXZpZXdfbW9kYWwuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xZEpMQWRiT2xWTnotYnRZdjZabDFJaHJsSFFLWU5RbFQvcHJldmlld1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xlX3ByZXZpZXdfYnRuX2lzX2NsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICByb290TWFyZ2luOiBcIjEwcHhcIixcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZDogMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pbnRlcnNlY3Rpb25SZWN0LmhlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZW50cnkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlbHNlIGVudHJ5XCIsIGVudHJ5KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxfbGltaXQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgc2Nyb2xsX21vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxfdG9wX3Jlc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IGhlYWRlcl92aWRfZW5kZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbF90aW1lcjtcclxuXHJcbiAgICAgICAgICAgIC8vIFNpbXVsYXRlcyBhbm90aGVyIGNsaWNrIGV2ZW50IGFmdGVyIGZpcnN0IGlmIHNjcm9sbGVkIHRvIHRvcCBcclxuICAgICAgICAgICAgLy8gRHVlIHRvIGR5bmFtaWMgaGVpZ2h0IGNoYW5nZXMgaW4gYm9keSBhbmNob3JzIGNhbiBzb21ldGltZXMgbm90IHNjcm9sbCB0byBhY2N1cmF0ZSBwb3NpdGlvbnNcclxuICAgICAgICAgICAgVUkuYW5jaG9yX2xpbmtzLmZvckVhY2gobGluayA9PiB7XHJcbiAgICAgICAgICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPD0gc2Nyb2xsX2xpbWl0IHx8IHdpbmRvdy5wYWdlWU9mZnNldCA8PSBzY3JvbGxfbGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDc1MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldHMgdGhlIHRpbWVyIGZvciB0aGUgaGVhZGVyIGhpZGUvc2hvdyBmdW5jdGlvbiAodGltZXIgdG8gYmUgY2xlYXJlZCBvbiB3aW5kb3cgc2Nyb2xsIG9yIGVsZW1lbnQgaG92ZXIpXHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcl90aW1lciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNjcm9sbF90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pc19zY3JvbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dfaGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmhlYWRlci5jbGFzc0xpc3QuYWRkKFwiaGlkZS1oZWFkZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwic2hvdy1oZWFkZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0sIDgwMCkpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gQ29udHJvbHMgdGhlIHNpZGUgbWVudSAodGFibGV0KSBhbmQgbW9iaWxlIG1lbnUgZnVuY3Rpb25zIFxyXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlX21lbnVfdG9nZ2xlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIVVJLnRvZ2dsZXJfYnRuLmNsYXNzTGlzdC5jb250YWlucyhcImNvbGxhcHNlZFwiKSkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLnNpZGVfbWVudV9yZXZlYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLnNpZGVfbWVudV9oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9iaWxlX21lbnVfdG9nZ2xlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIVVJLnRvZ2dsZXJfYnRuLmNsYXNzTGlzdC5jb250YWlucyhcImNvbGxhcHNlZFwiKSkgeyAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkubW9iaWxlX21lbnVfcmV2ZWFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkubW9iaWxlX21lbnVfaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1xX21lbnVfdG9nZ2xlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtcV9saW1pdHMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogNzY3Ljk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogOTkxLjk4cHgpXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1swXSwgbW9iaWxlX21lbnVfdG9nZ2xlciwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMV0sIHNpZGVfbWVudV90b2dnbGVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgVUkudG9nZ2xlcl9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG1xX21lbnVfdG9nZ2xlcik7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBkZWJvdW5jZShmdW5jdGlvbigpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFVJLm5vX21lbnUoKTtcclxuICAgICAgICAgICAgICAgIH0sIDUwMCkpO1xyXG4gICAgICAgICAgICB9KCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlcyB2aWRlbyBhZnRlciBwbGF5aW5nIG9uY2UgYW5kIHRoZW4gYWRkcyBhIHN0YXRpYyBiYWNrZ3JvdW5kIGltYWdlIChyZWZyZXNoIHRvIHBsYXkgdmlkZW8gYWdhaW4pXHJcbiAgICAgICAgICAgIFVJLmhlYWRlcl92aWQuYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsICgpPT57XHJcbiAgICAgICAgICAgICAgICBVSS5yZXBsYWNlX3ZpZF9iZygpO1xyXG4gICAgICAgICAgICAgICAgVUkuaGVhZGVyX3ZpZC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGhlYWRlcl92aWRfZW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBSZW1vdmVzIHBvc3RlciBvciBiZyBpZiB2aWRlbyBmYWlscyB0byBsb2FkIGFuZCB0aGVuIGFkZHMgYSBzdGF0aWMgYmFja2dyb3VuZCBpbWFnZVxyXG4gICAgICAgICAgICBVSS5oZWFkZXJfdmlkLmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgKCk9PntcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLnJlcGxhY2VfdmlkX2JnKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuaGVhZGVyX3ZpZC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJfdmlkX2VuZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMDApO1xyXG4gICAgICAgICAgICB9KTsgXHJcblxyXG4gICAgICAgICAgICAvLyBDb250cm9scyB0aGUgU2Nyb2xsIEV2ZW50c1xyXG4gICAgICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJfdHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzaXplIGhlYWRlciB3aGVuIHNjcm9sbGluZyAtIGFkZHMgYXJ0aWZpY2lhbCBoZWlnaHQgdG8gY29tcGVuc2F0ZSBmb3IgcmVkdWN0aW9uIGluIGhlYWRlciBoZWlnaHQgYW5kIGFpZCBpbiBzbW9vdGggdHJhbnNpdGlvbmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA+IHNjcm9sbF9saW1pdCB8fCB3aW5kb3cucGFnZVlPZmZzZXQgPiBzY3JvbGxfbGltaXQpICYmIHNjcm9sbF9tb3ZlZCA9PT0gZmFsc2UpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5zaHJpbmtfaGVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmV4cGFuZF9wbGFjZWhvbGRlcl9kaXYoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsX21vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDw9IHNjcm9sbF9saW1pdCB8fCB3aW5kb3cucGFnZVlPZmZzZXQgPD0gc2Nyb2xsX2xpbWl0KSAmJiBzY3JvbGxfbW92ZWQgPT09IHRydWUpIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuZXhwYW5kX2hlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5zaHJpbmtfcGxhY2Vob2xkZXJfZGl2KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nyb2xsX21vdmVkICYmIGhlYWRlcl92aWRfZW5kZWQpIHsgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSS5yZXBsYWNlX3ZpZF9iZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsX21vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbF90b3BfcmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiBzY3JvbGxfbGltaXQgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID4gc2Nyb2xsX2xpbWl0KSAmJiBzY3JvbGxfbW92ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrcyBzY3JvbGwgcG9zaXRpb24gb24gbG9hZCBvciByZWZyZXNoIGFuZCBleGVjdXRlcyBcclxuICAgICAgICAgICAgICAgIGlmKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPiBzY3JvbGxfbGltaXQgfHwgd2luZG93LnBhZ2VZT2Zmc2V0ID4gc2Nyb2xsX2xpbWl0KSBzY3JvbGxfdG9wX3Jlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJfdHJhbnNmb3JtKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2Nyb2xsX21vdmVkX2RlYm91bmNlX3dyYXBwZXIgPSBkZWJvdW5jZShmdW5jdGlvbigpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbF9tb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgODAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGlja3lfaGVhZGVyX3Rocm90dGxlX3dyYXBwZXIgPSB0aHJvdHRsZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJfdHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gQWRqdXN0cyBoZWFkZXIgdG8gbWF0Y2ggc2NyZWVuIHNpemUgaWYgcmVzaXplZFxyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZGVib3VuY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcl90cmFuc2Zvcm0oKTtcclxuICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDApKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wcyB0aGUgaGVhZGVyIHRpbWVyIHdoZW4gbW91c2UgaG92ZXJzIG92ZXIgdGhlIGhlYWRlclxyXG4gICAgICAgICAgICAgICAgVUkuaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dfaGVhZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsX3RpbWVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0b3BzIHRoZSBoZWFkZXIgdGltZXIgd2hlbiBtb3VzZSBtb3ZlcyBvdmVyIHRoZSBoZWFkZXJcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wcyB0aGUgaGVhZGVyIHRpbWVyIHdoZW4gc2NyZWVuIGlzIHRvdWNoZWQgb24gdGhlIGhlYWRlclxyXG4gICAgICAgICAgICAgICAgVUkuaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICB9LCB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0b3BzIHRoZSBoZWFkZXIgdGltZXIgd2hlbiBzY3JlZW4gaXMgbW92ZWQgb24gdGhlIGhlYWRlclxyXG4gICAgICAgICAgICAgICAgVUkuaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3dfaGVhZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsX3RpbWVyKTtcclxuICAgICAgICAgICAgICAgIH0sIHtwYXNzaXZlOiB0cnVlfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVzdW1lcyBoZWFkZXIgdGltZXIgdG8gaGlkZSBoZWFkZXIgd2hlbiBtb3VzZSBsZWF2ZXMgdGhlIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA+IHNjcm9sbF9saW1pdCB8fCB3aW5kb3cucGFnZVlPZmZzZXQgPiBzY3JvbGxfbGltaXQpICYmICFVSS5ib3RfbmF2X2NvbGxhcHNlLmNsYXNzTGlzdC5jb250YWlucyhcInNob3dcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaG93X2hlYWRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJfdGltZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9OyAgICBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0b3BzIHRoZSBoZWFkZXIgdGltZXIgd2hlbiB3aGVuIGhlYWRlciBidXR0b25zIGFyZSBmb2N1c2VkXHJcbiAgICAgICAgICAgICAgICBVSS5oZWFkZXJfYnRucy5mb3JFYWNoKGJ0biA9PiB7ICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19oZWFkZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsX3RpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN0b3BzIHRoZSBoZWFkZXIgdGltZXIgd2hlbiBoZWFkZXIgbGlua3MgYXJlIGZvY3VzZWRcclxuICAgICAgICAgICAgICAgIFVJLmhlYWRlcl9saW5rcy5mb3JFYWNoKGxpbmsgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dfaGVhZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbF90aW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL0hpZGVzIGhlYWRlciBvbiBzY3JvbGwgYW5kIHJldHVybnMgdG8gbm9ybWFsIHBvc2l0aW9uIHdoZW4gc3RvcHBlZCBhZnRlciBhIGZldyBzZWNvbmRzXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRocm90dGxlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA+IHNjcm9sbF9saW1pdCB8fCB3aW5kb3cucGFnZVlPZmZzZXQgPiBzY3JvbGxfbGltaXQpIHNob3dfaGVhZGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBzaG93X2hlYWRlciA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHByZXZpb3VzIHRpbWVyIGFuZCByZXNldFxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzY3JvbGxfdGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEhpZGVzIHRoZSBoZWFkZXIgb24gc2Nyb2xsIHN0b3Agb3Igc2hvd3Mgd2hpbGUgc2Nyb2xsaW5nIG9yIGhvdmVyaW5nIG9uIGVsZW1lbnQgKGRlYm91bmNlcyB3aGlsZSBzY3JvbGxpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaG93X2hlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVUkuYm90X25hdl9jb2xsYXBzZS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93X2hlYWRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LmFkZChcInNob3ctaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJfdGltZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5oZWFkZXIuY2xhc3NMaXN0LmFkZChcInNob3ctaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApLCB7cGFzc2l2ZTogdHJ1ZX0pOyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZGVib3VuY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbF9wcm9ncmVzcyhVSS5zY3JvbGxfaW5kaWNhdG9yKTtcclxuICAgICAgICAgICAgICAgIH0sIDIwMCksIHtwYXNzaXZlOiB0cnVlfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzY3JvbGxfbW92ZWRfZGVib3VuY2Vfd3JhcHBlciwgIHtwYXNzaXZlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHNjcm9sbF9tb3ZlZF9kZWJvdW5jZV93cmFwcGVyLCAge3Bhc3NpdmU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHNjcm9sbF9tb3ZlZF9kZWJvdW5jZV93cmFwcGVyLCAge3Bhc3NpdmU6IHRydWV9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHN0aWNreV9oZWFkZXJfdGhyb3R0bGVfd3JhcHBlciwgIHtwYXNzaXZlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHN0aWNreV9oZWFkZXJfdGhyb3R0bGVfd3JhcHBlciwgIHtwYXNzaXZlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBzdGlja3lfaGVhZGVyX3Rocm90dGxlX3dyYXBwZXIsICB7cGFzc2l2ZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAgICAgLy9BZGQgYWN0aXZlLWxpc3QgY2xhc3MgdG8gYWN0aXZlIGxpbmsgdG8gd29yayB3aXRoIENTUyA6OmJlZm9yZSBhbmQgOjphZnRlciBzZXR0aW5ncyAoZG9lcyBub3Qgd29yayB3ZWxsIHdpdGggYW5pbWF0aW9ucyBmb3IgZHJvcGRvd24gd2hlbiBhY3RpdmUgaXMgc2V0IHRvIHRoZSBsaW5rIGl0c2VsZilcclxuICAgICAgICAgICAgLypVSS5hY3RpdmVfbGlzdHMuZm9yRWFjaChsaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZihsaS5jaGlsZHJlblswXS5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZChcImFjdGl2ZS1saXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZS1saXN0XCIpOyBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pOyovXHJcblxyXG4gICAgICAgICAgICAvKioqIEhPTUUgU0VDVElPTiAqKiovXHJcblxyXG4gICAgICAgICAgICAvLyBBbmltYXRlIFwiRGV2ZWxvcGVyIFBvcnRmb2xpb1wiXHJcbiAgICAgICAgICAgIFVJLmFuaW1hdGVfbGV0dGVycygpO1xyXG5cclxuICAgICAgICAgICAgLyoqKiBBQk9VVCBNRSBTRUNUSU9OICoqKi9cclxuXHJcbiAgICAgICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgYWRqdXN0IG15IGFnZSBpbiBiaW8gYmFzZWQgb24gZGF0ZVxyXG4gICAgICAgICAgICBVSS5teV9hZ2UuaW5uZXJIVE1MID0gY2FsY3VsYXRlX2FnZSgpOyBcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZHMgYSBmYWRlIGluIGFuZCBvdXQgZWZmZWN0IHdoZW4gY2xpY2tpbmcgdGhlIGJ1dHRvbiBpbiBteSBiaW9cclxuICAgICAgICAgICAgVUkuc3VtbWFyeV9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT57XHJcbiAgICAgICAgICAgICAgICBVSS5jaGFuZ2VfYWJvdXRfaW5mbygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8qKiogTVkgU0VSVklDRVMgU0VDVElPTiAqKiovXHJcblxyXG4gICAgICAgICAgICBsZXQgbXlfY2Fyb3VzZWxfYnRuX2NsaWNrID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGFuZ2VzIGNhcm91c2VsIGhvcml6b250YWwgc2Nyb2xsIGFtb3VudCBkZXBlbmRpbmcgb24gdGhlIHNjcmVlbiBzaXplXHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCBzY3JvbGxfYW10ID0gMzYwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXFfbGltaXRzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogMzIwLjk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogMzIxcHgpIGFuZCAobWF4LXdpZHRoOiA1NzUuOThweClcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA1NzZweCkgYW5kIChtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogOTkxLjk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogOTkycHgpIGFuZCAobWF4LXdpZHRoOiAxMTk5Ljk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogMTIwMHB4KSBhbmQgKG1heC13aWR0aDogMTM5OS45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDE0MDBweClcIilcclxuICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2Nyb2xsX2FtdF9tb2RpZmllciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzBdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY3JvbGxfYW10ID0gMjc0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1sxXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDI5NjtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzJdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY3JvbGxfYW10ID0gMzYwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1szXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDY1Ni8yO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1s0XSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDcyMC8yO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1s1XSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDk4MC8zO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1s2XSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsX2FtdCA9IDEwODAvMztcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsX2FtdF9tb2RpZmllcigpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZGVib3VuY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbF9hbXRfbW9kaWZpZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5teV9jYXJvdXNlbF9jb250ZW50LnNjcm9sbExlZnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgfSwgNTAwKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgVUkubXlfY2Fyb3VzZWxfcHJldl9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRocm90dGxlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9nZ2VyKHNjcm9sbF9hbXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLmdyb3dfYnRuX29uY2xpY2soVUkubXlfY2Fyb3VzZWxfcHJldl9idG4sIDEuMjUsIDI1MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuc2Nyb2xsX2hvcml6b250YWxseShVSS5teV9jYXJvdXNlbF9jb250ZW50LCAtc2Nyb2xsX2FtdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuc2Nyb2xsX2VuZChVSS5teV9jYXJvdXNlbF9jb250ZW50LCAyMCk7XHJcbiAgICAgICAgICAgICAgICB9LCA3MDApKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgVUkubXlfY2Fyb3VzZWxfbmV4dF9idG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRocm90dGxlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9nZ2VyKHNjcm9sbF9hbXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLmdyb3dfYnRuX29uY2xpY2soVUkubXlfY2Fyb3VzZWxfbmV4dF9idG4sIDEuMjUsIDI1MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuc2Nyb2xsX2hvcml6b250YWxseShVSS5teV9jYXJvdXNlbF9jb250ZW50LCBzY3JvbGxfYW10KTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5zY3JvbGxfc3RhcnQoVUkubXlfY2Fyb3VzZWxfY29udGVudCwgMjApO1xyXG4gICAgICAgICAgICAgICAgfSwgNzAwKSk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAvKioqIFRPT0xTICYgVEVDSE5PTE9HSUVTIFNFQ1RJT04gKioqL1xyXG5cclxuICAgICAgICAgICAgLyoqIFRhZyBDbG91ZCAqKi9cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0YWdjbG91ZF9yYWRpdXM7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbXFfbGltaXRzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1heC13aWR0aDogMzIwLjk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogMzIxcHgpIGFuZCAobWF4LXdpZHRoOiA1NzUuOThweClcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLXdpZHRoOiA1NzZweCkgYW5kIChtYXgtd2lkdGg6IDc2Ny45OHB4KVwiKSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDc2OHB4KSBhbmQgKG1heC13aWR0aDogOTkxLjk4cHgpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogOTkycHgpXCIpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhZ2Nsb3VkX3Jlc2l6ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1swXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFnY2xvdWRfcmFkaXVzID0gMTQwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpOyBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbMV0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ2Nsb3VkX3JhZGl1cyA9IDE1MDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTsgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhX3F1ZXJpZXMobXFfbGltaXRzWzJdLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWdjbG91ZF9yYWRpdXMgPSAyNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCk7IFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZWRpYV9xdWVyaWVzKG1xX2xpbWl0c1szXSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFnY2xvdWRfcmFkaXVzID0gMzAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpOyBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFfcXVlcmllcyhtcV9saW1pdHNbNF0sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ2Nsb3VkX3JhZGl1cyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBudWxsKTsgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRhZ2Nsb3VkX3Jlc2l6ZXIoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0YWdDbG91ZDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWdjbG91ZF9sb2FkZXIgPSBmdW5jdGlvbigpIHsgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVmaW5lIHRhZ3MgaW4ganMgYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbXlUYWdzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnT09QJywgJ1NPQyAvIE1WQycsICdSRVNULUFQSXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnRGF0YS1TdHJ1Y3R1cmVzJywgJ0NvbnRpbnVvdXMtSW50ZWdyYXRpb24nLCAnVUkgLyBVWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdUZXN0aW5nJywgJ1ZlcnNpb24tQ29udHJvbCcsICdEZWJ1Z2dpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQWxnb3JpdGhtcycsICdBcHAtRGV2ZWxvcG1lbnQnLCAnUmVzcG9uc2l2ZS1EZXNpZ24nLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlY3VyaXR5JywgJ09wdGltaXphdGlvbicsICdDdXN0b21lci1TZXJ2aWNlJyxcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW5kZXIgYSBkZWZhdWx0IHRhZyBjbG91ZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCB0YWdDbG91ZCA9IFRhZ0Nsb3VkKCcudGFnLWNsb3VkLWNvbnRlbnQnLCBteVRhZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbmZpZyB0YWcgY2xvdWQgYnkgb3ZlcnJpZGluZyBkZWZhdWx0IHBhcmFtZXRlcnMgYmVsb3dcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnQ2xvdWQgPSBUYWdDbG91ZCgnLnRhZy1jbG91ZC1jb250ZW50JywgbXlUYWdzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJhZGl1cyBpbiBweFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHRhZ2Nsb3VkX3JhZGl1cyA/PyAzNDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuaW1hdGlvbiBzcGVlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbG93LCBub3JtYWwsIGZhc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4U3BlZWQ6ICdmYXN0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFNwZWVkOiAnc2xvdycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgPSB0b3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gOTAgPSBsZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEzNSA9IHJpZ2h0LWJvdHRvbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IDEzNSwgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJhY3Qgd2l0aCBjdXJzb3IgbW92ZSBvbiBtb3VzZSBvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAga2VlcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codGFnQ2xvdWQpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBtb3JlIHRhZ3MgdG8gZXhpc3RpbmcgdGFnIGNsb3VkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbXlUYWdzID0gbXlUYWdzLmNvbmNhdChbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFnQ2xvdWQudXBkYXRlKG15VGFncyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ2Nsb3VkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YWdjbG91ZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdjbG91ZF9pdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFnY2xvdWQtLWl0ZW1cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJhbmRvbWl6ZXMgdGFnIHdvcmQgY29sb3VycyBhbmQgYWRkcyBlZmZlY3RzIG9uIGNsaWNrXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnY2xvdWRfaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5jb2xvciA9IGdlbmVyYXRlX2RhcmtfY29sb3JfaGV4KCk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xpY2tlZF9vbmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbGlja2VkX3R3aWNlID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja2VkX29uY2UgJiYgY2xpY2tlZF90d2ljZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuZm9udFNpemUgPSBcIjBcIjsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5jb2xvciA9IGdlbmVyYXRlX2RhcmtfY29sb3JfaGV4KCk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmZvbnRTaXplID0gXCJpbml0aWFsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuZm9udFdlaWdodCA9IFwiNDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWRfb25jZSA9IGZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tlZF90d2ljZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjbGlja2VkX29uY2UgJiYgIWNsaWNrZWRfdHdpY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmNvbG9yID0gXCJ2YXIoLS10aGVtZS1jb2xvdXItNClcIjsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pdGVtLnN0eWxlLmZvbnRTaXplID0gXCIxLjVyZW1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmZvbnRTaXplID0gXCIxNDAlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tlZF90d2ljZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuY29sb3IgPSBcInZhcigtLXRoZW1lLWNvbG91ci0xKVwiOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2l0ZW0uc3R5bGUuZm9udFNpemUgPSBcIjEuM3JlbVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXRlbS5zdHlsZS5mb250V2VpZ2h0ID0gXCI5MDBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmZvbnRTaXplID0gXCIxMjAlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tlZF9vbmNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGVsYXkgbG9hZGluZyBvZiB0YWcgY2xvdWRcclxuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlLCAzMTAwKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiBpbXBvcnQoXCIuL0J1c2luZXNzX0xvZ2ljL1RhZ0Nsb3VkLm1pbi5qc1wiKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBtb2R1bGUuZGVmYXVsdClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0YWdjbG91ZF9sb2FkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBSZXNldHMgYW5kIHJlc2l6ZXMgdGFnIGNsb3VkIGZvciBkaWZmZXJlbnQgc2NyZWVuIHNpemVzXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZGVib3VuY2UoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ2Nsb3VkX3Jlc2l6ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFnY2xvdWRcIikpIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFnY2xvdWRcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ2Nsb3VkX2xvYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCkpOyBcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBpbXBvcnQgVGFnQ2xvdWQgbW9kdWxlOiBcIiwgZXJyKSk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBEaXNwbGF5IHN0YXIgcmF0aW5nIGZvciBlYWNoIHRvb2wgLyB0ZWNobm9sb2d5IGJhc2VkIG9uIHNraWxsIGxldmVsIFxyXG4gICAgICAgICAgICBVSS5wb3B1bGF0ZV9za2lsbF9yYXRpbmcoKG5ldyBTa2lsbF9SYXRpbmcpKTtcclxuXHJcbiAgICAgICAgICAgIC8qKiogUFJPSkVDVFMgU0VDVElPTiAqKiovXHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgUHJvamVjdHNcclxuICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRfcHJvamVjdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld19pbm5lcl9odG1sID0gYGA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZXZfcHJvamVjdF9jYXJvdXNlbCA9IG5ldyBib290c3RyYXAuQ2Fyb3VzZWwoVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWwsIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsOiA1MDAwLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkcyBhbiBpbmRpY2F0b3IgYnV0dG9uLCBhbG9uZyB3aXRoIGF0dHJpYnV0ZXMgcGVyIGltYWdlIGFuZCBzZXRzIGFjdGl2ZSBjbGFzcyB0byBmaXJzdCBzbGlkZVxyXG4gICAgICAgICAgICAgICAgLy8gQWNjZXB0cyBhIHNpbmdsZSBwYXJhbWV0ZXIgd2l0aCB2YWx1ZXMgXCJkZXZcIiBvciBcImNsaWVudFwiXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3B1bGF0ZV9jYXJvdXNlbF9pbmRpY2F0b3JzID0gZnVuY3Rpb24ocHJval90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0LmNhcm91c2VsX2ltZ19saXN0LnNyY3MuZm9yRWFjaCgoaW5kaWNhdG9yLCBpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uc2V0QXR0cmlidXRlKFwiZGF0YS1icy10YXJnZXRcIiwgXCIjZGV2LXByb2plY3QtY2Fyb3VzZWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkgYnRuLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIiwgXCJidG5cIiksIGJ0bi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGJ0bi5jbGFzc0xpc3QuYWRkKFwiYnRuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBgU2xpZGUgJHtpbmRleCsxfWApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRvIGRldiBvciBjbGllbnQgcHJvamVjdCBkZXBlbmRpbmcgb24gcGFyYW1ldGVyIHNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJval90eXBlID09PSBcImRldlwiLnRvTG93ZXJDYXNlKCkpIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2luZGljYXRvcl9zZWN0aW9uLmFwcGVuZENoaWxkKGJ0bik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb2pfdHlwZSA9PT0gXCJjbGllbnRcIi50b0xvd2VyQ2FzZSgpKSBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbi5hcHBlbmRDaGlsZChidG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGRzIGVhY2ggaW1hZ2UgYWxvbmcgd2l0aCBhdHRyaWJ1dGVzLCB0byB0aGUgY2Fyb3VzZWwgc2xpZGVzaG93XHJcbiAgICAgICAgICAgICAgICAvLyBBY2NlcHRzIGEgc2luZ2xlIHBhcmFtZXRlciB3aXRoIHZhbHVlcyBcImRldlwiIG9yIFwiY2xpZW50XCJcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVsYXRlX2Nhcm91c2VsX2ltZ19kYXRhID0gZnVuY3Rpb24ocHJval90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0LmNhcm91c2VsX2ltZ19saXN0LnNyY3MuZm9yRWFjaCgoc3JjLCBpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIGRpdi5jbGFzc0xpc3QuYWRkKFwiY2Fyb3VzZWwtaXRlbVwiLCBcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkaXYuY2xhc3NMaXN0LmFkZChcImNhcm91c2VsLWl0ZW1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJsb2FkaW5nXCIsIFwibGF6eVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLmNsYXNzTGlzdC5hZGQoXCJkLWJsb2NrXCIsIFwidy0xMDBcIiwgXCJwLTNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcImFsdFwiLCAoY3VycmVudF9wcm9qZWN0LmNhcm91c2VsX2ltZ19saXN0LmFsdHNbaW5kZXhdIHx8IFwiTXkgcHJvamVjdCBjYXJvdXNlbCBpbWFnZVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjYyNVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjUwMFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGltZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdG8gZGV2IG9yIGNsaWVudCBwcm9qZWN0IGRlcGVuZGluZyBvbiBwYXJhbWV0ZXIgc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9qX3R5cGUgPT09IFwiZGV2XCIudG9Mb3dlckNhc2UoKSkgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbi5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9qX3R5cGUgPT09IFwiY2xpZW50XCIudG9Mb3dlckNhc2UoKSkgVUkuY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfaW5uZXJfc2VjdGlvbi5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGRzIG5vdGVzIHRvIHByb2plY3Qgb3ZlcnZpZXdcclxuICAgICAgICAgICAgICAgIC8vIEFjY2VwdHMgYSBzaW5nbGUgcGFyYW1ldGVyIHdpdGggdmFsdWVzIFwiZGV2XCIgb3IgXCJjbGllbnRcIlxyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdWxhdGVfcHJvamVjdF9ub3RlcyA9IGZ1bmN0aW9uKHByb2pfdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdC5ub3Rlcy5mb3JFYWNoKChub3RlLCBpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuaW5uZXJIVE1MID0gbm90ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBjdXJyZW50X3Byb2plY3Qubm90ZXMubGVuZ3RoIC0gMSkgbGlzdC5jbGFzc0xpc3QuYWRkKFwiZnctYm9sZFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0byBkZXYgb3IgY2xpZW50IHByb2plY3QgZGVwZW5kaW5nIG9uIHBhcmFtZXRlciBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2pfdHlwZSA9PT0gXCJkZXZcIi50b0xvd2VyQ2FzZSgpKSBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb24uYXBwZW5kQ2hpbGQobGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb2pfdHlwZSA9PT0gXCJjbGllbnRcIi50b0xvd2VyQ2FzZSgpKSBVSS5jbGllbnRfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb24uYXBwZW5kQ2hpbGQobGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFkZHMgZWFjaCB0b29sIC8gdGVjaG5vbG9neSBpY29uIHRvIHRoZSBlbmQgb2YgdGhlIHByb2plY3Qgb3ZlcnZpZXdcclxuICAgICAgICAgICAgICAgIC8vIEFjY2VwdHMgYSBzaW5nbGUgcGFyYW1ldGVyIHdpdGggdmFsdWVzIFwiZGV2XCIgb3IgXCJjbGllbnRcIlxyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdWxhdGVfcHJvamVjdF90b29sX2ljb25zID0gZnVuY3Rpb24ocHJval90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0LnRvb2xfaWNvbl9saXN0LnNyY3MuZm9yRWFjaCgoc3JjLCBpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwibG9hZGluZ1wiLCBcImxhenlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZy5jbGFzc0xpc3QuYWRkKFwiaW1nLWZsdWlkXCIsIFwiaWNvbi1kaXNwLWltZy1sZ1wiLCBcIm0tM1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLmlkID0gY3VycmVudF9wcm9qZWN0LnRvb2xfaWNvbl9saXN0Lmlkc1tpbmRleF0gfHwgbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwiYWx0XCIsIChjdXJyZW50X3Byb2plY3QudG9vbF9pY29uX2xpc3QuYWx0c1tpbmRleF0gfHwgXCJUb29sIGFuZCBUZWNobm9sb2d5IEljb24gQmFkZ2VcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCI4NVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjY0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRvIGRldiBvciBjbGllbnQgcHJvamVjdCBkZXBlbmRpbmcgb24gcGFyYW1ldGVyIHNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJval90eXBlID09PSBcImRldlwiLnRvTG93ZXJDYXNlKCkpIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2ljb25fc2VjdGlvbi5hcHBlbmRDaGlsZChpbWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9qX3R5cGUgPT09IFwiY2xpZW50XCIudG9Mb3dlckNhc2UoKSkgVUkuY2xpZW50X3Byb2plY3RfY2Fyb3VzZWxfaWNvbl9zZWN0aW9uLmFwcGVuZENoaWxkKGltZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZV9wcm9qZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X2lubmVyX2h0bWwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LXJvdyByb3cganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIGNvbC14bC02XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImRldi1wcm9qZWN0LWNhcm91c2VsXCIgY2xhc3M9XCJjYXJvdXNlbCBzbGlkZVwiIGRhdGEtYnMtcmlkZT1cImNhcm91c2VsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbC1pbmRpY2F0b3JzXCIgaWQ9XCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbmRpY2F0b3JzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWwtaW5uZXJcIiBpZD1cImRldi1wcm9qZWN0LWNhcm91c2VsLWlubmVyXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjYXJvdXNlbC1jb250cm9sLXByZXYgYnRuIGgtNTAgbS1hdXRvXCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtYnMtdGFyZ2V0PVwiI2Rldi1wcm9qZWN0LWNhcm91c2VsXCIgZGF0YS1icy1zbGlkZT1cInByZXZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2Fyb3VzZWwtY29udHJvbC1wcmV2LWljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZpc3VhbGx5LWhpZGRlblwiPlByZXZpb3VzPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2Fyb3VzZWwtY29udHJvbC1uZXh0IGJ0biBoLTUwIG0tYXV0b1wiIHR5cGU9XCJidXR0b25cIiBkYXRhLWJzLXRhcmdldD1cIiNkZXYtcHJvamVjdC1jYXJvdXNlbFwiIGRhdGEtYnMtc2xpZGU9XCJuZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9zcGFuPlxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2aXN1YWxseS1oaWRkZW5cIj5OZXh0PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tY3VzdG9tLTIgbXktNSBkLWJsb2NrIG14LWF1dG8gdy1hdXRvIGJ0bi1hbmltXCIgZGF0YS1pZD1cImRldi1wcm9qZWN0LWdhbGxlcnlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaXJjbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWFsdC1jaXJjbGUtdXBcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYnRuLXRleHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJldHVybiB0byBHYWxsZXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgY29sLXhsLTZcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5IHB5LTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGV4dC1jZW50ZXJcIj4ke2N1cnJlbnRfcHJvamVjdC5uYW1lfTwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7Y3VycmVudF9wcm9qZWN0LmRlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxzdHJvbmc+U3RhdHVzOiAke2N1cnJlbnRfcHJvamVjdC5zdGF0dXMubXNnfSA8c3BhbiBjbGFzcz1cIiR7Y3VycmVudF9wcm9qZWN0LnN0YXR1cy5jbGFzc19jb2RlfSBzdGF0dXMtY2lyY2xlXCI+PC9zcGFuPjwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSR7Y3VycmVudF9wcm9qZWN0Lmxpbmt9IGNsYXNzPVwiZnMtNSB0ZXh0LXJlc2V0IHRleHQtZGVjb3JhdGlvbi1ub25lIGFuaW0tbGluay0yIHctYXV0b1wiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCI+PHN0cm9uZyBjbGFzcz1cInRleHQtY3VzdG9tLTJcIj48aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT4gJHtjdXJyZW50X3Byb2plY3QubGlua19oZWFkZXJ9PC9zdHJvbmc+IE5vdyAke2N1cnJlbnRfcHJvamVjdC5saW5rX25vdGV9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnI+PGEgaHJlZj0ke2N1cnJlbnRfcHJvamVjdC5naXRodWJfbGlua30gY2xhc3M9XCJmcy01IHRleHQtcmVzZXQgdGV4dC1kZWNvcmF0aW9uLW5vbmUgYW5pbS1saW5rLTIgdy1hdXRvXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIj48c3Ryb25nIGNsYXNzPVwidGV4dC1jdXN0b20tMVwiPjxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPiBSZXZpZXc8L3N0cm9uZz4gQ29kZSAke2N1cnJlbnRfcHJvamVjdC5naXRodWJfcmVhZG1lfTwvYT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInNtYWxsIHRleHQtbGVmdCBtdC0zXCI+Tm90ZXM6PC9oND5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwidGV4dC13cmFwXCIgaWQ9XCJkZXYtcHJvamVjdC1jYXJvdXNlbC1ub3Rlc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+ICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInNtYWxsIG10LTNcIj4tIEJ1aWx0IFVzaW5nIC08L2gzPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb24tcm93LXNtIG1iLTNcIiBpZD1cImRldi1wcm9qZWN0LWNhcm91c2VsLWljb24tc2VjdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWN1c3RvbS0yIG15LTUgZC1ibG9jayBteC1hdXRvIHctYXV0byBidG4tYW5pbSBkLXhsLW5vbmVcIiBkYXRhLWlkPVwiZGV2LXByb2plY3QtZ2FsbGVyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNpcmNsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtYXJyb3ctYWx0LWNpcmNsZS11cFwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJidG4tdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmV0dXJuIHRvIEdhbGxlcnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVpbml0aWFsaXplX2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmUtZGVjbGFyZSAodXBkYXRlKSBkb2N1bWVudCBJRHMgb24gbmV3IGlubmVyIGh0bWxcclxuICAgICAgICAgICAgICAgICAgICBVSS5yZXR1cm5fdG9fZGV2X2dhbGxlcnlfYnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1pZD0nZGV2LXByb2plY3QtZ2FsbGVyeSddXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbmRpY2F0b3Jfc2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtY2Fyb3VzZWwtaW5kaWNhdG9yc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbm5lcl9zZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZXYtcHJvamVjdC1jYXJvdXNlbC1pbm5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9ub3RlX3NlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRldi1wcm9qZWN0LWNhcm91c2VsLW5vdGVzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2ljb25fc2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGV2LXByb2plY3QtY2Fyb3VzZWwtaWNvbi1zZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlX2Nhcm91c2VsX2ltZ19kYXRhKFwiZGV2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlX2Nhcm91c2VsX2luZGljYXRvcnMoXCJkZXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGVfcHJvamVjdF9ub3RlcyhcImRldlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZV9wcm9qZWN0X3Rvb2xfaWNvbnMoXCJkZXZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIm5ldyBpbmRpY2F0b3JzXCIsIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2luZGljYXRvcl9zZWN0aW9uLCBcIm5ldyBpbm5lclwiLCBVSS5kZXZfcHJvamVjdF9jYXJvdXNlbF9pbm5lcl9zZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2Rldl9wcm9qZWN0X2Nhcm91c2VsO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdsb2FkJykpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBbGllbiBNYXRodmFzaW9uIFByb2plY3RcclxuICAgICAgICAgICAgICAgIGNvbnN0IEFsaWVuX01hdGh2YXNpb24gPSBuZXcgUHJvamVjdChcIkFsaWVuIE1hdGh2YXNpb24gR2FtZVwiLCAyLCBcImh0dHBzOi8vZG5vZWxtYXRoaW52YXNpb25nYW1lLm5ldGxpZnkuYXBwL2h0bWwvZ2FtZXNjcmVlbi5odG1sXCIsIFwiUGxheVwiLCBcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9ETm9lbDI2L0FsaWVuX01hdGh2YXNpb25cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBBbGllbl9NYXRodmFzaW9uLmRlc2NyaXB0aW9uID0gYFRoaXMgcHJvamVjdCB3YXMgZGVzaWduZWQgZm9yIGNoaWxkcmVuIGFnZXMgOCsgd2l0aCB0aGUgZ29hbCBvZiBtYWtpbmcgbWF0aCBmdW4gYW5kIGVuZ2FnaW5nLiBJdCB3YXMgYnVpbHQgZnJvbSBzY3JhdGNoIHdpdGhvdXQgYW55IGZyYW1ld29ya3MsIGxpYnJhcmllcyBvciBkZXBlbmRlbmNpZXMgdXNpbmcgT09QIGFuZCBTT0MgcHJpbmNpcGxlcywgYW5kIHdpdGggdGhlIFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVudGlvbiBvZiBtYWtpbmcgY29kZSBEUlkgYW5kIGVhc2llciB0byBtYWludGFpbi4gVXRpbGl6ZXMgaGVhdnkgSmF2YVNjcmlwdCBhbmQgRE9NIG1hbmlwdWxhdGlvbi4gVXNlcyBwcm9taXNlcyBpbnN0ZWFkIG9mIHdoaWxlIGxvb3BzIHRvIHRyYWNrIHByb2dyZXNzLiBWaXN1YWwgZGVzaWduIGlzIGJhc2VkIG9uIHJldHJvIGFyY2FkZSBTaG9vdC1lbSBVcCBnYW1lcy5cclxuICAgICAgICAgICAgICAgICAgICBHb29kIGx1Y2sgc3Vydml2aW5nIHRoZSBoYXJkZXN0IGRpZmZpY3VsdHkhXHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgQWxpZW5fTWF0aHZhc2lvbi5saW5rX25vdGUgPSBcIihleHBlY3QgYXVkaW8gLSBkZXNrdG9wIHZlcnNpb24gb25seSEpXCI7XHJcbiAgICAgICAgICAgICAgICBBbGllbl9NYXRodmFzaW9uLm5vdGVzLnB1c2goYEdhbWVwbGF5IHdvcmtzIGNvbXBsZXRlbHkgYnV0IHRoZXJlIGFyZSBzb21lIG1pbm9yIGJ1Z3MgdG8gZml4LCBtYWlubHkgaW4gdGhlIGFyZWFzIG9mIFVJL1VYLiBWZXJ5IHJhcmVseSwgZ2FtZSBkb2VzIG5vdCBsb2FkIHdoZW4gZGlmZmljdWx0eSBpcyBzZWxlY3RlZC4gU2ltcGx5IHJlZnJlc2ggdGhlIGJyb3dzZXIgYW5kIHRyeSBhZ2Fpbi5gKTtcclxuICAgICAgICAgICAgICAgIEFsaWVuX01hdGh2YXNpb24ubm90ZXMucHVzaChgU29tZSBmZWF0dXJlcyBhcmUgbWlzc2luZyBzdWNoIGFzIHBsYXllciBlbnRlcmVkIGRldGFpbHMsIGRhdGEgcGVyc2lzdGVuY2UsIHNldHRpbmdzOyB0byBiZSBpbXBsZW1lbnRlZCBhdCBhIGxhdGVyIGRhdGUuYCk7XHJcbiAgICAgICAgICAgICAgICBBbGllbl9NYXRodmFzaW9uLm5vdGVzLnB1c2goYFVzZSBHb29nbGUgQ2hyb21lIGZvciB0aGUgYmVzdCBleHBlcmllbmNlLiBOb3QgeWV0IGZ1bGx5IHJlc3BvbnNpdmUgb24gc21hbGxlciBkZXZpY2VzIWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxpZW5fbV9jYXJvdXNlbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbGllbl9tX2Nhcm91c2VsX2ltZ19zcmNzID0gW1wiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vYWxpZW4tbWF0aHZhc2lvbi0xLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vYWxpZW4tbWF0aHZhc2lvbi0yLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vYWxpZW4tbWF0aHZhc2lvbi0zLW1pbi53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxpZW5fbV9jYXJvdXNlbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxpZW5fbV90b29sX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsaWVuX21fdG9vbF9pbWdfc3JjcyA9IFtcIi4vaW1nL2xvZ29zL2h0bWw1LWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9jc3MzLWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9qYXZhc2NyaXB0LWJhZGdlLndlYnBcIl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbGllbl9tX3Rvb2xfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIEFsaWVuX01hdGh2YXNpb24uYWRkX2ltZ3MoYWxpZW5fbV9jYXJvdXNlbF9pbWdfaWRzLCBhbGllbl9tX2Nhcm91c2VsX2ltZ19zcmNzLCBhbGllbl9tX2Nhcm91c2VsX2ltZ19hbHRzKTtcclxuICAgICAgICAgICAgICAgIEFsaWVuX01hdGh2YXNpb24uYWRkX3Rvb2xfaWNvbnMoYWxpZW5fbV90b29sX2ltZ19pZHMsIGFsaWVuX21fdG9vbF9pbWdfc3JjcywgYWxpZW5fbV90b29sX2ltZ19hbHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBXaXggQ2xvbmUgUHJvamVjdFxyXG4gICAgICAgICAgICAgICAgY29uc3QgV2l4X0Nsb25lID0gbmV3IFByb2plY3QoXCJXaXggU2l0ZSBDbG9uZVwiLCAxLCBcImh0dHBzOi8vZG5vZWxtb3RvcmN5Y2xld2l4Y2xvbmUubmV0bGlmeS5hcHAvXCIsIFwiVmlld1wiLCBcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9ETm9lbDI2L1dpeF9Nb3RvcmN5Y2xlX1RyaWFsXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgV2l4X0Nsb25lLmRlc2NyaXB0aW9uID0gYFRoaXMgd2FzIG15IGZpcnN0IG9mZmljaWFsIGRldmVsb3BtZW50IHByb2plY3QgYW5kIHdhcyBpbnRlbmRlZCB0byBiZSBhIHBpeGVsIGZvciBwaXhlbCBjbG9uZSBvZlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwidGV4dC1yZXNldCB0ZXh0LWRlY29yYXRpb24tbm9uZSBhbmltLWxpbmstM1wiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vd3d3LndpeC5jb20vd2Vic2l0ZS10ZW1wbGF0ZS92aWV3L2h0bWwvNzczP3NpdGVJZD0zMjY0N2Q4OS0xNDYwLTQzMjYtYjA4NC1hOTU4YmY5MDc2NWQmbWV0YVNpdGVJZD0xMjk5MDRhZC0zMDUxLThjODctZjY5Zi0zMWNlNzUxNjZmOWMmb3JpZ2luVXJsPWh0dHBzJTNBJTJGJTJGd3d3LndpeC5jb20lMkZ3ZWJzaXRlJTJGdGVtcGxhdGVzJTNGY3JpdGVyaWElM0RhdXRvJnRwQ2xpY2s9dmlld19idXR0b25cIj5hIHNlbGVjdGVkLCBvcmlnaW5hbCBXaXggc2l0ZTwvYT4uIFxyXG4gICAgICAgICAgICAgICAgICAgIEl0IHdhcyBidWlsdCB1c2luZyBIVE1MLCBDU1MgYW5kIHdpdGhvdXQgYW55IEphdmFTY3JpcHQuIFxyXG4gICAgICAgICAgICAgICAgICAgIFNob3djYXNlcyB0aGUgYWJpbGl0eSB0byB0YWtlIGEgZGVzaWduIGFuZCBjb252ZXJ0IGl0IGludG8gYSBmdW5jdGlvbmFsIHdlYnBhZ2Ugb3Igd2Vic2l0ZS5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICBXaXhfQ2xvbmUubGlua19ub3RlID0gXCIoc2VlIGxpbmsgdG8gY2xvbmVkIFdpeCBzaXRlIGFib3ZlKVwiO1xyXG4gICAgICAgICAgICAgICAgV2l4X0Nsb25lLm5vdGVzLnB1c2goYE9ubHkgMyBwYWdlcyB3ZXJlIGNsb25lZCBmb3IgdGhpcyBwcm9qZWN0OiBIb21lLCBBYm91dCBhbmQgQ29udGFjdC5gKTtcclxuICAgICAgICAgICAgICAgIFdpeF9DbG9uZS5ub3Rlcy5wdXNoKGBXZWJzaXRlIGlzIGZ1bGx5IHJlc3BvbnNpdmUgZm9yIGFsbCBkZXZpY2VzIWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2l4X2NfY2Fyb3VzZWxfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2l4X2NfY2Fyb3VzZWxfaW1nX3NyY3MgPSBbXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi93aXgtY2xvbmUtMS1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL3dpeC1jbG9uZS0yLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vd2l4LWNsb25lLTMtbWluLndlYnBcIl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3aXhfY19jYXJvdXNlbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2l4X2NfdG9vbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3aXhfY190b29sX2ltZ19zcmNzID0gW1wiLi9pbWcvbG9nb3MvaHRtbDUtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL2NzczMtYmFkZ2Uud2VicFwiXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpeF9jX3Rvb2xfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIFdpeF9DbG9uZS5hZGRfaW1ncyh3aXhfY19jYXJvdXNlbF9pbWdfaWRzLCB3aXhfY19jYXJvdXNlbF9pbWdfc3Jjcywgd2l4X2NfY2Fyb3VzZWxfaW1nX2FsdHMpO1xyXG4gICAgICAgICAgICAgICAgV2l4X0Nsb25lLmFkZF90b29sX2ljb25zKHdpeF9jX3Rvb2xfaW1nX2lkcywgd2l4X2NfdG9vbF9pbWdfc3Jjcywgd2l4X2NfdG9vbF9pbWdfYWx0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3liZXJkaXNlIE9ubGluZSBTdG9yZSBQcm9qZWN0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBDeWJlcmRpc2UgPSBuZXcgUHJvamVjdChcIkN5YmVyZGlzZSBPbmxpbmUgU3RvcmVcIiwgMiwgXCJodHRwczovL2Rub2VsY3liZXJkaXNlLmhlcm9rdWFwcC5jb20vXCIsIFwiSW50ZXJhY3RcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vRE5vZWwyNi9DeWJlcmRpc2UtRHluYW1pYy1cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBDeWJlcmRpc2UuZGVzY3JpcHRpb24gPSBgVGhpcyBwcm9qZWN0IHdhcyBteSBmaXJzdCBvZmZpY2lhbCBGdWxsIFN0YWNrIGRldmVsb3BtZW50IHByb2plY3QgYW5kIGVuZC10by1lbmQgQy5SLlUuRC4gYXBwbGljYXRpb24sIGFuZCB3YXMgZGVzaWduZWQgdG8gdGVzdCBldmVyeXRoaW5nIEkgaGFkIGxlYXJuZWQgKGFuZCBtb3JlKS4gVGhpcyBvbmxpbmUgc3RvcmUgd2FzIGJ1aWx0IGZyb20gc2NyYXRjaCB1c2luZyBNVkMgcHJpbmNpcGxlcyBmb3IgdGhlIEJhY2sgRW5kIGNvZGUuXHJcbiAgICAgICAgICAgICAgICAgICAgVGhlIGRhdGFiYXNlIHdhcyBkZXNpZ25lZCwgbm9ybWFsaXplZCBhbmQgY3JlYXRlZCBpbiBNeVNRTC4gVGhlcmUgYXJlIGJvdGggY3VzdG9tZXIgYW5kIGVtcGxveWVlIGZ1bmN0aW9uYWxpdGllcyB0byBleHBlcmltZW50IHdpdGguIEZlYXR1cmVzIHN1Y2ggYXMgXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbiwgYXV0aGVudGljYXRpb24sIHBhZ2UgcHJvdGVjdGlvbiwgc2Vzc2lvbiBzdG9yYWdlLCBwYWdpbmF0aW9uLCBtdWx0aXBsZSBxdWVyaWVzIHBlciBkYXRhYmFzZSBjYWxsLCBkYXRhYmFzZSB0cmFuc2FjdGlvbnMsIHByb2R1Y3QgdHJhY2tpbmcsIHByb2R1Y3QgcmVzdG9ja2luZywgYWRkIHRvIGNhcnQsIHBheW1lbnQgcHJvY2Vzc2luZyB1c2luZyBhIG1vZGlmaWVkIFBheVBhbCBTREssIHRvIG5hbWUgYSBmZXcsIHdlcmUgYWxsIGJ1aWx0IGZyb20gdGhlIGdyb3VuZCB1cCBhbmQgaW1wbGVtZW50ZWQgaW4gdGhpcyBzaXRlLlxyXG4gICAgICAgICAgICAgICAgICAgIENoZWNrIGl0IG91dCBhbmQgbGV0IG1lIGtub3cgd2hhdCB5b3UgdGhpbmshIFBsZWFzZSB1c2Ugb25seSBGQUtFIENSRURFTlRJQUxTIGlmIGNyZWF0aW5nIGEgY3VzdG9tZXIgYWNjb3VudCB0byBsb2dpbi4gU2VlIG15IEdpdEh1YiByZWFkbWUgZm9yIGluc3RydWN0aW9ucyBvbiBob3cgdG8gbG9nIGluIGFzIGFuIGVtcGxveWVlIHRvIHN0b2NrLCByZS1zdG9jayBhbmQvb3IgbW9kaWZ5IHByb2R1Y3QgZGF0YSBldGMuIFxyXG4gICAgICAgICAgICAgICAgYDtcclxuICAgICAgICAgICAgICAgIEN5YmVyZGlzZS5saW5rX25vdGUgPSBcIihmYWtlIGNyZWRlbnRpYWxzIG9ubHkgLSBkZXNrdG9wIHZlcnNpb24gb25seSEpXCI7XHJcbiAgICAgICAgICAgICAgICBDeWJlcmRpc2Uubm90ZXMucHVzaChgTW9zdCBvdGhlciBtYWpvciBmZWF0dXJlcyBhcmUgd29ya2luZyBhcyBleHBlY3RlZC4gU2VhcmNoIGZ1bmN0aW9uYWxpdHkgbm90IGltcGxlbWVudGVkIGp1c3QgeWV0LmApO1xyXG4gICAgICAgICAgICAgICAgQ3liZXJkaXNlLm5vdGVzLnB1c2goYFNvbWUgVUkgZWxlbWVudHMgYXJlIGluY29tcGxldGUvbWlzc2luZy5gKTtcclxuICAgICAgICAgICAgICAgIEN5YmVyZGlzZS5ub3Rlcy5wdXNoKGBOb3QgeWV0IGZ1bGx5IHJlc3BvbnNpdmUgb24gc21hbGxlciBkZXZpY2VzIWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3liZXJkaXNlX2Nhcm91c2VsX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN5YmVyZGlzZV9jYXJvdXNlbF9pbWdfc3JjcyA9IFtcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2N5YmVyZGlzZS1vbmxpbmUtc3RvcmUtMS1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2N5YmVyZGlzZS1vbmxpbmUtc3RvcmUtMi1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2N5YmVyZGlzZS1vbmxpbmUtc3RvcmUtMy1taW4ud2VicFwiLCBcclxuICAgICAgICAgICAgICAgICAgICBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2N5YmVyZGlzZS1vbmxpbmUtc3RvcmUtNC1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2N5YmVyZGlzZS1vbmxpbmUtc3RvcmUtNS1taW4ud2VicFwiXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3liZXJkaXNlX2Nhcm91c2VsX2ltZ19hbHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjeWJlcmRpc2VfdG9vbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjeWJlcmRpc2VfdG9vbF9pbWdfc3JjcyA9IFtcIi4vaW1nL2xvZ29zL2h0bWw1LWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9jc3MzLWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9qYXZhc2NyaXB0LWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9oYW5kbGViYXJzLWJhZGdlLndlYnBcIixcclxuICAgICAgICAgICAgICAgICAgICBcIi9pbWcvbG9nb3MvbXlzcWwtYmFkZ2Uud2VicFwiLCBcIi4vaW1nL2xvZ29zL25vZGVqcy1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvZXhwcmVzcy1sb2dvLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9wb3N0bWFuLWJhZGdlLndlYnBcIl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjeWJlcmRpc2VfdG9vbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgQ3liZXJkaXNlLmFkZF9pbWdzKGN5YmVyZGlzZV9jYXJvdXNlbF9pbWdfaWRzLCBjeWJlcmRpc2VfY2Fyb3VzZWxfaW1nX3NyY3MsIGN5YmVyZGlzZV9jYXJvdXNlbF9pbWdfYWx0cyk7XHJcbiAgICAgICAgICAgICAgICBDeWJlcmRpc2UuYWRkX3Rvb2xfaWNvbnMoY3liZXJkaXNlX3Rvb2xfaW1nX2lkcywgY3liZXJkaXNlX3Rvb2xfaW1nX3NyY3MsIGN5YmVyZGlzZV90b29sX2ltZ19hbHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNb3ZpZSBEYXRhYmFzZSBQcm9qZWN0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBNb3ZpZV9EYXRhYmFzZSA9IG5ldyBQcm9qZWN0KFwiTW92aWUgRGF0YWJhc2VcIiwgMiwgXCJodHRwczovL2Rub2VsbW92aWVhcGlkYXRhYmFzZS5uZXRsaWZ5LmFwcC9cIiwgXCJWaWV3XCIsIFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL0ROb2VsMjYvTW92aWVfRGF0YWJhc2VcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBNb3ZpZV9EYXRhYmFzZS5kZXNjcmlwdGlvbiA9IGBcclxuICAgICAgICAgICAgICAgICAgICBUaGlzIHByb2plY3Qgd2FzIGJ1aWx0IGZyb20gc2NyYXRjaCB0byBkeW5hbWljYWxseSBkaXNwbGF5IFwiTm93IFNob3dpbmdcIiBtb3ZpZSBkZXRhaWxzIGFuZCB0cmFpbGVycyB2aWEgY29uc3VtaW5nIG11bHRpcGxlIEFQSXM7IG1lYW5pbmcgYWxsIGRhdGEgc2hvd24gb24gbXkgd2Vic2l0ZSBpcyByZXF1ZXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICBhbmQgcHVsbGVkIGZyb20gYW5vdGhlciBzZXJ2ZXIsIGFuZCBtYW5pcHVsYXRlZCBvbiBteSB3ZWJzaXRlIHVzaW5nIEphdmFTY3JpcHQuIERlc2lnbiBpcyBiYXNlZCBvbiByZXRybyB0aGVhdHJlcy4gQ2xpY2sgdGhlIGxpbmsgYW5kIHRha2UgYSBsb29rIGF0IGFsbCB0aGUgdHJlbmRpbmcgbW92aWVzIG5vdyFcclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICBNb3ZpZV9EYXRhYmFzZS5saW5rX25vdGUgPSBcIihkZXNrdG9wIHZlcnNpb24gb25seSEpXCI7XHJcbiAgICAgICAgICAgICAgICBNb3ZpZV9EYXRhYmFzZS5ub3Rlcy5wdXNoKGBBbGwgbWFqb3IgZmVhdHVyZXMgYXJlIHdvcmtpbmcgYXMgZXhwZWN0ZWQuIFBhZ2luYXRpb24gdG8gYmUgaW1wbGVtZW50ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICBNb3ZpZV9EYXRhYmFzZS5ub3Rlcy5wdXNoKGBOb3QgeWV0IGZ1bGx5IHJlc3BvbnNpdmUgb24gc21hbGxlciBkZXZpY2VzIWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92aWVfZGJfY2Fyb3VzZWxfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92aWVfZGJfY2Fyb3VzZWxfaW1nX3NyY3MgPSBbXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9tb3ZpZS1kYi0xLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vbW92aWUtZGItMi1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL21vdmllLWRiLTMtbWluLndlYnBcIl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtb3ZpZV9kYl9jYXJvdXNlbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92aWVfZGJfdG9vbHNfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92aWVfZGJfdG9vbHNfaW1nX3NyY3MgPSBbXCIuL2ltZy9sb2dvcy9odG1sNS1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvY3NzMy1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvamF2YXNjcmlwdC1iYWRnZS53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW92aWVfZGJfdG9vbHNfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIE1vdmllX0RhdGFiYXNlLmFkZF9pbWdzKG1vdmllX2RiX2Nhcm91c2VsX2ltZ19pZHMsIG1vdmllX2RiX2Nhcm91c2VsX2ltZ19zcmNzLCBtb3ZpZV9kYl9jYXJvdXNlbF9pbWdfYWx0cyk7XHJcbiAgICAgICAgICAgICAgICBNb3ZpZV9EYXRhYmFzZS5hZGRfdG9vbF9pY29ucyhtb3ZpZV9kYl90b29sc19pbWdfaWRzLCBtb3ZpZV9kYl90b29sc19pbWdfc3JjcywgbW92aWVfZGJfdG9vbHNfaW1nX2FsdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFtYXpvbiBDbG9uZSBQcm9qZWN0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBBbWF6b25fQ2xvbmUgPSBuZXcgUHJvamVjdChcIkFtYXpvbiBDbG9uZVwiLCAyLCBcImh0dHBzOi8vY2xvbmUtOTA1YTcud2ViLmFwcC9cIiwgXCJJbnRlcmFjdFwiLCBcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9ETm9lbDI2L0FtYXpvbl9SZWFjdF9DbG9uZVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIEFtYXpvbl9DbG9uZS5kZXNjcmlwdGlvbiA9IGBcclxuICAgICAgICAgICAgICAgICAgICBUaGlzIHByb2plY3Qgd2FzIGRvbmUgYXMgbXkgaGFuZHMgb24gaW50cm9kdWN0aW9uIHRvIFJlYWN0LmpzIGFuZCBGaXJlYmFzZS4gSW4gdGhpcyBwYXJ0aWN1bGFyIGNhc2UsIEkgZm9sbG93ZWQgYSB0dXRvcmlhbCBhbmQgbWFuaXB1bGF0ZWQgbXkgY29kZSByYXRoZXIgdGhhbiBidWlsZGluZyBmcm9tIHNjcmF0Y2guXHJcbiAgICAgICAgICAgICAgICAgICAgVGhlIG1haW4gcHVycG9zZSB3YXMgdG8gdW5kZXJzdGFuZCB0aGUgY29uY2VwdHMgYmVoaW5kIHRoZSB2ZXJ5IHBvcHVsYXIgUmVhY3QuanMgZnJhbWV3b3JrLCBhcyB3ZWxsIGFzIHRvIGxlYXJuIG5ldyBtZXRob2RzIGZvciBjb2RpbmcuIE1haW4gcHJvamVjdCBmZWF0dXJlcyBhcmUgYWNjb3VudCBjcmVhdGlvbiwgXHJcbiAgICAgICAgICAgICAgICAgICAgbG9naW4sIGFkZCB0byBjYXJ0LCBhbmQgcGF5bWVudCBwcm9jZXNzaW5nIHVzaW5nIFN0cmlwZSBBUEkuIFBsZWFzZSB1c2Ugb25seSBGQUtFIENSRURFTlRJQUxTIGlmIGNyZWF0aW5nIGFuIGFjY291bnQgdG8gbG9naW4uIFNlZSBteSBHaXRIdWIgcmVhZG1lIGZvciBmdXJ0aGVyIGluc3RydWN0aW9ucy4gXHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgQW1hem9uX0Nsb25lLmxpbmtfbm90ZSA9IFwiKGZha2UgY3JlZGVudGlhbHMgb25seSAtIGRlc2t0b3AgdmVyc2lvbiBvbmx5ISlcIjtcclxuICAgICAgICAgICAgICAgIEFtYXpvbl9DbG9uZS5ub3Rlcy5wdXNoKGBBbGwgbWFqb3IgZmVhdHVyZXMgYXJlIHdvcmtpbmcgYXMgZXhwZWN0ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICBBbWF6b25fQ2xvbmUubm90ZXMucHVzaChgTm90IHlldCBmdWxseSByZXNwb25zaXZlIG9uIHNtYWxsZXIgZGV2aWNlcyFgKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYXpvbl9jX2Nhcm91c2VsX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYXpvbl9jX2Nhcm91c2VsX2ltZ19zcmNzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vYW1hem9uLWNsb25lLTEtbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9hbWF6b24tY2xvbmUtMi1taW4ud2VicFwiLCBcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL2FtYXpvbi1jbG9uZS0zLW1pbi53ZWJwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9hbWF6b24tY2xvbmUtNC1taW4ud2VicFwiXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1hem9uX2NfY2Fyb3VzZWxfaW1nX2FsdHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFtYXpvbl9jX3Rvb2xfaW1nX2lkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1hem9uX2NfdG9vbF9pbWdfc3JjcyA9IFtcIi4vaW1nL2xvZ29zL2h0bWw1LWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9jc3MzLWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9qYXZhc2NyaXB0LWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9yZWFjdC1iYWRnZS53ZWJwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuL2ltZy9sb2dvcy9maXJlYmFzZS1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3Mvbm9kZWpzLWJhZGdlLndlYnBcIiwgXCIuL2ltZy9sb2dvcy9leHByZXNzLWxvZ28ud2VicFwiXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW1hem9uX2NfdG9vbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgQW1hem9uX0Nsb25lLmFkZF9pbWdzKGFtYXpvbl9jX2Nhcm91c2VsX2ltZ19pZHMsIGFtYXpvbl9jX2Nhcm91c2VsX2ltZ19zcmNzLCBhbWF6b25fY19jYXJvdXNlbF9pbWdfYWx0cyk7XHJcbiAgICAgICAgICAgICAgICBBbWF6b25fQ2xvbmUuYWRkX3Rvb2xfaWNvbnMoYW1hem9uX2NfdG9vbF9pbWdfaWRzLCBhbWF6b25fY190b29sX2ltZ19zcmNzLCBhbWF6b25fY190b29sX2ltZ19hbHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZWFsIEVzdGF0ZSBXZWJzaXRlIFByb2plY3RcclxuICAgICAgICAgICAgICAgIGNvbnN0IFJlYWxfRXN0YXRlX1NpdGUgPSBuZXcgUHJvamVjdChcIlJlYWwgRXN0YXRlIFNpdGVcIiwgMywgXCJodHRwczovL3ByZXNpZGVudGlhbHJlYWx0b3JzLWRldi1zdGF0aWMubmV0bGlmeS5hcHAvXCIsIFwiVmlld1wiLCBcclxuICAgICAgICAgICAgICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9ETm9lbDI2L1ByZXNpZGVudGlhbC1SZWFsdG9ycy1TdGF0aWNcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBSZWFsX0VzdGF0ZV9TaXRlLmRlc2NyaXB0aW9uID0gYFxyXG4gICAgICAgICAgICAgICAgICAgIFRoZSBmb2N1cyBvZiB0aGlzIHByb2plY3Qgd2FzIGZvciBtZSB0byBsZWFybiBhbmQgaW1wbGVtZW50IG1vZGVybiBkZXNpZ24sIHVzZXIgaW50ZXJmYWNlIChVSSkgYW5kIHVzZXIgZXhwZXJpZW5jZSAoVVgpIGVsZW1lbnRzLiBJdCB3YXMgYnVpbHQgZnJvbSBzY3JhdGNoIGFuZCB3aWxsIGV2ZW50dWFsbHkgYmUgY29udmVydGVkXHJcbiAgICAgICAgICAgICAgICAgICAgdG8gYSBmdWxseSBmdW5jdGlvbmFsIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9uIChTUEEpIHVzaW5nIFJlYWN0LmpzLCBNb25nb0RCLCBOb2RlLmpzIGFuZCBFeHByZXNzLmpzLiBMZXQgbWUga25vdyB3aGF0IHlvdSB0aGluayFcclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICBSZWFsX0VzdGF0ZV9TaXRlLmxpbmtfbm90ZSA9IFwiKGRlc2t0b3AgdmVyc2lvbiBvbmx5ISlcIjtcclxuICAgICAgICAgICAgICAgIFJlYWxfRXN0YXRlX1NpdGUubm90ZXMucHVzaChgTW9zdCBjbGllbnQgc2lkZSBmZWF0dXJlcyB3b3JrIGFzIGV4cGVjdGVkLiBGb2N1cyBvZiB0aGlzIHByb2plY3Qgd2FzIG9uIGRlc2lnbiBlbGVtZW50cyByYXRoZXIgdGhhbiBmdW5jdGlvbmFsaXR5LmApO1xyXG4gICAgICAgICAgICAgICAgUmVhbF9Fc3RhdGVfU2l0ZS5ub3Rlcy5wdXNoKGBQcm9qZWN0IHRvIGJlIHJlZG9uZSBhcyBhbiBhcHAgKFNQQSkgd2l0aCB0aGUgdGhlIGZ1bmN0aW9uYWxpdGllcyBleHBlY3RlZCBvZiBhIHJlYWwgZXN0YXRlIHdlYnNpdGUuYCk7XHJcbiAgICAgICAgICAgICAgICBSZWFsX0VzdGF0ZV9TaXRlLm5vdGVzLnB1c2goYE5vdCB5ZXQgZnVsbHkgcmVzcG9uc2l2ZSBvbiBzbWFsbGVyIGRldmljZXMhYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsX2VzdGF0ZV9jYXJvdXNlbF9pbWdfaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsX2VzdGF0ZV9jYXJvdXNlbF9pbWdfc3JjcyA9IFtcIi4vaW1nL3Byb2plY3RzL3dlYnAvbWluL3JlYWwtZXN0YXRlLTEtbWluLndlYnBcIiwgXCIuL2ltZy9wcm9qZWN0cy93ZWJwL21pbi9yZWFsLWVzdGF0ZS0yLW1pbi53ZWJwXCIsIFwiLi9pbWcvcHJvamVjdHMvd2VicC9taW4vcmVhbC1lc3RhdGUtMy1taW4ud2VicFwiXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxfZXN0YXRlX2Nhcm91c2VsX2ltZ19hbHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWFsX2VzdGF0ZV90b29sX2ltZ19pZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxfZXN0YXRlX3Rvb2xfaW1nX3NyY3MgPSBbXCIuL2ltZy9sb2dvcy9odG1sNS1iYWRnZS53ZWJwXCIsIFwiLi9pbWcvbG9nb3MvY3NzMy1iYWRnZS53ZWJwXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbF9lc3RhdGVfdG9vbF9pbWdfYWx0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgUmVhbF9Fc3RhdGVfU2l0ZS5hZGRfaW1ncyhyZWFsX2VzdGF0ZV9jYXJvdXNlbF9pbWdfaWRzLCByZWFsX2VzdGF0ZV9jYXJvdXNlbF9pbWdfc3JjcywgcmVhbF9lc3RhdGVfY2Fyb3VzZWxfaW1nX2FsdHMpO1xyXG4gICAgICAgICAgICAgICAgUmVhbF9Fc3RhdGVfU2l0ZS5hZGRfdG9vbF9pY29ucyhyZWFsX2VzdGF0ZV90b29sX2ltZ19pZHMsIHJlYWxfZXN0YXRlX3Rvb2xfaW1nX3NyY3MsIHJlYWxfZXN0YXRlX3Rvb2xfaW1nX2FsdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIGxhc3QgcHJvamVjdCBzdG9yZWQgaW4gc2Vzc2lvbiBhbmQgZXhlY3V0ZSBjaGFuZ2UgcHJvamVjdCBpZiBjdXJyZW50IHByb2plY3QgaXMgbm90IGVtcHR5XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50X3Byb2plY3QgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJjdXJyZW50X3Byb2plY3RcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRfcHJvamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZV9wcm9qZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3Rfb3ZlcnZpZXcuaW5uZXJIVE1MID0gbmV3X2lubmVyX2h0bWw7ICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJlaW5pdGlhbGl6ZV9lbCgpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9nYWxsZXJ5X2J0bnMuZm9yRWFjaChidG4gPT4geyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9nZ2VyKGJ0biwgYnRuLmdldEF0dHJpYnV0ZShcImRhdGEtZGV2LXByb2plY3RcIiksIGJ0bi5kYXRhc2V0LmRldlByb2plY3QpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ0bi5kYXRhc2V0LmRldlByb2plY3QgPT09IFwiQWxpZW4gTWF0aHZhc2lvbiBHYW1lXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3Byb2plY3QgPSBBbGllbl9NYXRodmFzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ0bi5kYXRhc2V0LmRldlByb2plY3QgPT09IFwiV2l4IFNpdGUgQ2xvbmVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdCA9IFdpeF9DbG9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidG4uZGF0YXNldC5kZXZQcm9qZWN0ID09PSBcIkN5YmVyZGlzZSBPbmxpbmUgU3RvcmVcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfcHJvamVjdCA9IEN5YmVyZGlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidG4uZGF0YXNldC5kZXZQcm9qZWN0ID09PSBcIk1vdmllIERhdGFiYXNlXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X3Byb2plY3QgPSBNb3ZpZV9EYXRhYmFzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChidG4uZGF0YXNldC5kZXZQcm9qZWN0ID09PSBcIkFtYXpvbiBDbG9uZVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0ID0gQW1hem9uX0Nsb25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ0bi5kYXRhc2V0LmRldlByb2plY3QgPT09IFwiUmVhbCBFc3RhdGUgU2l0ZVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9wcm9qZWN0ID0gUmVhbF9Fc3RhdGVfU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyKFwiUFJPSkVDVCBOT1QgTE9BREVEIENPUlJFQ1RMWVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkcyBuZXcgcHJvamVjdCB0byBjYXJvdXNlbCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dnZXIoY3VycmVudF9wcm9qZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX3Byb2plY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgY3VycmVudCBwcm9qZWN0IGluIHNlc3Npb24gc3RvcmFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudF9wcm9qZWN0XCIsIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRfcHJvamVjdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwib2xkIGluZGljYXRvcnNcIiwgVUkuZGV2X3Byb2plY3RfY2Fyb3VzZWxfaW5kaWNhdG9yX3NlY3Rpb24sIFwib2xkIGlubmVyXCIsIFVJLmRldl9wcm9qZWN0X2Nhcm91c2VsX2lubmVyX3NlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBVSS5kZXZfcHJvamVjdF9vdmVydmlldy5pbm5lckhUTUwgPSBuZXdfaW5uZXJfaHRtbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVpbml0aWFsaXplX2VsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLmRldl9wcm9qZWN0X292ZXJ2aWV3LnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVJLnJldHVybl90b19kZXZfZ2FsbGVyeV9idG5zLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLmRldl9wcm9qZWN0X2dhbGxlcnkuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGVzIGZ1bmN0aW9uIGFuZCBwcm92aWRlcyBjbG9zdXJlIGZvciBkZXZlbG9wbWVudCBwcm9qZWN0c1xyXG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgdGhlIG5vZGUgdGhhdCB3aWxsIGJlIG9ic2VydmVkIGZvciBtdXRhdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRfbm9kZSA9IFVJLmRldl9wcm9qZWN0X292ZXJ2aWV3O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBPcHRpb25zIGZvciB0aGUgb2JzZXJ2ZXIgKHdoaWNoIG11dGF0aW9ucyB0byBvYnNlcnZlKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHsgYXR0cmlidXRlczogZmFsc2UsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsYmFjayBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gbXV0YXRpb25zIGFyZSBvYnNlcnZlZFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24obXV0YXRpb25zTGlzdCwgb2JzZXJ2ZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0cmFkaXRpb25hbCAnZm9yIGxvb3BzJyBmb3IgSUUgMTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9uc0xpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0EgY2hpbGQgbm9kZSBoYXMgYmVlbiBhZGRlZCBvciByZW1vdmVkLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtdXRhdGlvbi50eXBlID09PSAnYXR0cmlidXRlcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdUaGUgJyArIG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgKyAnIGF0dHJpYnV0ZSB3YXMgbW9kaWZpZWQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdzdWJ0cmVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1RoZSBzdWJ0cmVlIGF0dHJpYnV0ZSB3YXMgbW9kaWZpZWQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhtdXRhdGlvbiwgXCJhbmQgXCIsIG9ic2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBsaW5rZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0IG9ic2VydmluZyB0aGUgdGFyZ2V0IG5vZGUgZm9yIGNvbmZpZ3VyZWQgbXV0YXRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXRfbm9kZSwgY29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTGF0ZXIsIHlvdSBjYW4gc3RvcCBvYnNlcnZpbmdcclxuICAgICAgICAgICAgICAgICAgICAvLyBvYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIFVJLnJldHVybl90b19kZXZfZ2FsbGVyeV9idG5zLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVUkuZGV2X3Byb2plY3RfZ2FsbGVyeS5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgICAgICAvKioqIENPTlRBQ1QgU0VDVElPTiAqKiovXHJcblxyXG4gICAgICAgICAgICAvKiogRm9ybXNwcmVlIHZhbGlkYXRpb24gKiovXHJcblxyXG4gICAgICAgICAgICAvLyBFeGFtcGxlIHN0YXJ0ZXIgSmF2YVNjcmlwdCBmb3IgZGlzYWJsaW5nIGZvcm0gc3VibWlzc2lvbnMgaWYgdGhlcmUgYXJlIGludmFsaWQgZmllbGRzXHJcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHsgICBcclxuICAgICAgICAgICAgICAgIC8vIE9ic2VydmVzIGlmIGZvcm0gaXMgaW4gdmlldyBhbmQgdGhlbiBtYWtlcyBjb3VudHJ5IEFQSSByZXF1ZXN0IGlmIHRydWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICByb290TWFyZ2luOiAnMjAwcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHNlbGVjdF9jaGFuZ2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtX2FwaV9vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbihlbnRyaWVzLCBvYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0KFwiLi9CdXNpbmVzc19Mb2dpYy9BUEkuanNcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKG1vZHVsZSA9PiBtb2R1bGUuZGVmYXVsdCkgLy8gdXNlcyB0aGUgZGVmYXVsdCBleHBvcnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChBUEkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZXMgZm9ybSBjb3VudHJpZXMgdXNpbmcgQVBJXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQ291bnRyeV9BUEkgPSBuZXcgQVBJKFwiaHR0cHM6Ly9yZXN0Y291bnRyaWVzLmV1L3Jlc3QvdjIvYWxsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VyX3R5cGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X2NoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZF9vcHRpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIm9wdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkcyBjb3VudHJ5IGZsYWcgYW5kIHBob25lIGNhbGxpbmcgY29kZSBvbiBjb3VudHJ5IHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZF9vcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChvcHRpb24udmFsdWUgJiYgb3B0aW9uLnNlbGVjdGVkKSAmJiBvcHRpb24udmFsdWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gb3B0aW9uLmdldEF0dHJpYnV0ZShcImRhdGEtZmxhZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsaW5nX2NvZGVzID0gb3B0aW9uLmdldEF0dHJpYnV0ZShcImRhdGEtY2FsbGluZy1jb2Rlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgZmxhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcImFsdFwiLCBgQ291bnRyeSBmbGFnIGZvciAke29wdGlvbi52YWx1ZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCI0MHB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCJhdXRvXCIpOyBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VyX3R5cGVkKSBVSS5waG9uZS52YWx1ZSA9IGArJHtjYWxsaW5nX2NvZGVzfS1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChVSS5jb3VudHJ5X3NlbGVjdC5sYWJlbHNbMF0uY2hpbGRyZW5bMV0gJiYgVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmNoaWxkcmVuWzFdLnRhZ05hbWUgPT09IFwiSU1HXCIpIFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5jaGlsZHJlblsxXS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmFwcGVuZENoaWxkKGltZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbi5zZWxlY3RlZCAmJiAhb3B0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5jaGlsZHJlblsxXSAmJiBVSS5jb3VudHJ5X3NlbGVjdC5sYWJlbHNbMF0uY2hpbGRyZW5bMV0udGFnTmFtZSA9PT0gXCJJTUdcIikgVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmNoaWxkcmVuWzFdLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291bnRyeV9BUEkuZmV0Y2hfYXBpKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZXMgd2l0aCBBUEkgZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goZGF0dW0gPT4geyAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3X29wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfb3B0aW9uLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGRhdHVtLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X29wdGlvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZsYWdcIiwgZGF0dW0uZmxhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdfb3B0aW9uLnNldEF0dHJpYnV0ZShcImRhdGEtY2FsbGluZy1jb2Rlc1wiLCBkYXR1bS5jYWxsaW5nQ29kZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3X29wdGlvbi5pbm5lckhUTUwgPSBuZXdfb3B0aW9uLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkuY291bnRyeV9zZWxlY3QuYXBwZW5kQ2hpbGQobmV3X29wdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVUkucGhvbmUuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGRlYm91bmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfdHlwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVJLmNvdW50cnlfc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZGVib3VuY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0X2NoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiwgZXJyKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiBmb3Jtc3ByZWUoKSk7IC8vIEV4ZWN1dGVzIGZvcm1zcHJlZSBmdW5jdGlvbiByZWdhcmRsZXNzIG9mIHByb21pc2UgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coXCJGYWlsZWQgdG8gaW1wb3J0IEFQSSBtb2R1bGU6IFwiLCBlcnIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcm1fYXBpX29ic2VydmVyLm9ic2VydmUoVUkubXlfZm9ybSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1zcHJlZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnRhY3QgZm9ybSB2YWxpZGF0aW9uIHJlc3BvbnNlcyBvbiBmYWlsIChmb3IgZWFjaCBmb3JtKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25fbXNncyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFVJLmRpc3BsYXlfZm9ybV92YWxpZGF0aW9uX21zZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRmV0Y2ggYWxsIHRoZSBmb3JtcyB3ZSB3YW50IHRvIGFwcGx5IGN1c3RvbSBCb290c3RyYXAgdmFsaWRhdGlvbiBzdHlsZXMgdG8gdXNpbmcgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5lZWRzLXZhbGlkYXRpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvb3Agb3ZlciB0aGVtIGFuZCBwcmV2ZW50IHN1Ym1pc3Npb25cclxuICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChVSS5mb3Jtc19uZWVkX3ZhbGlkYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oZm9ybSwgaW5kZXgpIHsgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEN5Y2xlIHRocm91Z2ggZWFjaCBmb3JtIGlucHV0L3NlbGVjdC90ZXh0IGFyZWEgdGFncyBhbmQgc3RvcmUgb3IgcG9wdWxhdGUgd2l0aCBzZXNzaW9uU3RvcmFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm0tZGF0YVwiKS5mb3JFYWNoKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnRhZ05hbWUgPT09IFwiSU5QVVRcIikgZGF0YS52YWx1ZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oZGF0YS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50YWdOYW1lID09PSBcIlRFWFRBUkVBXCIpIGRhdGEudmFsdWUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGRhdGEubmFtZSk7ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50YWdOYW1lID09PSBcIlNFTEVDVFwiKSBkYXRhLnZhbHVlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShkYXRhLm5hbWUpIHx8IFwiXCI7ICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEsIGRhdGEudGFnTmFtZSwgZGF0YS5uYW1lLCBkYXRhLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RfY2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSBjb250YWN0IGZvcm0gaW5mbyBpbiBjb29raWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZGVib3VuY2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGRhdGEubmFtZSwgKGRhdGEudmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGVhdmlseSBtb2RpZmllZCBCb290c3RyYXAgdmFsaWRhdGlvbiBhbmQgRm9ybXNwcmVlIGZ1bmN0aW9ucyAoQWpheCBtZXRob2QgLSBwcmV2ZW50cyByZWRpcmVjdGlvbiBvbiBmb3JtIHN1Ym1pdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldmVudCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3AgbXVsdGlwbGUgc3VibWl0cyBmcm9tIG9jY3VycmluZyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0KCcuL0J1c2luZXNzX0xvZ2ljL0Zvcm1zcHJlZS5qcycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQpIC8vIHVzZXMgdGhlIGRlZmF1bHQgZXhwb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoRm9ybXNwcmVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JtLmNoZWNrVmFsaWRpdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+eyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2tzIHZhbGlkYXRpb24gb24gc3VibWl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5hZGQoJ3dhcy12YWxpZGF0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4geyAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheXMgdmFsaWRhdGlvbiBtZXNzYWdlcyBpZiBmYWlsZWQgdG8gZW50ZXIgaW5mbyBjb3JyZWN0bHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25fbXNnc1tpbmRleF0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gYWRkIFwid2FzLXZhbGlkYXRlZFwiIGNsYXNzIHRvIEJvb3RzdHJhcCBmb3JtOiAke2Vycn1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgTXlfRm9ybSA9IG5ldyBGb3Jtc3ByZWUoVUkubXlfZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE15X0Zvcm0ubWV0aG9kID0gVUkubXlfZm9ybS5tZXRob2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE15X0Zvcm0udXJsID0gVUkubXlfZm9ybS5hY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE15X0Zvcm0uZGF0YSA9IG5ldyBGb3JtRGF0YShNeV9Gb3JtLmZvcm0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNeV9Gb3JtLnN1Y2Nlc3NfbXNnID0gYEhpICR7TXlfRm9ybS5nZXRfZm9ybV9kYXRhKFwiZmlyc3RfbmFtZVwiKS50cmltKCl9ISBgICsgTXlfRm9ybS5zdWNjZXNzX21zZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTXlfRm9ybS5lcnJvcl9tc2cgPSBgU29ycnkgJHtNeV9Gb3JtLmdldF9mb3JtX2RhdGEoXCJmaXJzdF9uYW1lXCIpLnRyaW0oKX0hIGAgKyBNeV9Gb3JtLmVycm9yX21zZztcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gd3JhcHBlcl9ub19leGVjKGZvcm1fc3VibWl0X3N1Y2Nlc3MsIE15X0Zvcm0uZm9ybSwgVUkubXlfZm9ybV9idXR0b24sIFVJLm15X2Zvcm1fc3RhdHVzLCBNeV9Gb3JtLnN1Y2Nlc3NfbXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSB3cmFwcGVyX25vX2V4ZWMoZm9ybV9zdWJtaXRfZXJyb3IsIFVJLm15X2Zvcm1fc3RhdHVzLCBNeV9Gb3JtLmVycm9yX21zZyk7XHJcbiAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFqYXgoTXlfRm9ybS5tZXRob2QsIE15X0Zvcm0udXJsLCBNeV9Gb3JtLmRhdGEsIHN1Y2Nlc3MsIGVycm9yLCAoc3RhdHVzKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsYmFjayBleGVjdXRlZCBvbnJlYWR5c3RhdGVjaGFuZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2FwdGNoYUNhbGxiYWNrKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJpbiBncmVjYXB0Y2hhIGNhbGxiYWNrXCIsIGdyZWNhcHRjaGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ3dhcy12YWxpZGF0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFVJLmNvdW50cnlfc2VsZWN0LmxhYmVsc1swXS5jaGlsZHJlblsxXSAmJiBVSS5jb3VudHJ5X3NlbGVjdC5sYWJlbHNbMF0uY2hpbGRyZW5bMV0udGFnTmFtZSA9PT0gXCJJTUdcIikgVUkuY291bnRyeV9zZWxlY3QubGFiZWxzWzBdLmNoaWxkcmVuWzFdLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gaW1wb3J0IEZvcm1zcHJlZSBtb2R1bGU6IFwiLCBlcnIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICB9KTsgLy8gZW5kIG9mIERPTUNvbnRlbnRMb2FkZWQgZXZlbnQgbGlzdGVuZXJcclxuICAgIH0sIC8vIGVuZCBvZiBpbml0KClcclxufTsgLy8gZW5kIG9mIEFwcFxyXG5cclxuQXBwLmluaXQoKTtcclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==